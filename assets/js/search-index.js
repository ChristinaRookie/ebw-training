index.addDoc({
    id: 0,
    title: "Designing for Digital: Cover",
    content: ""
});
index.addDoc({
    id: 1,
    title: "Designing for Digital: Title page",
    content: "Designing for digital What print-book designers should know about ebooks Arthur Attwell"
});
index.addDoc({
    id: 2,
    title: "Designing for Digital: Copyright and licensing",
    content: "Copyright and licensing Designing for Digital: What print-book designers should know about ebooks First published by Electric Book Works in 2010, revised in 2014 Text © Electric Book Works 2010, 2014 Print edition ISBN: 978-1-920218-53-9 PDF edition ISBN: 978-1-920218-50-8 EPUB edition ISBN: 978-1-920218-51-5 All text is licensed under a Creative Commons Attribution-ShareAlike licence (see creativecommons.org/licenses/by-sa/3.0/). Attribution — You must attribute the work in the manner specified by the author or licensor (but not in any way that suggests that they endorse you or your use of the work). Share Alike — If you alter, transform, or build upon this work, you may distribute the resulting work only under the same or similar license to this one. For information or further permissions, contact Electric Book Works, electricbookworks.com."
});
index.addDoc({
    id: 3,
    title: "Designing for Digital: Table of contents",
    content: "Contents The author Note Introduction An overview of digital publishing What is an ebook? Ebook formats Standardisation Major formats PDF EPUB Mobi Digital Rights Management (DRM) An intro to HTML and CSS code Content, form and function What are XML and XHTML? Converting books to ebooks First-step: decisions Creating a PDF ebook Converting to EPUB using Calibre Creating EPUB from InDesign Working in InDesign After exporting to EPUB Practical typesetting for print and digital Text flow Images Fonts InDesign CS3 quirks Styles Local formatting Pagination and master pages Spacing Text alignment Background colours Tables of contents Covers Metadata Embedding multimedia Getting inside the EPUB Checking ebooks Further reading Feedback"
});
index.addDoc({
    id: 4,
    title: "Designing for Digital: The author",
    content: "The author Arthur Attwell is co-founder and director of Electric Book Works, where he develops new and better ways to publish in emerging markets. There he started Bettercare, which publishes self-managed course books for nurses and midwives. He’s a co-founder of the Digital Minds Network, a group of digital-publishing experts working in developing countries. Arthur is also the author of the EBW Knowledge Base and Encyclopaedia Britannica‘s ‘ebook’ entry. He worked in educational and scholarly publishing for two multinational publishers before starting EBW in 2006. He has presented at conferences in South Africa, India, Europe and the US, and was runner-up for the British Council’s International Young Publishing Entrepreneur award in He won ‘Most Entrepreneurial Startup’ with Paperight at O’Reilly Tools of Change for Publishing in New York in 2013. He lives in Cape Town with his wife Michelle Matthews and their son Aidan."
});
index.addDoc({
    id: 5,
    title: "Designing for Digital: Introduction",
    content: "Note Please remember that this is a fast-changing industry. This material was written in 2010 and revised in early 2014. By the time you read this, some of it could be out of date."
});
index.addDoc({
    id: 6,
    title: "Designing for Digital: Introduction",
    content: "Introduction I wrote this book as a course at Electric Book Works for book designers, typesetters and production managers, though it’s useful for anyone working in book publishing. When I say ‘design’ I usually mean every aspect of the project design of a book: concept, commissioning, writing, editing, layout, proofing, production and distribution. But in this short book I focus on the things most production staff deal with on a daily basis: the process of typesetting. Then, what you learn here has implications for every stage of publishing books. There are things the commissioning editor can do to help prepare a book for its future life as an ebook, for instance, if they understand how their decisions affect ebook production. This book’s in four parts: Overview: To make sensible decisions, you need an overview of the digital publishing industry, where ebook formats like EPUB fit in, and how traditional book files are converted to ebook files. An intro to code: Just like you once learned how litho printing works, now you need some technical knowledge, especially about major ebook file formats, and how HTML and CSS code works. Converting ebooks: Practically, how are print books converted into ebooks? This is a quick primer of the basics. Practical typesetting: When you get to your office, you should be able to start prepping files (mainly in InDesign) in ebook-friendly ways. This is the crux of what you need to do. My priority is to equip you to design books in a way that is not print-centric. As books are read more and more on screens, the designer’s job – and the job of those briefing and managing designers and typesetters – changes in important ways. The best, most valuable designers will soon be those who future-proof their content, making it easily reusable for distribution to laptops, ereaders, mobile phones, and a range of apps and devices we haven’t heard of yet. In short, you need to be able to work towards much more than good old PDF. In particular, you need to know how HTML works, because it has become the most important computer language in publishing. I’m going to assume that you like working in something like InDesign. You want eventually to create print books and ebooks at the same time, and where you can, to make those ebooks look good. I don’t try to give you aesthetic design guidance; I simply aim to give you the knowledge you need to prepare your print-oriented work for on-screen reading, particularly as ebooks."
});
index.addDoc({
    id: 7,
    title: "Designing for Digital: An overview of digital publishing",
    content: "An overview of digital publishing Why are you reading this? That’s not a rhetorical question (you can even tell me right now on Twitter). I suspect it’s because you’ve begun dabbling in ebooks as a designer or production manager, or you’ve been asked to by your boss or a client. Or you’re simply curious about the ever-increasing volume of talk about ebooks, because you know sooner or later they’re going to be a part of your job. We know ebooks are a very important part of the publishing landscape right now, especially as publishers try to recover a share of people’s attention from digital devices currently used mostly for music, video and games. But there there is another, much more important process happening: ebooks are a by-product of a great human enterprise, the digitisation of literature. Digitised literature will be more easily shared and sold, and in time it will make education and storytelling cheaper and more abundant. Now is only the beginning. Despite the incredible size and depth of the Internet as we know it, it’s still far, far younger than the world’s paper literature. Ebooks are the most apparent, easily monetised evidence of all our efforts to add the value and volume of paper literature to the great database of knowledge that is the Internet. Everything you learn today should be seen in that context. You are part of the greatest knowledge-curation process of all time. The Internet we all want is one that easily grows into a more and more powerful, increasingly automated way to create and move large amounts of information, and one that helps us make a living in the process. To do that, we have to fill it with information that will be useful for a long time, and that can be easily found and manipulated by machines. (As with any database: rubbish in, rubbish out.) Every ebook is a piece of that database. It’s not only a freestanding product. So, if you’re working with ebooks, you need to know how they fit into the Internet, both as consumer products and as an Internet technology. Today, the ebook industry is most vibrant in the US, followed by the UK and Western Europe. This has been catalysed by more and more people buying dedicated ebook-reading devices, or e-ink ereaders, such as those from Amazon, Barnes & Noble and Kobo. The e-ink has been important because it is profoundly different to read on than on a backlit computer or phone screen. E-ink’s text and images are not made of light, like on a backlit screen, but of thousands of microcapsules that rearrange with every page-refresh into the shapes of letters and pictures. There are usually about 150 to 200 capsules (think pixels or dots) in every inch of screen. Reading on an e-ink screen really is almost like reading on paper. This has made ebooks easier for paper-book lovers to adopt. The most popular ereaders also make it easy to buy ebooks on the device, by connecting automatically to their parent company. Amazon’s best at this right now: you can browse the Amazon store, buy an ebook, and be reading it within about a minute, anytime, anywhere. E-ink readers were just the first big win, though. Far more people are downloading ebooks on their phones and tablets, and reading them in apps from Amazon, Apple, Google and others. The screens may be backlit, but they’re easy to read on, and the expense of the device is easier to justify because it can do so much more, like email, visiting websites, playing games, and using a myriad useful apps. There isn’t space or time here to address many of the common questions and arguments about ereading here. (‘Will ebooks replace print?’, ‘I can’t read a book on a small screen!’, ‘What about bookstores?’, etc.) I highly recommend an article by John Siracusa called ‘The Once and Future Ebook’. It’s a few years old now, but as brilliant as ever. Siracusa talks about the history of ebooks, and where and why they’re important. What is an ebook?What is an ebook? That’s easy to answer until you think hard about it. So, first, let’s not think hard about it: an ebook is a book you read on a screen. The author and publisher have distributed it as a digital file.Now, let’s complicate things. Here’s a list of ebooks features, starting with the most obvious, and then getting into some grey areas: Ebooks are books read on a screen. Ebooks are sometimes converted versions of paper books (created from scans or print PDFs), and sometimes they’re designed as ebooks from the start. Ebooks are stored and delivered in carefully chosen file formats (much like word processing is mostly in Word’s .doc format, and spreadsheeting mostly in Excel’s .xls format). This means they can be read offline – without having to constantly get info from a web server somewhere else. Ebooks depend on software to be opened and read (like a .doc file depends on a good Word-like program). The quality of this software determines the quality of the reading experience. Consumers expect ebooks to cost less than print – usually 50%–80% of the print book price. (Pricing is a whole other issue for a separate discussion.) Ebooks are found and downloaded from the Internet. Ebooks are sometimes read online, much like a live website. (The online/offline distinction is important for all kinds of reasons.) Ebooks sometimes include sound, video, or interactive forms, quizzes, or even games. Those are some fundamentals, just to get us started. Ebook formatsA file format is a way of storing information. A set of structures, intentions, computer languages and human languages that have been agreed on by a group of computer engineers and subject experts. Each file format stores information differently.So, file formats are carefully designed by groups of people to achieve very particular aims. There have been many ebook formats, and over time some have proved more resilient than others.StandardisationWhen we standardise something, we all agree to work with the same set of rules. For example, the rules of soccer have been standardised around the world so that anyone can play against anyone else without having to learn new rules. Standards can be official (written down in a formal document) or de facto (generally accepted conventions).Only in the last few years has the publishing world settled on standards for ebooks.There are established and emerging standards for file formats, purchasing processes, security, pricing, availability, and so on. The standards we care about most here are around file formats. Standard formats make it easier to open and read files – as a customer you don’t want to have to think about which file format you’re buying, it must just work on your ereader. The more businesses use the same file formats, the easier it is to move large numbers of ebooks around, for instance between publishers, distributors and retailers. If everyone’s using the same formats, more companies create tools to make and edit them. For instance, in word-processing, almost everyone uses MS Word, even though it’s not actually the best file format for storing formatted text. The standard became more important than its technical quality. Those who come up with new file formats in the early days of a new industry try to use their formats to make loads of money, either by charging a licence fee to software companies for using that format, like MS Word, MP3 and GIF in the early days; or by forcing people to use only their software to open or edit that format. These formats are closed (proprietary), as opposed to being open (free for anyone to use).Closed formats are those that are still locked down by their owners. No one else is allowed to produce files in those formats without the permission of their owners, who often charge a substantial licence fee. The owners do not publicly publish details (a specification) of how to make files in their formats.Open formats are free for anyone to create files in, and the specification (how to build the files) is freely available to anyone.Ultimately the most popular file formats end up being open and free to use. Ironically, the ones that start as open tend to catch on more slowly (e.g. OGG, an alternative to MP3), because they don’t have corporate marketing budgets behind them. While ebook file-format standards are settling, we still have to work with a combination of closed and open formats.Sometimes, the most popular formats start as proprietary and then become open. The best example is PDF. PDF was owned by Adobe, who in 2008 decided to make it an open format, effectively donating it to the world, a move for which they deserve a lot of credit. They’ve done well to remain the premier PDF software editing company since then.Major formatsAmong major ebook file formats, the main distinguishing features of each format include: whether the content is static (e.g. fixed PDF pages) or reflowable (there are no pages, content fills the available screen area, according to font size at the time); whether the format is open (anyone can make that format) or proprietary (only the owner of the format can make it or licence others to do so); how easily and reliably the format can be converted (by automated systems) into other formats. There have been dozens of ebook file formats in ebook stores and publishers’ repositories over the years. Today, there are only three worth learning about: PDF, EPUB, MOBI (which is the same as PRC). PDFWe all know PDF as a format for sharing static pages. If you embed fonts (the common default), what you create is exactly what your reader will see. PDF is directly analogous to the printed page. This makes it a nice, safe choice for designers. And it’s easy to create with existing tools (like InDesign, Acrobat Pro, Word and OpenOffice).PDF is actually a package for various file format, which gives it its power. It stores both vector and bitmap images, can embed subsets of fonts, contains XML metadata, and can contain flash video and interactive forms that communicate with a remote server. It’s far more powerful than most people realise. Produced well (for instance, tagged behind the scenes with structural information about the document), PDF can even be reflowed by some PDF readers (the text broken out of its paged format and flowed into the available screen area). And it can be easily navigated by reading software for the visually impaired. All these reasons should make it perfect for ebooks.But it has a downside: it’s too easy, and therefore common, to produce PDFs that are badly created. From a technical point of view, they can be comprehended by humans, but not by machines, rendering them useless to software that tries to navigate or reflow them. So once something’s in PDF, it usually requires a part-manual process to convert it into anything else.Not all ereading software opens PDF files, and those that can do so badly or only partly (e.g. they don’t support PDF navigation).EPUBIf you haven’t already, you really need to take a look at an EPUB ebook to get a feel for what it is. (A simple, free example is EBW’s ebook edition of John Siracusa’s article, ‘The Once and Future Ebook’.) You’ll need EPUB-reading software to open it. On whatever device you’re using, just search for ‘EPUB reader’ and you’ll find many options; just pick the most popular or highly rated for now.Over time, you’re going to have to use several apps to see how different ebooks look in each one. This will be important for testing your ebooks before releasing them.EPUB has been the fastest-growing format, and the one I’ll talk most about here. It’s an open standard developed by volunteer members of the International Digital Publishing Forum (IDPF). It’s young (officially published in 2007), so it has its technical teething issues, but on the whole it’s simple enough to (eventually) be easy to create, while being sophisticated enough to contain a wide variety of information, including embedded video and SVG (a format for storing vector artwork).Essentially, EPUB is just a website in a .zip folder. If you took a static website’s files (HTML, CSS and images) and put them in a .zip file, you’d have something much like an EPUB file. EPUB has a few extra features (like the file that creates clickable navigation), but in essence that’s all an EPUB is: web pages in a .zip file. That makes it fairly easy for developers to create software that reads EPUB (because you just adapt existing web-browsing software) and software that saves documents as EPUB. That software is getting better and better (especially InDesign and Sigil, but more on that later). Now, as publishers, we have to learn how to use these new tools. We’re like experienced carpenters learning to work metal for the first time: we have to understand both new tools and new materials.EPUB also has its inherent failings. As anyone who’s designed for the web will know, the downside of having a format that stores its content much like a website is that it has all the downsides of website design and development: that is, massive inconsistency in the quality of the product and the software that reads and renders it.MobiMOBI (also called PRC) is Amazon’s main format for ebooks distributed on Amazon Kindle. The format was originally developed by Mobipocket, an ebook retailer that Amazon acquired in 2005. If you’re publishing an ebook to the Kindle (e.g. through Amazon’s Digital Text Platform), you can upload a MOBI file confident that the Kindle will display it largely as you intended.MOBI is actually based on the same predecessor formats as EPUB. So MOBI and EPUB are very similar. This makes it very easy to convert between MOBI and EPUB. For converting the best tool is the free, open-source Calibre.Digital Rights Management (DRM)Digital Rights Management is the bugbear of the content industries, from film to music to publishing. It makes for great speculative discussions, so find out more if you like a good fight at your next publishing conference.All you need to know right now is that DRM is any technical measure that restricts what you can do with a file. Usually, DRM stops you from copying or printing an ebook – it’s the publisher’s or retailer’s attempt to slow piracy. It’s like putting the ebook in a lockbox. Amazon and Apple have their own DRM schemes, and almost everyone else uses Adobe’s. Ebooks locked by an Adobe Content Server can only be opened in software that supports Adobe DRM (such as Adobe Digital Editions), and only when that application has been registered with your Adobe username and password.Note that while EPUB is an open file format, once it’s wrapped in DRM it essentially becomes proprietary (since the DRM component is proprietary). This causes a lot of confusion among publishers and consumers. People tend to associate ‘open’ with free (as in speech, and sometimes as in beer), and companies that use EPUB like to trumpet that they’re using an open standard. But as soon as they apply DRM to an EPUB file, there is nothing open about the file at all. For instance, in order to make software that opened Adobe-DRMed ebooks, you have to pay Adobe a huge licence fee: EPUB or PDF locked with Adobe DRM is effectively proprietary.Is that a problem? Well, no one knows for sure, there just isn’t enough data comparing the value and effect of DRMed ebooks with DRM-free ebooks. The obvious downsides of proprietary formats are that: they are controlled by one organisation, which leaves technical progress at that organisation’s discretion, and licence fees to read the format can usually only be paid by bigger companies, slowing the broader development of devices and software that support it. Some would argue that the money to be made from proprietary formats enables or drives innovation and/or consumer adoption. You decide!"
});
index.addDoc({
    id: 8,
    title: "Designing for Digital: An intro to HTML and CSS code",
    content: "An intro to HTML and CSS code Content, form and functionAll of your work in digital will involve this key principle: in digital documents, we always separate content from its appearance. Content is your text and raw images (usually stored in HTML). Form is how that content should appear to humans (usually controlled by CSS). We connect content from its appearance by defining its function. Function is what that content is meant to do: explain, signpost, attract attention, provide peripheral info.For people new to ebooks, the biggest shock is usually this: you cannot determine or control the appearance of an ebook as you can with print. You don’t decide what your reader will see. You just provide your design preferences, and hope that your reader’s software and their display choices won’t make a mess of it. Beyond that, your job is to structure the content really well, so that no matter how it looks, it can be read easily in the widest possible number of applications.I can hear the typographers crying. Why and how has this happened? Hundreds of years of typography for nothing? Not quite, there are good reasons for the way things are right now, and they’re all really just the Internet’s teething problems. But to understand what’s going on, you have to know about HTML and CSS.When you read anything on a computer (or mobile phone or ereader), you’re reading your software’s human-readable representation of machine-readable information. Here’s an example: Only-machine-readable information: 0110100001101001 Human-readable representation: Hi Human and machine-readable: <html>Hi</html> This example does make some assumptions: Information Assumption 0110100001101001 The computer knows you’re using the ascii standard for encoding characters. Hi The human knows you’re speaking English. <html>Hi</html> The computer has HTML-capable software installed, and the human knows what HTML looks like. Those assumptions are very, very important. They define the standards we’re using. With our assumptions/standards in place, the trick to making ebooks is to combine machine-readable information and human-readable information in one, well-crafted package.Print-centric book design involves working with very little machine-readable information. Or rather, the tools we use hide the machine-only stuff from us. For instance, when you apply an InDesign style to a paragraph, all that really matters for print is that, on your screen, you get an appearance that is consistent and appealing to human beings. But behind the scenes, in the depths of your computer, InDesign is marking that paragraph with technical information that will give the right instructions about appearance to any future machine that opens your file.Ebooks-making tools don’t hide as much of the machine stuff from us (the latest versions of InDesign do try). This is because the standards for ebooks are still settling, and the software can’t hide what it can’t completely standardise.So, if you’re going to be ebook-aware in your work, you need to know what’s happening to your machine-readable information behind the scenes. That starts with learning a little HTML.HTML is human sentences marked with tags about those sentences. There is a standard list of possible tags, and the computer needs those tags to know what’s going on in the document. Adding a tag to content is called ‘marking up’. So HTML is a ‘markup’ language.Many publishers have been using tagging for human typesetters for years. For instance, they might have this in an edited manuscript:[A head]Carving wooden animals [box]Here you’ll learn how to carve wooden animals.[end box] The tags are in square brackets, and the typesetter is meant to use them as a guide when applying the design spec, and remove them from the text as they work through it.That is exactly what a computer does with HTML.Let’s do that for our wooden animals example:<html> <h1> Carving wooden animals </h1> <div class=''note''> <p> You’ll need a chisel for this chapter. </p> </div> </html> That may suddenly look a lot more complicated. But just take it step by step:The tag <html> tells a machine that this is an HTML document. So the computer knows to follow the rules of HTML when reading it. The tag with the slash </html> says where the HTML document ends. If a web browser sees that document, it knows what to do with it: display the content as a web page.I’ve now got a heading tagged <h1> (for heading-level 1).My note text I’ve put in a <div>, for ‘division’. Since a div can be used to mark off any section of text, I have to say what kind of div this is. So I’ve put this div in a class I’ve called note. I can make up my own class names, and I think ‘note’ describes this feature’s function well. A class is an attribute that I use to describe to an element for the computer, like a <p> or a <h1> element, much like an adjective describes an attribute of a noun.The sentence inside the <div> is a paragraph. So I mark it up with a <p> tag.Note how I’ve indented the lines to show how some elements are nested inside others (like the paragraph is nested inside the note div). This makes the structure easier for humans to grasp.Structure is also important for computers. In addition to its standard list of tags, HTML has rules about structure. For instance, you can’t put a paragraph inside a heading, like this:<h1> <p> This paragraph shouldn’t be inside heading tags. It’s invalid HTML. </p> </h1> A heading like <h1> is completely different from a paragraph <p>. This invalid HTML would just break an ebook.Now, with the markup in place, the machine can finds its way around the document. It knows the document is written in HTML. It knows where the heading, note, and paragraph go. The information about a document is called metadata – data about data. Metadata has always been a key part of publishing. For instance, the title of book is metadata about the book; library catalogue cards are good examples of old-school metadata.Computers need metadata to automate things, and digital publishing is all about automation. In digital publishing, in addition to creating catalogue metadata about titles, author names and prices, we’re now creating metadata – in the form of markup tags – about every paragraph or even specific words.In a very small, very simplified nutshell, that’s HTML. Yes, sure it gets more complicated, but the point is this: work systematically, and anyone can recognise and pick their way through HTML, and make changes to a document if necessary.You may have noticed, though, that while the computer knows what each element is, we’ve provided no information about how it must look. What font size? What colours? Where on the page? It needs a design spec, a stylesheet. To be specific, cascading style sheets, or CSS.So what’s CSS? CSS stands for ‘cascading style sheet’.We all know what a stylesheet is in publishing: it’s a list of elements or features (headings, paragraph types, page elements, and so on) describing how each one should look. For instance, first-level headings: green, 20 point, Helvetica. Body text: black, 12 point, Caslon. And so on. CSS is a formal way of writing style information for a computer to read.CSS code looks different to HTML, since it’s a separate language with its own syntax. Here’s an example of a CSS file that styles our HTML. As you will see, it’s pretty intuitive. After the tag name, you put the style info in curly brackets:h1 { font-family: Helvetica, Arial, sans-serif; font-size: 20px; color: grey; } p { font-family: Georgia, Sylfaen, serif; font-size: 12px; color: black; line-height: 130%; } Note that I’ve included some font choices for the machine to choose from, in order of preference. And, in the case of h1 for example, if the computer doesn’t have my first two choices installed, any sans-serif font will have to do.On the computer, the HTML (content) and the CSS (design) are separate. To change content, you only edit the HTML files. To change design, you only edit the CSS. Most websites and ebooks will have one CSS file, and many HTML files, usually one for each chapter. So to change the design of a feature, you just change the CSS file, and the change automatically applies through all the book’s chapters.There are many things you can do with CSS. There are some great examples of creative uses of CSS for online ebooks at ePub Zen Garden. At ePub Zen Garden, the same content is made to look radically different just by referring the computer to a different CSS file.(I’m not going to go into why cascading style sheets, ‘cascade’. But you can look it up if you’re curious.) What are XML and XHTML?You will have heard the term XML before – most people are confused about what it is. XML is the family of computer languages that includes HTML. XML stands for ‘extensible markup language’, and HTML stands for ‘hypertext markup language’. You’ll see why in a moment.Let’s take a step back first. You know now that, in HTML, content is marked up with tags in angle brackets. And there is a specific list of tags we can use in HTML, like <h1> for a first-level heading and <p> for a paragraph. HTML was designed specifically for the web, and ‘hypertext’ is just a geeky word for text on the web, much like ‘hyperlink’. Hyperlinks are part of hypertext.There are many other kinds of markup languages, too, in addition to HTML. For instance, MathML is specifically for marking up mathematics. MARCXML is specifically for marking up bibliographic information about books, mostly for library catalogues. They almost all use specific tags in angle brackets to mark up information.All of these markup languages are kinds of XML – extensions of it. That’s why XML is ‘extensible’, it can easily be extended for different uses.You may also hear the term ‘XHTML’. Many ebooks contain XHTML rather than HTML. XHTML, which stands for ‘extensible hypertext markup language’, is essentially just a stricter variant of HTML.* By stricter I mean that if the XHTML code contains a mistake, it can just break the whole document. In other words, you can bend the rules of HTML and your ebook will still open in most ereaders, albeit with glitches. But you can’t break rules in XHTML. Then why even use it? Well, its strictness ensures that your ebooks will work better on more devices, because it forces you to follow the standards properly.* A note for purists: I’ve simplified the story of XML, HTML and XHTML here; the full story is a bit more complicated."
});
index.addDoc({
    id: 9,
    title: "Designing for Digital: Converting books to ebooks",
    content: "Converting books to ebooks First-step: decisionsIn an ideal world, turning books into ebooks would be as simple as clicking “Save as…” in any good text-layout software. It will be one day, but right now it’s not (not even in InDesign, though it gets better with each version). This is partly because the industry is young, so the tools haven’t been developed fully yet. But more than that, it’s because you (and your clients or bosses) have to make some decisions about the nature of the ebooks you’re creating. Each ebook can be a little different.Let’s go through some of those decisions.Is design and layout (including typography, colours, and the exact placement of images) important for understanding the content? Yes: Just create a PDF ebook. You’ll lose the ability to sell it on Kindle and iBooks, but using any other format will be a real headache. PDF files are much easier to make in-house than EPUB or MOBI files. No: Create an EPUB file. You’ll have more flexibility in the long run, and can distribute easily through more important stores (like Kindle) now. Do you want DRM? Yes: Are you sure? Okay. Building your own DM software is too expensive, and you don’t want your customers to have to install special software to open your books, because most won’t and those that do will hate you for it. So use the industry standard Adobe Content Server (ACS). You could install your own ACS for about $5000 a year and a lot of technical heartache, but it’s easier to just use a distributor that includes Adobe DRM in their offering. No: Super, your life will be much simpler, and your customers happier. If you positively want not to have DRM, you must make that clear to your distributors who mostly use DRM by default. How big can the ebook file be, considering your market? (Think about bandwidth and the devices they’ll use to read it.) Small: If you need customers to read the ebook offline on mobile phones and older ereaders, you need to keep the ebook under, say, 2MB. A novel in EPUB is often around 1MB, about half of which is the cover image. Keep it this small if your users are in low-bandwidth areas (most of Africa, especially outside major cities). The device-restrictions on size sometimes apply to specific components of the ebook, such as images or video inside the ebook. Medium: If you have colour images in your book, you might get away with 3 to 10MB, which customers will download in several minutes, depending on their bandwidth and their location relative to the download server. Smartphones (not basic phones) might handle this. Some ereaders and all computers will. Large: Anything over 10MB (lots of images or video and audio) may start to push customers’ patience or slow their software down. But if you’re offering a great product, they’ll wait for this. Anything over 20 to 25MB is only going to work on computers and very powerful smartphones. How much linking and interactivity does your market expect, and how much time can you spend on providing that? Value: If your product is a reference book, it’s a good idea to spend time making sure links are clickable. And perhaps not just links but references to or pictures of things like famous people (e.g. to their websites or Wikipedia pages) or places (e.g. to a location on Google Maps). Assume you’ll spend about three minutes creating every link; a hundred links then takes about five hours. Waste: Ebooks can suck a lot of your time and money for little return. Keep it simple. Some publishers produce ‘enhanced editions’ of some their books, where words in the text link to related websites. These link are often just boring and distracting! Must this ebook be read offline, or is it only online content? Online: Here, users must be connected to the Internet to access the content. Making some or all of an ebook available only while online is a great way to restrict illegal copying and gather user data. But content that requires an internet connection (e.g. Sesame Workshops’ content or any DRM that requires an internet connection every time you open the ebook) is not, in my opinion, an ebook: it’s a website behind a paywall, filled with book-like content. Which is fine, if your customers always have a good Internet connection. Offline: Well, that’s what ebooks are, really: downloadable (i.e. save-me-to-read-offline-later) packages of book-like content. Is accessibility for the visually impaired important? Yes: If you’re making a PDF ebook, make sure it’s a ’tagged PDF’. That will help users with speech-emulating software to navigate the book. If you make a well-structured EPUB, that’s already pretty accessible, though DRM can muck it up. No: Seriously? See ‘Yes’ above. What systems or services will you use to distribute this ebook? (Different ones can handle different kinds of files.) Some examples: Amazon Kindle: By far the biggest ebook retailer around. You can upload a wide variety of formats (even MS Word) and Kindle will automatically convert them to Amazon’s PRC or MOBI formats. But check the conversions carefully, because automated conversions are often buggy. iBooks: Apple’s ebook store for iPad and iPhone only sells EPUBs. Scribd: Known as the “YouTube of books”, you can upload PDFs to Scribd for people to see for free. You can make parts of the book visible to the public (e.g. free excerpts), and embed a Scribd book viewer on your own website. Depending where you’re based, you can sometimes sell your ebook in PDF or EPUB format. Issuu: Similar to Scribd, but aimed more at the magazine market. Only for free content (e.g. excerpts), you can’t sell here. Wattpad: Aimed at authors and self-publishers sharing their work for free. Fine for excerpts, for example. It’s main advantage is its usability on mobile phones, and large following among younger people. You can upload plain text, MS Word or EPUB files. Smashwords: Intended mainly for self and small-scale publishers, Smashwords has one main advantage: upload a Word file, and Smashwords automatically converts into several other formats, and gets your ebook listed on “Barnes & Noble, Sony, Apple iPad iBookstore, Kobo and the Diesel eBook Store, and to all major smartphone platforms via app providers such as Aldiko, Page Foundry, Kobo and Word-Player.” Note, not Kindle. This is perhaps the easiest and most comprehensive free distribution service available. Smashwords is entirely DRM-free. Lightning Source: If you want a free way to sell through many retailers and restrict your books with DRM, Lightning Source is an excellent option. (Plus, if you want print-on-demand distribution, Lightning Source’s true claim to fame, you can manage that through the same interface.) Lightning Source is part of Ingram, a major international book and ebook distributor. Retailers working with Lightning Source (they pay a setup fee to carry the Lightning Source catalogue) automatically sell all the ebooks stored with Lightning Source on their own sites. Lightning Source provides industry-standard Adobe DRM to restrict copying and printing. (Very small publishers are directed to IngramSpark for similar services.) Overdrive: Similar to Lightning Source in operation, Overdrive is an aggregator that makes your ebooks available to a large number of retailers. Overdrive provides the same DRM restrictions as Lightning Source. E-Junkie: E-Junkie is an example of a paid-downloads service. For a small monthly subscription, it’s an easy way to sell any digital (and therefore downloadable) file without having to set up your own website or downloads server, and keep the full retail-price revenue for yourself. You do need to use a major payment-processing service like PayPal or Google Checkout to receive your money. Paperight: Paperight takes your ebook files (PDF or epub) and sells them printed out on-demand in copy shops. The copy shops pay you each time they print a book out for a customer. Facebook: You can sell directly from a Facebook page using a service like Shopify or Shop Tab. A data-asset-management-system (DAMS): Large companies pay for complex, powerful systems for managing their ebooks, and each one has different requirements. Most of these include automated output to various formats, and can even send those formats straight to distributors and retailers for you. Examples are LibreDigital, North Plains’ Telescope Publishing Platform, and codeMantra’s Collection Point, or Publishing Technology’s iPublishCentral and pub2web. DAMS like this range from, say, R30 000 a year to millions a year. They are difficult to research in advance. For details you need to have a conversation with a sales consultant that usually includes an excruciating process of trying to extract prices from someone who first wants to know how deep your pockets are. For big businesses, this process is a necessary evil. Your own website and server: This gives you maximum control, but is the most expensive option to set up, since you’ll incur software-development and design costs. This is fine if you’re a big company and want full control. But you lose out on the good traffic, network effects and search-engine results that existing large platforms generate by their sheer size and popularity. Creating a PDF ebookThis is the simplest ebook to make. It is just a PDF, but with settings applied that make it great for reading on screen. This is most easily done in Adobe Acrobat Pro (you may be able to get by with lesser, cheaper equivalents, like Foxit Phantom), and is more a case of knowing what steps to follow and which settings to choose than having any particular technical skills.First, though, you want to do as much of the work in InDesign as possible, before tweaking the ebook in Adobe Acrobat Pro. Most of these things you should do as part of your design and typesetting process. In InDesign, you’ll create or see to: Bookmarks (mainly using the automatic Table of Contents feature) Hyperlinks (to places on the web and for email addresses) Format and font (if you’re not using the print-edition layout, you might use a squarish page format to better fit a screen, and a larger-than-normal font) Symmetrical margins and centred page numbers (same margins left and right, since an ebook is usually read page by page, not in spreads; unequal margins make the text jump from side to side when scrolling; same for page numbers) Colour (for headings, if you like, or put off-white frames behind your page features in your master pages to avoid a glaring white page) Book metadata (add metadata in InDesign’s File Info dialogue box) PDF export settings (see below). Then, export to PDF, and refine the PDF ebook in Acrobat Pro: Check the PDF bookmarks (the clickable Table of Contents) Add the cover image (as the first page, and add it to the Table of Contents/Bookmarks) Add metadata (in the PDF’s Properties add at least the document title and author) Set the Initial View (“Bookmarks Panel and Page”, “Single page”, “Fit page”, “Show: Document Title”) Finally, check the PDF on various apps and devices to make sure everything is there and works. Check the hyperlinks open the right web pages and email addresses, and that the bookmarks (what Acrobat calls the clickable table of contents) go to the right pages. Check the metadata, too. For instance, many people forget to change or add the PDF ebook’s ISBN, which should be different from the print book’s ISBN. Converting to EPUB using CalibreMuch of the time as a publisher, you want to be able to create lots of ebooks quickly. They don’t need to be works of art, you just need to get the things up for sale. They need to work and to look fine, not spectacular. Importantly, you need to make them cheaply. You could outsource this (e.g. to one of many companies in India that do this), but you’d rather do it in-house.Calibre is a great open-source ebook-management application for converting ebooks from one format to another. Since you can work from a variety of file formats, your editors can do this, not just your designers. If you have a clean, final MS Word file, creating a sellable basic EPUB file can take about 20 minutes, including some testing.In short, to create an ebook file (say, EPUB) in Calibre, you can start with an MS Word document. In Calibre, add it to your Library. Choose the output format (EPUB in this case), and press Convert. You can bulk convert, too, converting lots of different books to ebooks at once.The Calibre user manual includes a thorough explanation of the conversion process and how to tweak it for best results. When you glance through this, you’ll see why you needed to learn about HTML and CSS earlier on.Another open-source ebook program is Sigil. Sigil is a bit more technical, since it requires that you know a bit of HTML and are familiar with the way EPUB files are structured. It’s a WYSIWYG EPUB editor (as opposed to a converter): so you can design your EPUB with simple, click-and-drag type tools. You have to start with an EPUB file, or HTML or plain text. So you could start with Calibre or InDesign to create a basic EPUB, and then refine it in Sigil. Creating EPUB from InDesignThis is probably the best way to produce an ebook. InDesign has been able to export InDesign documents to EPUB since CS3, but only in CS6 has it become fairly reliable. From CS3 and CS4, you have to do a lot of work after export to finish the EPUB (much of this extra work is covered in detail on the Electric Book Works Knowledge Base). In CS5, a few hours work, too. In CS6, you may have to put in an hour or two to polish up the EPUB before it’s ready for proofreading and sale.Here, I’ll just provide an overview. For really detailed guidance, check out Elizabeth Castro’s excellent book EPUB: Straight to the Point, or visit the EBW Knowledge Base.Working in InDesignBefore you start, look through the book you’re about to work on. You are probably going to be changing or making decisions about: how the book’s InDesign files are structured (for instance, you’ll break up long documents into shorter ones, preferably chapters, and gather them in a single InDesign Book) the fonts you use and their colours the spacing before and after paragraph styles how text in frames is threaded master pages images that need anchoring. I’ll cover these issues in more detail later.If you’re definitely only using InDesign to create an EPUB ebook (not a print book), you do NOT need: running headers/footers and page numbers on master pages to specify margins or page size. These two things will be discarded in the export-to-EPUB process. But why limit yourself to ebook only? You might as well set things up for a possible print edition, too.Once you’ve set up your InDesign document properly, you can export to EPUB. Note that in InDesign CS3 and 4 you export to EPUB using “Export to Digital Editions…” (Adobe used to refer to EPUB as “Digital Editions”, conflating the EPUB file format with their own EPUB-reading software Adobe Digital Editions.)Note: I’m assuming for the most part here that you’re using InDesign CS4 or later. If you’re using CS3, the EPUB export is very buggy, and you’ll need to do a lot more to the EPUB files after export in order to create working EPUBs, let alone good-looking ones.After exporting to EPUBAfter you’ve created a basic EPUB from InDesign, there’s more to do to make a polished, sellable EPUB. Depending on the version of InDesign you’re using and how you’ve created your files, you may need to: extract the contents of the EPUB file add a cover add all fonts to the manifest make images resizable check the order of book parts add page breaks, remove span-related spaces, fix non-breaking spaces correct the titles of the chapters (especially capitalization) check that the Table of Contents works add metadata edit CSS embed video/audio files if necessary optionally (especially CS3): replace head tags with structured HTML head tags zip the contents of the EPUB up again (in the right order). And you’ll definitely need to test the EPUB thoroughly during and after this process. In the end, you must get a human being to at least glance at every page: just because it’s digital doesn’t mean it’s quick and easy!To do all this you’ll almost always have to work with the EPUB’s code at some stage."
});
index.addDoc({
    id: 10,
    title: "Designing for Digital: Practical typesetting for print and digital",
    content: "Practical typesetting for print and digital By now, you’ve worked through a lot of information, much of it new and technical. Well done even getting this far. Now we’re really getting to the nitty gritty of making books that work for print and digital. It makes a huge difference if your existing way of designing and typesetting follows rules that make for easy ebook conversion. So I’m going to work through some practical design and typesetting issues that make conversion to ebook formats easier and more reliable, particularly for EPUB. For instance, you don’t want to discover, when it’s too late, that a text box you create on page 150 doesn’t appear in your ebook, or that your ebook won’t open on a Sony Reader because of the way you’ve set up your InDesign documents. So, the practical suggestions here are meant as best practice whether you’re designing and typesetting for print or for digital. Just make them part of how you work. And one more thing: the key here is discipline. The guides here are worth very little if, from time to time, you let your guard down and get sloppy. Maybe you forget to add metadata to the File Info, or unconsciously use local formatting in a section of a book – you’ll understand soon why those things can let you down. Now that you’re creating books that computers must understand, being disciplined about how you structure and process content is critically important. Computers, alas, are unforgiving automatons. Text flowThere are two rules of thumb for managing text flow: Set each chapter in a separate document, and gather them in an InDesign Book. Inside an EPUB, each chapter will then be in a separate HTML file. This means the software only has to open one chapter at a time, making your EPUB open more quickly and read more smoothly. (Old Sony Readers can’t even open an HTML file that’s bigger than 300K.) This also creates a nice page-break effect in the final EPUB, without having to add a page-break tag to the code. Thread (join together) all your text frames in one story flow. If you have any text boxes floating in your document, not threaded into the main story flow, after export that text will appear right at the end of your EPUB. (If you must have floating text boxes, anchor them, and give them their own paragraph style. This can make it easier to fix the threading problem after export later on. InDesign CS6 tries to get around this by detecting where boxes fall on the page, but it can be unreliable.) ImagesLike floating text boxes, any image that isn’t anchored won’t appear next to the relevant text after exporting to EPUB. (Again, CS6 will try to detect their position.) So, anchor all your images.Unfortunately, an anchored frame can’t contain other frames, so you can’t anchor an image and a caption in the same anchored object. To add a caption, you’re going to need to work on the actual the HTML code (for instance, using Sigil).Finally, if you have very large images in your book, you may need to resize them, because some devices can’t display images larger than 10MB. (From InDesign CS4 you can choose to have InDesign automatically resize your images when you export to EPUB, which saves you the hassle. Just make sure all images export as JPG, and not GIF or on auto – the GIFs lose too much image quality.) FontsFonts in ebooks are tricky. To display text in a given font, the device that opens it must have access to the font files. So if you want a reader to see your text in a specific font, you have to actually include the font files in the ebook. This is called embedding the font.When you make PDFs, most PDF software (like InDesign by default) will embed the font files inside the PDF. That’s why fonts usually look fine when you open PDFs from someone else, even though you don’t have their fonts installed on your computer – the font files you need are inside the PDF. But importantly, by default the PDF only includes a subset of the font’s characters; just those characters the file needs. So if the letter ‘q’ is not used anywhere in the document, the font file for ‘q’ might not be included in the PDF.This is very useful for two reasons: one, it makes the PDF smaller than if the entire font was embedded. Two, it means that when you send a PDF to someone, you’re not sending them the full font files, which could be a violation of the font’s owner’s copyright.So PDF is easy, but EPUB is harder: you cannot embed a subset of a font in an EPUB. You either include the whole font or nothing. If you include the whole font in the EPUB file, you may be violating the font owner’s copyright. If you include nothing, the reader won’t see the fonts you intended. Their device will just pick another font they do have installed already.There is another problem: even if you do embed a font, many ebook readers will simply ignore it anyway, and display the text in its own font instead. Why? First, its software developers might not have had the time to include code that reads fonts. Second, it’s likely that software developers (e.g. Amazon and Apple) know that many publishers create ebooks badly, including using ugly fonts, and they don’t want their customers having a bad, inconsistent experience. Companies like Amazon and Apple need their customers to have a consistently elegant experience, even if it means overriding some good designs. In 2014 Amazon Kindle started allowing Kindle users to manually switch to seeing the publisher’s font, rather than the Kindle default.So, in the end, I recommend not embedding fonts in EPUBs. The defaults in good ereading apps like Kindle and iBooks are fine.However, if you have really good reasons for embedding a font, here are some guidelines.Try to use font files in OpenType format. Many TrueType fonts can work, but OpenType is usually more reliable.As I explained earlier, when you include a font in an EPUB file, you’re including the entire font file. So, technically, you’re redistributing the font. For most fonts, this is illegal. InDesign offers to encrypt fonts (also called font mangling) to get around this, but that encryption can cause technical problems with your EPUB, and is best avoided.So, use open-licensed fonts, such as those from the Open Fonts Library. Or use Google Fonts, which are all open-licensed. You may redistribute open-licensed fonts, so embedding them in an EPUB is not illegal. Good options for text fonts are Linux Libertine and Gentium.InDesign CS3 quirksIn InDesign CS3, a specific font weight or style (bold, italic, light, etc.) only survives the export to EPUB if you create a special character style for it that specifies both the weight/style and the font family. So you must create a separate character style (i.e. bold, italic, underlined) for each font family you apply these styles to. You can’t use a generic ‘bold’ style and apply it to different fonts. CS4 and later are much more forgiving, but actually it’s good practice anyway to do this, because it makes for better, more flexible CSS code in your ebook in the end. StylesGood designers always use paragraph and character styles to format text, and never local formatting. That is, they never highlight a word and click the ‘Italic’ button on the toolbar. They’d create a character style, perhaps called ‘emphasis’, highlight the word, and apply that style to it. This is best practice for all formatting, because you’re then controlling all formatting in a book from one place: your styles list.But even good designers name their styles badly. What is a bad style name? A bad style name is any name that describes the style’s appearance. A good style name described the style’s purpose, or function. For instance, it’s bad to name a heading style ‘blue-head’. ‘Blue’ is how it looks, now its function. It’s function might be to start all the quiz sections. In that case, a better style name might be ‘quiz-head’.Why? Well in your print book the heading might be green, but on a grayscale ereader screen it will appear dark grey. And on a computer, blue is usually used only for clickable links, and you don’t want to confuse people with something that looks like a link. So you might use CSS to make the quiz-heads pink, for instance.Remember how we said you must always separate content and appearance? This is an instance of applying that principle: Function: ‘this paragraph is an item in an unordered list’. Appearance: font, size, colour, line-height, margins, etc. So, always name your styles by their function not their appearance. For example, use ‘chapter-title’ for your main level of heading, not ‘large-bold’.When you export your InDesign book to EPUB, your style names will become part of the tags in the HTML code. Remember how we used a class attribute to define a <div> as a ‘note’ in our HTML example earlier? Your style names in InDesign will be the class names in your EPUB’s HTML. That is very important to remember!Another important implication of this is that you should always make your style names lower-case, and never use spaces or special characters.So, a paragraph styled with a style called ‘note’ in InDesign will look like this in your EPUB’s HTML:<p class=''note''> Your note text goes here. </p> Technically, InDesign is categorising that paragraph with a class that uses the style name you chose: ‘note’. In the CSS InDesign creates for you, it will define the appearance of that class of paragraph much like this:p.note { font-family: “Helvetica”; font-size: 10pt; } (When creating CSS, InDesign tries to create CSS styles that follow the appearance of your InDesign styles, but the result won’t be exactly the same as the text on your printed page.) Local formattingIn InDesign CS3, only defined styles (paragraph styles, character styles and object styles) are exported to EPUB; all local formatting is discarded when you export to EPUB.This means that if you want a single word or phrase in bold type, you need to create a character style (e.g. ‘strong-text’), and apply this character style to all of the text that you need to be bold. If you then decide that you want some of those words bold and italic, you must create a second style to apply to those words to be turned bold and italic (e.g. ‘strong-emphasis-text’).In InDesign CS4, you get to choose when exporting to EPUB whether to keep your local formatting or use your defined styles instead. However, you shouldn’t use local formatting for your styles anyway. Local formatting in the resulting EPUB makes a mess of your HTML and CSS code, which then makes it far harder to change and manage text and formatting in the EPUB later on. So, avoid any local formatting, and only use styles to control the appearance of text. Pagination and master pagesPDF ebooks have pages like print books. But reflowable formats, like EPUB and MOBI, have no fixed pages as such. So there is no pagination. So when you export an InDesign file to EPUB, it will ignore: text on master pages, including headers, footers, page numbers, margins or page size. So don’t put any important content, necessary for understanding the book, on a master page. SpacingNever use empty lines or empty paragraphs to create space in your books. They will get ignored in the HTML of your ebook, and paragraphs you’ve separated with space will lose that space. Rather, use your styles to add spacing before and after paragraph styles, especially headings and blockquotes.You may need to search your document for empty paragraphs by searching for two ‘End of paragraph’ marks, and solve each instance using the paragraph style’s before-and-after spacing. You may need to create a few new paragraph styles for this to work (e.g. a block quote of three paragraphs would need three separate paragraph styles: a ‘blockquote-first’ with space above, ‘blockquote-next’ with an indented first line, and a ‘blockquote-last’ style with space after.)A tip: If you want to risk a global search-and-replace, you can’t just remove all paragraph marks, or you’d end up with one long paragraph! So first change all instances of two ‘End of paragraph’ marks with a totally unusual sequence of special characters, like %\^@. Then replace all instance of %\^@ with one paragraph mark. This can be a bad idea, though. For instance, in many novels the author may have typed an extra line space to create a break between sections, and you don’t want to lose those. They should be individually managed by applying a style to the first paragraph in the new section that has extra Space Above. Text alignmentIt’s best not to use justified text in ebooks. On very small screens this causes big spaces between words, especially if text ever wraps around images. Rather use Left (ragged right), Right (ragged left), or Centered. Background coloursI once tried to create an off-white ebook page, much like a paper book might be printed on creme paper. I don’t recommend spending time on this, it’s almost always wasted. Page colour is now often determined by the ebook-reading device software for different contexts (e.g. dim or reversed out for low-light situations). Sometimes users (like myself) even choose to read their ebooks as white text on a black background, completely subverting the designer’s intentions! Tables of contentsMost setters create tables of contents manually, typing in page numbers by hand, and updating them manually when they change. Many don’t know that InDesign lets you create a table of contents automatically. There are a couple of good reasons why it’s worth learning how, even though setting up styles for an automated table of contents can be a lot of work.The two good reasons are: an automatic table of contents tell InDesign which paragraphs in your book are headings it helps InDesign create your EPUB’s clickable navigation. InDesign needs to know which of your paragraph styles are headings, and which are text paragraphs, because when exporting to EPUB, in the code your paragraphs need <p> tags and headings each need one of <h1>, <h2>, <h3>, <h4>, <h5> or <h6> tags. There’s no real way for InDesign to tell the difference between <p> and the six hs from your styles alone – the table of contents does that.InDesign needs you to use its ‘Insert Table of Contents’ feature to signal which paragraph styles are headings, and which level of heading they represent. In the EPUB code, InDesign will then tag those paragraphs you include in your table of contents as HTML headings (<h1> etc.), not as <p> paragraphs.Why is this important? Well, some ereading software will not read your CSS file at all, or only in part, and will instead impose its own CSS based on standard HTML tags. That means it ignores your classes, and won’t show the fonts, colours, weights and so on that you’ve so carefully defined. So if in your HTML both your headings and your regular paragraphs are tagged as <p>, such software will not distinguish between them, no matter what classes they’re in, and your headings will look like regular text.Note: If you export to EPUB from CS3, you have to change the tags in the EPUB code manually. If you use CS4 or later, create an automatic Table of Contents style in your InDesign document, where you include your heading levels in the Table of Contents.Importantly, creating an automatic table of contents in your InDesign document also gets you a table of contents in your exported EPUB file, which ereaders display as a clickable list. So always create one, even if you don’t include it on any page in the for-print document. You can just put it on the pasteboard, off page. It doesn’t even need page numbers. It just needs to list all the headings you want in your EPUB’s clickable table of contents.Some tips: When creating the Table of Contents in InDesign, create the TOC style and save it. You can then import the same TOC style into other InDesign documents with similar style names, saving you time later on. If you’re working in an InDesign Book, create the Table of Contents in your style-source document. This is not necessarily the first document in your Book. When exporting to EPUB, InDesign will ignore any tables of contents created in other documents in the Book. Avoid special characters in headings. For technical reasons (related to character-encoding), they can occasionally upset the EPUB code (the .ncx file) and break your table of contents and your ebook. (If your table of contents seems to get cut off early in your EPUB, check for special characters in the code.) CoversMost setters create separate files for the cover of a book and its interior. There are good reasons for this: a cover document that includes a spine and back cover is a completely different size from interior pages, and is often created by a separate designer anyway.However, if there isn’t a front cover in your InDesign file, InDesign can’t add it to the EPUB, right? You have to add it manually to the EPUB after exporting from InDesign, using an EPUB editing program like Sigil. If you do this, keep the image almost, but just below, 1000 pixels on its longest side – that’s best for most ereaders.There is another option: in your InDesign Book, include a one-page document that contains only the front cover. You might call it ‘front-cover.indd’, for instance. Make it the first document in the Book. When you export to EPUB, include it in the export. When you export to PDF for printing, don’t include it. Remember that adding a single page to the start of your Book will by default make the first interior page of your book a left-hand page, which you don’t want. You’ll have to set up your Book to keep the first interior page a right-hand page. MetadataSome basic information about the book must be included in the EPUB file itself. Some information is mandatory: the title the creator (usually the author) a unique identifier of some sort (such as an ISBN or UUID; InDesign generates a UUID for you when you export to EPUB). a date of publication or creation. InDesign can add this metadata for you if you enter it in the InDesign document’s File Info (Info > File information). In InDesign CS3, this has been known to cause problems with the EPUB code, but it’s still a good idea to include at least the title and author in the File Information, since that’s the minimum that an EPUB needs in order to be a valid EPUB.InDesign CS4 and 5 don’t let you add the publication date to the EPUB, which is required by the EPUB specification. You may need to add the pub date metadata by hand in the EPUB code, or using an editor like Sigil or Calibre’s metadata-editing tools. Embedding multimediaHere’s an irony: in the early days (around 2006 to 2010) embedding multimedia like soundtracks and video was surprisingly easy to do. Usually, it involved including a Flash video in your EPUB. Then Apple brought out the iPad and decided it would not support Flash. This effectively made putting Flash in EPUBs a waste of time. And as a result, there’s currently no easy way to embed video or music in an EPUB. No matter how you do it, only a handful of applications will be able to open and play it, and that’s just not good enough.So I suggest placing video or audio on a media-sharing site (like YouTube, Vimeo, or Soundcloud), embed it on your own branded site if you like, and then simply link to it from the ebook. This does mean readers will have to be online to get the video or audio, and be on a device that opens web pages (i.e. not an e-ink reader), but it’s the simplest, cheapest way to link to video or audio. Getting inside the EPUBYou can edit almost anything in an EPUB using the free, open-source editor Sigil, though you do need to know (or be willing to learn) a bit about EPUB structure, HTML and CSS.If you want or need to really get your hands dirty and open up an EPUB yourself, just change the .epub file extension to .zip, and unzip the file. Easy as that. Zipping it up again is not entirely straightforward. Most importantly, the order in which files go back into the zip archive is important (mimetype file first!). See the EBW Knowledge Base for details. Checking ebooksMany people think that ebook conversions are quick and reliable. Sadly, creating ebooks presents many opportunities for gremlins to creep in. Check ebooks thoroughly before releasing them. A human being must at least glance over every page, click on most or all of the links, and open it on a variety of devices."
});
index.addDoc({
    id: 11,
    title: "Designing for Digital: Further reading",
    content: "Further reading Check out the EBW Knowledge Base for detailed info on creating EPUB files from InDesign, as well as lots of other digital-publishing guidance."
});
index.addDoc({
    id: 12,
    title: "Designing for Digital: Feedback",
    content: "Feedback I need to know what’s good, bad and ugly in this book so that I can make it better. What were the most useful parts for you? Please let me know. You can send me feedback at arthur@electricbookworks.com."
});
index.addDoc({
    id: 13,
    title: "InDesign best practice for print and ebooks: Cover",
    content: ""
});
index.addDoc({
    id: 14,
    title: "InDesign best practice for print and ebooks: Title page",
    content: "InDesign best practice for print and ebooks Training notes for book designers and editors Arthur Attwell"
});
index.addDoc({
    id: 15,
    title: "InDesign best practice for print and ebooks: Copyright",
    content: "InDesign best practice for print and ebooks First published by Electric Book Works as pages on the EBW Knowledge Base Revised 13 October 2014 © Arthur Attwell 2014 All text is licensed under a Creative Commons Attribution-ShareAlike licence (see creativecommons.org/licenses/by-sa/4.0/). Attribution — You must attribute the work in the manner specified by the author or licensor (but not in any way that suggests that they endorse you or your use of the work). Share Alike — If you alter, transform, or build upon this work, you may distribute the resulting work only under the same or similar license to this one. For information or further permissions, contact Electric Book Works, electricbookworks.com."
});
index.addDoc({
    id: 16,
    title: "InDesign best practice for print and ebooks: Contents",
    content: "Contents Title page Copyright Agenda Dealing with frames Fonts Thinking ahead about styles and tag names Design considerations The table of contents Metadata The cover Exporting to epub Tips Feedback"
});
index.addDoc({
    id: 17,
    title: "InDesign best practice for print and ebooks: Agenda",
    content: "Course outline These guidelines are for designing and typesetting with epub export and conversion in mind. They are also good design and typesetting practice even if you’re not sure you’re going to be exporting or converting to epub. We’ll cover: Dealing with frames Fonts Thinking ahead about styles and tag names Design considerations The table of contents Metadata The cover Exporting to epub Tips You’ll find much of these, plus updates and comments, on the Electric Book Works Knowledge Base at electricbookworks.com/kb. If you really want to understand why and how to best use InDesign, you should also get to grips with epub code. For that, check out EBW’s notes on Making ebooks with Sigil, HTML and CSS."
});
index.addDoc({
    id: 18,
    title: "InDesign best practice for print and ebooks: Dealing with frames",
    content: "Dealing with frames The guidelines here are for designing and typesetting with epub export/conversion in mind. They are also good design and typesetting practice even if you’re not sure you’re going to be exporting or converting to epub. One story flowThere are two rules of thumb for managing text flow: Set each chapter in a separate document, and gather them in an InDesign Book. (Inside an epub, each chapter will then be in a separate XHTML file. This means the software only has to open one chapter at a time, making your epub open more quickly and read more smoothly. Some software, like some Sony Readers, can’t even open an XHTML file that’s bigger than 300K.) This also creates a nice page-break effect in the final epub, without having to add a page-break tag to the code. Thread (join together) all your text frames in one story flow. If you have any text boxes floating in your document, not threaded into the main story flow, after export that text will appear right at the end of your epub. (If you must have floating text boxes, anchor them, and give them their own paragraph style. This can make it easier to fix the threading problem after export later on.) Note: You can break rule 1 for very short books if you really want to work in one document only, not in a Book. You can add page-break tags to your XHTML code and CSS file between chapters or sections. Pagination and master pagesPDF ebooks have pages like print. But reflowable formats, like epub, have no fixed pages as such. So there is no pagination. When you export an InDesign file to epub, it will pretty much ignore: running headers/footers and page numbers on master pages, and margins or page size. So don’t put any important content on a master page.Also, if you have to override master page items on your pages, but you don’t want them in your epub, here is some useful advice on a workaround in CS4. Images and objectsWhere possible, anchor your images. Like floating text boxes, any image that isn’t anchored might not appear next to the relevant text after export to epub. Up to CS4, unless anchored, images and objects will be placed pretty arbitrarily in the ePub (usually at the end in random order). From CS5, InDesign tries to guess where an image should go by its placement on the page – but you might not want to trust it.Adobe gives this advice for anchoring images: Anchor each image to its own paragraph. To ensure that an image appears between paragraphs in the EPUB file, it must be anchored to its own paragraph by inserting an extra paragraph return and anchoring the image to that paragraph. You can then apply a paragraph style to the paragraph to further control the image’s position. For example, to center an image and create some space above and below it in the EPUB file, you center-align the paragraph and apply space before and after it. Note: Since text wrap settings are discarded in the EPUB file, you must use the InDesign Space Before and Space After options to add extra space above or below an image. You may have to work with the images after export anyway.Also, images you’ve created using drawing tools in InDesign won’t work. You’ll have to save these as image files (e.g. jpg or Adobe Illustrator) and place them back in the InDesign document as anchored images.Unfortunately, an anchored frame can’t contain other frames, so you can’t anchor an image and a caption in the same anchored object. To add a caption, you’re going to need to get at the XHTML code. (We won’t go into that code here, but if you every need it, let us know; it can be done.)Finally, if you have very large images in your book, you may need to resize them, because some devices can’t display images larger than 10MB. (In InDesign CS4 you can choose to have InDesign automatically resize your images when you export to epub, which saves you the hassle.)"
});
index.addDoc({
    id: 19,
    title: "InDesign best practice for print and ebooks: Fonts",
    content: "Fonts Font file formatChoosing good fonts for ebooks is often a process of trial and error. Try to use only fonts stored in OpenType format. Many TrueType fonts can work, but OpenType is usually more reliable (especially in the long term, because the Opentype file format is newer and more sophisticated). Font licensesWhen you include a font in an epub file, you’re including the entire font file. So, technically, you’re redistributing the font (unlike in PDF, where only a subset of the font is embedded in the file). For most fonts, this is illegal.So, use open-licensed fonts, such as those from the Open Fonts Library. Their licences do not restrict distributing the fonts in the epub file. For instance, fonts that carry an SIL Open Font Licence can be freely redistributed.The trick is finding an open font with the quality of, say, a Garamond Pro. Good options for text fonts are Linux Libertine, Gentium and Droid Serif. Google Fonts is perhaps the biggest library of open-licensed fonts. There are some lovely fonts with open licences at the League of Movable Type. There are several excellent open-licensed fonts on FontSquirrel. Though be sure the font has an open licence that allows you to redistribute it, sometimes this isn’t absolutely clear. ‘Reuse’ is not the same as ‘redistribute’. OpenType vs open-licensed Don’t confuse Opentype, a file format, with an open-license, the legal statement of what you can do with a font. They have nothing to do with each other. A note on small capsSmall caps must be carefully managed in an InDesign file if you don’t want epub headaches later. See the EBW Knowledge Base article on small caps for more information. Embedding fontsAll fonts that are used should be embedded, including styled versions of fonts (i.e. bold or italic). In order to embed:The font family must be specifically named in a character/paragraph style The style must be applied somewhere in the document (unused styles will not be embedded) In InDesign CS3, a specific font weight or style (bold, italic, light, etc.) only survives the export to epub if you create a special character style for it that specifies both the weight/style and the font family. So you must create a separate character style (i.e. bold, italic, underlined) for each font family you apply these styles to. You can’t use a generic “bold” style and apply it to different fonts. CS4 has a workaround (exporting to epub using local formatting rather than styles), but it’s unreliable and creates messy code in your epub, so it’s infinitely better to use style consistently.Note: InDesign tries to encrypt (“mangle”) embedded fonts so that you can use proprietary fonts without infringing their licenses. However, we’ve found that Adobe’s encryption method can make epubs invalid (that is, they don’t meet the requirements of the official specification, and as a result some ereading software may not open them or display them properly). So we recommend not embedding fonts in InDesign, and rather embedding open-licensed fonts by editing the epub code by hand after export. This is really for technically minded folk, though we do provide step-by-step instructions in our EBW Knowledge Base."
});
index.addDoc({
    id: 20,
    title: "InDesign best practice for print and ebooks: Thinking ahead about styles and tag names",
    content: "Thinking ahead about styles and tag names When exporting to epub, InDesign uses your style names as part of the tags in the ebook’s XHTML code. Specifically, as class names. This means it is very important to use paragraph and character style names that describe the purpose or function of the given style, not its appearance (since appearance might change on screen). This will also make it easier for those who work on the book after you to understand how your book works. If your style name for first-level headings is head_a, InDesign will tag those headings like this: <p class=''head_a''> Your heading </p> Since CS4, if you’ve correctly used a Table of Contents, InDesign will give every heading (if included in the saved TOC style used when you export to epub) a heading tag, e.g. <h1>, <h2> etc., with a class named for your style name. For instance: <h1 class=''head_a''> Your heading </h1> InDesign versions From CS6, you can add or override class names for any style in the Export Tags. CS3 doesn’t add heading tags, only <p> tags for everything, and you have to change the tags manually in the epub after export. Local formattingIn InDesign CS3, only defined styles (paragraph styles, character styles and object styles) are exported to epub; all local formatting is discarded when you export to epub.This means that if you want a single word or phrase in bold type, you need to create a character style (e.g. bold_text), and apply this character style to all of the text that you need to be bold. If you then decided that you want some of those words bold and italic, then you must create a second style to apply to those words to be turned bold and italic.From InDesign CS4, you get to choose when exporting to epub whether to keep your local formatting or use defined styles instead. We recommend not using local formatting for your styles, because exporting local formatting to epub makes a mess of your XHTML and CSS code, which then makes it far harder to change and manage text and formatting in the epub. So, it’s still always strongly recommended to avoid any local formatting, and to only use styles for the appearance of text. Empty linesNever use empty lines or empty paragraphs to create space in your books (line spaces created by typing paragraph marks). They will just get ignored in the XHTML of your ebook, so they are effectively lost in the epub. Instead, use styles to add spacing before and after paragraph styles, especially headings and blockquotes.Search for empty paragraph marks by searching for two ‘End of paragraph’ marks, and solve each instance using the paragraph style’s before-and-after spacing. You may need to create a few new paragraph styles for this to work (e.g. a block quote of three paragraphs would need three separate paragraph styles: a blockquote_first with space above, blockquote_next with an indented first line, and a blockquote_last style with space after.)"
});
index.addDoc({
    id: 21,
    title: "InDesign best practice for print and ebooks: Design considerations",
    content: "Design considerations If after InDesign you’re working on the design of your epub – that is, on the CSS – here are some things to keep in mind from the start. Assume you control only structureIt’s entirely possible that your user’s ereader ignore all styling instructions. That means that it will have only your HTML to go on. If your HTMl is really well structured, the book will probably read just fine. So: be very strict and consistent with headings, and never rely on formatting for sense, only for aesthetics. Text alignmentIt’s best not to use justified text. On very small screens this causes big spaces between words, especially if text ever wraps around images. Rather use any of Left (ragged right), Right (ragged left), or Centered alignment.Note: Some intelligent ereading systems will override your settings either way, to provide a good-looking, easy-reading experience for the reader. But not all ereading systems are intelligent, so you should take the lousiest common denominator into account! Background coloursWe’ve had mixed results trying to create an off-white ebook page. We don’t recommend doing this, though. It’s almost always wasted time, and page colour is now often determined by the ebook-reading device software for difference contexts (e.g. dim or reversed out for low-light situations).If background colour is really important to you, the best place to change that is in the CSS file of the epub itself (more about editing CSS later), by adding a background colour to the body section. Small capsSmall caps can wreak havoc with compatibility between InDesign’s print output and what you get in an ereader.The golden rule is that in InDesign, you should never lowercase your proper nouns in your text just to get small caps from a font that can’t do Opentype All Small Caps (that is, don’t change ‘the Lord said’ to ‘the lord said’). If small caps don’t work in your epub, you’ll end up with actual lowercase.If you’re going to need small caps, we highly recommend reading the ‘Small caps’ article on the EBW Knowledge Base so that you’re equipped to make an informed decision. Superscripts and subscriptsSuperscripts and subscripts can be problematic in epubs. The simplest guideline is to use InDesign’s automatic super or sub positioning in a character style. Do not rely on manual baseline shift and font-shrinking."
});
index.addDoc({
    id: 22,
    title: "InDesign best practice for print and ebooks: The table of contents",
    content: "The table of contents Creating an automatic Table of Contents in your InDesign document gets you a Table of Contents in your exported epub file. So always create one, even if you don’t include it on any page in the document. You can just put it on the pasteboard. It doesn’t even need page numbers. It just needs to list all the headings you want in your epub’s clickable Table of Contents. When creating your TOC in InDesign: Create the TOC style and save it. If you’re working in an InDesign Book, create the Table of Contents in your style-source document. This is not necessarily the first document in your Book. Note: If you’re working in InDesign CS4 or later, this is doubly important for another reason: upon export to epub, InDesign will then use proper heading tags for your headings, not just <p> tags, in the XHTML. Make sure you include all levels of heading in your TOC style in order for InDesign to tag them all as XHTML headings, not paragraphs. A TOC on the ‘book page’In a reflowable ebook, you really don’t need a TOC on the actual ‘pages’ of the book, since it’s part of the software’s navigation system. That said, if you really want a TOC on the pages of the ebook, you can follow Adobe’s advice on this: If you have used the InDesign Table of Contents feature to generate a TOC at the beginning of the book, it is discarded in the exported EPUB file. To create a TOC that appears at the start of an eBook, manually insert the text for the entries and then turn each entry into a hyperlink that jumps to a specific section in the eBook. With InDesign CS4, you can use cross-references instead of hyperlinks to create the TOC. When you use cross-references, each TOC entry is generated from its destination text, so if the destination text is modified, you can easily update its corresponding TOC entry with the new text."
});
index.addDoc({
    id: 23,
    title: "InDesign best practice for print and ebooks: Metadata",
    content: "Metadata You can add metadata in the InDesign document (Info > File information). Include at least the title and author in the File Information, since that’s the minimum that an epub needs in order to be a valid epub. If you’re working in an InDesign Book (.indb), InDesign will export the epub’s metadata from the source/master document. For CS4, Adobe provides this guidance: In the Description tab of the File Information dialog box, complete the following fields: Document Title—Enter the title of the publication. Author—Enter the author’s full name. Description—Enter a short description of the publication. Keywords—Enter the keywords that describe the publication’s subject category. Copyright Notice—Enter the copyright information for the publication. The information is displayed in most eBook readers. None of the other metadata fields are exported to an EPUB file. Note: Using InDesign CS3, adding metadata in the InDesign document (Info > File information) has caused problems for us with the resulting epub (usually it doesn’t validate). Rather insert metadata into the epub’s content.opf file after export. Technical note Metadata in an epub should ideally follow Dublin Core formats and guidelines. To add or edit metadata reliably, you can add metadata to the content.opf file in the epub code after export, if you’re technically minded. (You don’t need to be a developer, you just need to keep your wits about you.) Or use an epub editor like Sigil."
});
index.addDoc({
    id: 24,
    title: "InDesign best practice for print and ebooks: The cover",
    content: "The cover We recommend using the same InDesign documents for creating your print PDFs and exporting to epub. This way, you only ever have one master InDesign document, which is good for version control. However, if you choose to have two versions of your InDesign document for any reason, then you can put a cover image in your epub version in InDesign, rather than inserting it later into the epub code. If you choose to do this, read Adobe’s very helpful guide to working with images in InDesign for epub. It includes this advice: The cover for an eBook must be a single image. If your cover design is composed of an assortment of text and image frames within InDesign, the design elements will be linearized in the eBook. To quickly generate a cover image, you can export the cover from InDesign as a JPEG file. Choose File > Export, specify a name for the image, choose JPEG from the Format menu, and then click Save. In the Export JPEG dialog box, specify which page you want exported. For optimum display on different screen sizes and resolutions, specify a resolution of 72 pixels per inch (ppi) and choose Maximum from the Quality menu. Click Export to generate the image. The final image size for the cover should be around 600×800 pixels so that the cover looks good on a variety of eBook readers. If the pixel dimensions of the image are not large enough, export the image at a higher resolution. After your cover image has been created, import it into InDesign. and Manage the cover with a book file. … create a separate InDesign document for the cover image. Then combine the cover document with any other documents that make up your book layout into an InDesign book file (File > New > Book). Obviously make that cover document the first document in your InDesign Book. We prefer to insert our covers into the epub code after export from InDesign. There is advice for inserting covers in epubs on the EBW Knowledge Base."
});
index.addDoc({
    id: 25,
    title: "InDesign best practice for print and ebooks: Exporting to epub",
    content: "Exporting to epub In order to export a full book from InDesign, you must select the export command from the “Book” panel menu, instead of the “File” menu, as it is for documents. Make sure that you have the “Book” panel visible (it automatically pops up whenever you open a book in InDesign). The export tool will only export character/paragraph styles and metadata from one document in the book. This document can be selected from the Book panel menu as the “styling source” document (the little symbol to the left of the document name). Export to Digital Editions? CS3 and CS4 referred to its epub export as ‘Export to Digital Editions’, because at the time Adobe Digital Editions was the dominant epub reader around. Some of the following export options have changed a little or been renamed in different versions of InDesign. They should be a useful guide no matter which version you’re using. General options Add the name of the publisher. For CSS, choose ‘Defined Styles’. for ‘Bullets and Numbers’, choose ‘Map to … Lists’. We avoid Adobe’s font embedding because it creates invalid ePubs. Images optionsChoose Optimized and high quality jpeg. Avoid gif or Automatic, they often create problems. Contents options Select XHTML-based Select Include InDesign TOC entries (see the table of contents section) for more detail) Select ‘Suppress Automatic Entries for Documents’. Keith Fahlgren has written an excellent post on exporting from InDesign. You’ll find it by searching for his name with “Choosing InDesign ePub output options”. CS3 tipIf you’re working in CS3, make sure the ‘bullets to text’ checkbox is ticked when exporting to epub, not ‘map bullets to lists’. TroubleshootingUnfortunately, if your export fails, InDesign’s error messages are not always helpful. Liz Castro found one error caused by having an ampersand in a URL in your InDesign document. (InDesign doesn’t create valid XML for the ampersand in a hyperlink.) On that note, check out Liz’s book, EPUB Straight to the Point.)"
});
index.addDoc({
    id: 26,
    title: "InDesign best practice for print and ebooks: Tips",
    content: "Tips You might not need these, but here are some trial-and-error tips you might, one day, find useful. File sizesIn the early days of ebooks, no exported HTML or XHTML file in an epub could be bigger than 300K when uncompressed (or 100K compressed). As a rule of thumb, this is about 40000 words of a simple novel. Any longer book had to be broken up into smaller documents (e.g. chapters). This rule is no longer critical now that devices and apps are more powerful, but it’s good to keep in mind. If you can follow it, your epub will be much faster, and your user won’t have to wait ages for a chapter to load. MultimediaInDesign CS4 makes claims that it can handle multimedia (without you having to get into the epub code), and we’re testing that. It doesn’t look good, though (it was effectively broken in CS2 when Apple’s Quicktime stopped supporting SWF, and wasn’t yet fixed at the time we wrote this).So we still prefer to embed multimedia by editing epub code by hand. You can find more on embedding multimedia on the EBW Knowledge Base."
});
index.addDoc({
    id: 27,
    title: "InDesign best practice for print and ebooks: Feedback",
    content: "Your feedback Training in a new, fast-changing field is hard, so we really need your honest feedback about this course. You can give very brief answers, though the more you can tell us the the better. You’re welcome to answer anonymously. Give feedback online Given your expectations before the course, did you learn what you wanted to learn? Exactly what I wanted. Mostly what I wanted. Um. A bit of both. Only a little of what I wanted. Not at all what I had in mind. What was the best thing about the course? What about the course most needs to change? Do you have suggestions for how to fix that? We know these courses are expensive. For you, was the expense: worth the investment, too early to tell, or not really worth it? What did you think of the venue? Assuming you had a positive experience, do you have any comments we could use publicly? Feedback forms are a schlep, so thank you, really. Pop in at EBW for thank-you coffee any time. And please do join our mailing list to hear about future courses."
});
index.addDoc({
    id: 28,
    title: "Making ebooks with Sigil, HTML and CSS: Cover",
    content: ""
});
index.addDoc({
    id: 29,
    title: "Making ebooks with Sigil, HTML and CSS: Title page",
    content: "Making ebooks with Sigil, HTML and CSS Training notes for book designers and editors Arthur Attwell"
});
index.addDoc({
    id: 30,
    title: "Making ebooks with Sigil, HTML and CSS: Copyright",
    content: "Making ebooks with Sigil, HTML and CSS First published by Electric Book Works on 4 March 2014 Revised 9 October 2014 © Arthur Attwell 2014 ISBN: 978-1-920218-80-5 All text is licensed under a Creative Commons Attribution-ShareAlike licence (see creativecommons.org/licenses/by-sa/4.0/). Attribution — You must attribute the work in the manner specified by the author or licensor (but not in any way that suggests that they endorse you or your use of the work). Share Alike — If you alter, transform, or build upon this work, you may distribute the resulting work only under the same or similar license to this one. For information or further permissions, contact Electric Book Works, electricbookworks.com."
});
index.addDoc({
    id: 31,
    title: "Making ebooks with Sigil, HTML and CSS: Contents",
    content: "Contents Title page Copyright Agenda HTML, or ‘How to Talk a Machine’s Language’ Stylesheets Working with images Links Metadata Tables of Contents Covers Testing and validation On advanced tricks and bug fixing Your feedback"
});
index.addDoc({
    id: 32,
    title: "Making ebooks with Sigil, HTML and CSS: Agenda",
    content: "Course outline In the course, we cover the following themes in detail, all in the context of using Sigil to create ebooks. An introduction to opening and reading ebooks in ereaders An intro to HTML Matching HTML to parts of books Formatting with CSS Working with images Links (internal and external) Metadata Tables of Contents Covers Testing and validation Advanced tricks and bug fixing Not all of these things are covered in these notes, but you can always read more just by searching online. No matter how many ebooks you make, you’ll always hit snags, and searching online is always the fastest way to find answers. We’ve written about many on the Electric Book Works Knowledge Base at electricbookworks.com/kb. Finally, please give us your feedback after the course. You can use the feedback form in these notes, or just pop us a mail at info@electricbookworks.com."
});
index.addDoc({
    id: 33,
    title: "Making ebooks with Sigil, HTML and CSS: HTML",
    content: "HTML, or ‘How to Talk a Machine’s Language’ HTML actually stands for ‘hypertext markup language’, and you’ll understand why soon. When you make an ebook you are talking to a machine. That is, you’re making a document that a computer will understand. Look at this: Hello, World! What do we humans call this? Words, a sentence, exclamation, line, phrase, paragraph, letters, sign, greeting – we have dozens of names for it, and that’s just if we’re speaking English. To agree on what it is, we need: a language (English) common terms (like the ones I listed above) When we tell a computer what Hello, World! is, we also need a language and common terms. In the ebook world: the language is HTML common terms include ‘paragraph’, ‘string’, and ‘span’. To indicate that common term to a computer, we surround our phrase with special HTML tags. Tags always appear in elbow brackets, like this: <p>Hello World!</p> The <p> is a ‘paragraph’ tag. We use paragraph tags at the start and end of the paragraph, and the slash indicates that the tag is closing the paragraph. These tags are called ‘markup’, because they mark up our text for the computer. ElementsIn HTML terms, a paragraph marked up with <p> tags is an ‘element’. The word ‘element’ would also be useful in traditional book terms for any piece of a book, and for what we often call ‘features’.HTML includes a bunch of standard elements. You’ll get to know them very well, especially these ones: <p> for paragraph <ul> for unordered list (i.e. a bulleted list, but it might not actually have visible bullets) <ol> for ordered list (e.g. a 1, 2, 3 or a, b, c list) <li> for list item, an item in an ordered or unordered list <h1>, <h2>, <h3>, <h4>, <h5>, <h6> for six levels of heading <img> for image <a> for a clickable link (the ‘a’ happens to stand for anchor) <em> for emphasising words (as you might use italics in print) <strong> for making words stand out (as you might use bold in print) <span> for any string of letters you need to mark for any reason (as in, this span <span>spans three words</span>) <div> for division, any block of text or images you need to mark for any reason <table> for a table <tr> for a table row <td> for a table cell in a row (td stands for table data). You must know these elements to make ebooks. There are others that are less important, and you’ll learn about them along the way. ClassesAs you may have guessed, in most books there are several different kinds of paragraph. In addition to plain body text, there are pull quotes, chapter openers, notes and more.In HTML we say there are different classes of paragraph. In theory, there are as many different paragraph classes as you could ever think of. The same goes for any of the elements I listed: lists might be regular bulleted lists, clickable menus, chapter objectives, or glossary entries; images might be portraits, graphs, icons, decorations, or maps; spans might mark computer code, important words, proper names, places, or other special terms; divs might mark sections as sidebars, footnotes, or activities. And much more. We can’t just use <p> for everything, because then every class of paragraph would look the same.So HTML lets us invent our own classes, and gives us a way to say what class an element belongs to. We do this by adding an attribute to the element’s opening tag. Let’s say we want to call our paragraph a ‘greeting’ paragraph:<p class=''greeting''>Hello World!</p>We could have called the class anything we liked:<p class=''frabjous-day''>Hello World!</p>But of course it’s best to use class names that are easy to remember and describe their purpose clearly. Attribute structure An attribute in a tag always takes the same form: the kind of attribute (e.g. class), an equals sign, and the attribute value in quote marks. Another kind of attribute is an ID, which we cover in Links, later.) If you’re sharp, you’ll have noticed that none of these elements or classes describe what the text or image they mark up looks like. They only describe its function or purpose. All appearance or formatting is managed separately, in another file called a stylesheet. We’ll get to that later. IDsElements can have IDs as attributes, too. An ID identifies that particular element uniquely.<p id=''jiminycricket''>This paragraph is the only one about Jiminy Cricket.</p> IDs are especially useful when we want to link to specific elements, like a given paragraph or image. We cover this in the ‘Links’ chapter.In its HTML, this paragraph has an id of bobsyouruncle. We link to it from the Links chapter here. HTML document structureIf you’re using Sigil, you may know already that it lets you view your book in Book View or Code View. In Book View, things look a lot like a word-processor: what you type is what your end-user will see. What You See Is What You Get: WYSIWYG. In Code View, you see all the tags we’ve been talking about. We say that an ereader renders the code in its intended form.Now that you know about tags, we can talk about how they’re structured. Their structure must follow certain rules.An ebook might contain several HTML documents. Every HTML document is a separate text file with at least these four parts: a namespace declaration an <html> element a <head> element a <body> element. Don’t worry about the namespace declaration. Sigil puts it in for you at the top of every file. It’s two or three lines long, and starts with <?xml. This is important info for the computer, but it’s rare that you’ll need to change it or even look at it closely.The <html>, <head> and <body> elements always appear in this structure:<html> <head></head> <body></body> <html> That is, the whole document is wrapped inside the <html> element. And that’s divided into two sections: the <head> element and the <body> element. The <head> contains information for the device about the document. The <body> contains all the content of the document intended for human readers. There is only ever one <html>, one <head> and one <body> element. All the tags we discussed earlier (paragraphs, spans, divs, lists, etc.) go inside the <body> element to make up the document’s content. When you’re editing ebooks, 99 per cent of your time will be spent there, inside the <body> element. XHTMLIf you’re looking around in Sigil, you might have noticed that files in most epubs are in XHTML, not HTML (see the file extensions in the Text folder). XHTML is essentially a stricter form of HTML, but for our purposes, it’s the same thing."
});
index.addDoc({
    id: 34,
    title: "Making ebooks with Sigil, HTML and CSS: Stylesheets",
    content: "Stylesheets In your HTML documents, your job is to mark up text and images according to its function or purpose. Never its appearance. All the appearance work is done in a separate file called a stylesheet. In the stylesheet, for instance, you get to say what a heading marked <h1> looks like: colour, size, font, spacing, and so on. This way, you can change and control the appearance of all the elements in your book in one place, keeping formatting consistent everywhere. We create stylesheets in a language called CSS, for Cascading Style Sheets. (Don’t worry now about how they cascade: that’ll become clear later.) In Sigil, HTML documents are stored in the Text folder of your epub, and CSS documents in the Styles folder. CSS looks different to HTML, because it’s a different language with its own syntax. Let’s say you want to control the appearance of your default paragraphs. In CSS, you’d start by typing: p {} The p refers to the HTML <p> element, obviously. All your formatting instructions will go inside the braces, {}. For instance: p { font-size: 12pt; font-family: serif; } I’ve put each instruction on its own, new, indented line to make it easier for us humans to read – the computer doesn’t mind. It’s the same as writing this: p {font-size: 12pt; font-family: serif;} But when CSS documents get long and complicated, you really want things laid out neatly so that you can edit them easily. Now, what about our classes? Like the ‘greeting’ class we created in <p class=''greeting''>Hello World!</p>? In CSS, we use a full-stop to indicate ‘in class’, like this: p.greeting { color: pink; } Once we’ve added that, our Hello, World! will show in pink in our ebook. (Note the American spelling of color. The same goes for instructions like text-align: center;.) Open this ebook in Sigil and take a look at the CSS file to see a longer, but still very simple stylesheet. Note that you can add comments for humans that the computer will ignore by putting them between /* and */. Linking HTML and CSS filesOnce you’ve created a CSS file, you have to tell your HTML file where to find it. That is, you have to link your HTML to the CSS file.We do this by adding a <link> element inside the <head> section of the HTML document. Let’s say your CSS file is called styles.css. In Sigil, your <link> tag will look like this:<link href=''../Styles/styles.css'' rel=''stylesheet'' type=''text/css'' />This link element contains three attributes: <href=…> (href for ‘hyperlink reference’) says where the stylesheet is, relative to the HTML document (the two full-tops mean ‘go up out of the Text folder’, and the /Styles/styles.css means ‘go into the Styles folder and find the styles.css file); rel=''stylesheet'' says that the file’s relationship to the HTML is that of a stylesheet; type=''text/css'' says that the file will be in plain text and in the CSS language. Note: self-closing tags The link element needs only one tag, because it doesn’t mark up, or surround, any text. So it closes itself with a ‘self-closing slash’ at the end of the tag. Two other common HTML elements that close themselves are the line break <br /> and the image tag <img />. ChallengeHere are several things you might want to do with CSS. Pick one, get onto Google, and take 5 minutes to have a guess how you’d write the CSS: make the background of your whole ebook yellow; put a paragraph in a box; make a paragraph float to one side, with the body text flowing around it; make one word appear in a different font to the surrounding text; make a heading appear in uppercase, without changing the letters to uppercase in your HTML; create a list inside a list (a sub-list); make a numbered list number in roman numerals. Sample stylesheetHere is a sample stylesheet. These are styles used for the on-screen version of these notes. I’ve only included the parts that relate to ebook typography, but you can see the entire file online at electricbookworks.github.io/ebw-training. Open the page, right click to view the page source, and click on the CSS file name.body { font-family: ''Source Sans Pro'', serif; font-size: 1.2em; font-weight: 300; line-height: 140%; } /* Headings */ h1, h2, h3, h4, h5, h6 { font-weight: 600; line-height: 120%; page-break-after: avoid; } h1 { font-size: 3.5em; max-width: 80%; line-height: 100%; } h2 { margin: 1.5em 0 0.5em 0; padding-top: 0.5em; } h3 { margin: 1.5em 0 0.5em 0; padding-top: 0.5em; } /* Paragraphs and related */ p, ul, ol, blockquote, dl { max-width: 40em; } p { margin: 0 0 0.5em 0; } li p { /* a paragraph inside a list item */ margin: 0; } /* Blockquotes */ blockquote { margin: 0.5em 0 0.5em 0; padding: 0.5em 1em 0.5em 1em; font-size: 1.5em; line-height: 120%; border-left: 5px solid #ddd; max-width: 20em; } blockquote p { /* a paragraph inside a blockquote */ margin: 0; padding: 0; } li blockquote { /* a list item inside a blockquote */ margin: 1em 0; } /* Definition lists, which I use for side-notes */ dl { color: #666; border: 1px solid grey; padding: 1em; } dt { margin: 0 0 0.25em 0; font-weight: 600; } dd { } /* Tables */ table { border-collapse: collapse; } th, td { border: 1px solid #ccc; padding: 0.5em; } /* Code text */ pre, code { font-family: ''Source Code Pro'', monospace; white-space: pre-wrap; background-color: #f9f9f9; padding: 0.1em 0.3em; border-radius: 0.2em; font-weight: 200; font-size: 0.9em; } /* Links */ a { text-decoration: none; color: #5f738c; } /* * Title page */ .titlepage-title { font-size: 3em; font-weight: 700; margin: 20% 0 0 0; line-height: 100%; } .titlepage-subtitle { font-size: 3em; font-weight: 400; margin: 0 0 1em 0; line-height: 100%; } .titlepage-author { font-size: 1.5em; margin: 0 0 2em 0; } .titlepage-logo { width: 100px; } /* * Copyright page */ .copyright-logo { width: 100px; margin: 1em 0; } /* * Table of contents */ .toc h2 { font-weight: 400; font-size: 1.25em; margin: 1em 0 0.5em 0; } .toc ol { margin: 0; padding: 0; } .toc ul { list-style-type: none; margin: 0 0 1em 0; padding: 0; } .toc li { margin: 0 0 0.5em 0; } .toc a { text-decoration: none; }"
});
index.addDoc({
    id: 35,
    title: "Making ebooks with Sigil, HTML and CSS: Working with images",
    content: "Working with images You are going to want to add or edit images in ebooks often. Luckily, this is very simple. You can just use Sigil’s Insert > Files… menu. But if you want to understand what’s going on in your code, here is the more manual method. To troubleshoot, you’ll need to know this stuff. Add the image fileFirst, add the image to the epub’s Images folder. In Sigil, just right-click the Images folder and select Add Existing Files. Then go find the image on your computer, and Sigil will copy it to that Images folder. Remember, though: remove all spaces from image file names; try to use only lowercase letters in file names (for one thing, Sigil alphabetises file names differently according to the case of the letters); only use jpg or gif images (png is usually also okay); before adding, make sure the images are 72 to 150 dpi, large but not larger than 1000px on their longest side, and saved in RGB colours, not CMYK. Add an image tagNow, head back to your HTML document to add an <img> image tag where the image must appear. Image tags must always include two attributes: src for source, indicating the image file you just added, and alt for alternative text, which appears if the image breaks and is read out loud is reader for the visually impaired. An image tag can also include a title attribute, which provides more info about the image. Many ereaders show the title as a tooltip when a user mouses over the image.Finally, the image tag must self-close with a slash.Here’s an example:<img src=''../Images/example.jpg'' alt=''Example image'' title=''An example of an image in an ebook'' /> Done! Switch back to book view to check that it’s displaying correctly. Image sizes and stylesImages vary in size and are portrait or landscape or square. So are the screens they appear on. This means you will need to experiment with CSS styling for your images to make sure they display reliably on various screen sizes and orientations. Usually, this means working with max-width and max-height rules in your CSS.Sometimes you’ll need to create a couple of classes for different kinds of images in your book. For instance, little marginal decorations might be in a margin-decor class, while big, important graphics might be in an important-graphic class. Remember to create class names that describe the purpose of a given kind of image, not its appearance. Captions and figuresIf your images have captions, you should have two options: Make the captions paragraphs immediately before or after the image (you can make them <p class=''caption''> to style them); or Use the HTML for a <figure> element. But the second option, using <figure> doesn’t work in Sigil. Still, it’s useful to know about it, in case Sigil allows for it in future, or in the event that you use another epub editor that does allow it.The <figure> element wraps an image and its caption together. This is useful for styling, and also for keeping the image and its caption, marked up with <figcaption>, on the same page. The HTML for a figure looks like this:<figure> <img src=''../Images/myimage.jpg'' alt=''My pretty image'' /> <figcaption>This is a beautiful picture.</figcaption> </figure> But if your ebook files are XHTML (rather than HTML), the <figure> element is not allowed. By default, Sigil uses XHTML, so <figure> doesn’t validate. (And, no, in Sigil you can’t manually change your DOCTYPE (to <!DOCTYPE html>) because Sigil likes to clean your code, and changes it back.) When Sigil supports EPUB3 in future, this won’t be an issue."
});
index.addDoc({
    id: 36,
    title: "Making ebooks with Sigil, HTML and CSS: Links",
    content: "Links A link is clickable text or a clickable image that, when clicked, takes the reader somewhere else. There are two kinds of links in an ebook: internal links, which point to other locations in the ebook; external links, which point to websites. Internal links are most commonly used for cross-references and footnotes. External links for further reading (or watching and listening, as the case may be). External links will almost always open in a separate program, like a web browser or app. For instance, if you’re reading an ebook on a smartphone and click a link to a YouTube video, the video will open either in the phone’s default web browser, or in the YouTube app if it’s installed. In HTML, internal and external links look very similar. First, I’ll explain how they work. Then I’ll show you how to add them really easily in Sigil. External linksLet’s start with a basic external link:<a href=''http://electricbookworks.com''>This link points to EBW's website.</a> As you can see, a link consists of: an anchor tag <a> with one attribute, the href, or hyperlink reference. The opening <a>and closing </a> tags enclose the text that will be clickable in the ebook, like this:This link points to EBW’s website. Internal linksLet’s create an internal link in this document to the ‘Working with images’ chapter. The HTML will look like this:<a href=''3-images.html''>Click here to go to the 'Working with images' chapter.</a> When rendered, this will look like this in the ebook:Click here to go to the ‘Working with images’ chapter.(If you’re reading this as an ebook, this will work as an internal link. It might not work if you’re reading this elsewhere. Note you’ll have to scroll back here or use the Table of Contents to get back to this chapter.)As you can see, jumping to the start of another HTML file is easy, you just use the file name as the href value, e.g. href=''filename.xhtml''.But what if we want to jump to a specific point in a chapter? For instance, to a specific element like a paragraph or heading or image? We have to mark that destination element somehow, so that we can point an href to it.We do this by giving the element an ID. This is easy to do: make up an ID name (it must be unique in that HTML file), use no spaces, avoid capital letters, and don’t start with a number, and include it as an attribute in the element’s opening tag, like this: <p id=''bobsyouruncle''> Then, when we make our link, we use that ID as the href, joined to the file name with a hash sign:<a href=''1-html.html#bobsyouruncle''>Click here to go to the specific paragraph I'm linking to.</a> I’ve planted an ID in another chapter to demo this. Click here to go there. You’ll find a link there, too, to get back here with.If you’re linking to another place in the same HTML document, you don’t even need the file name. You could just use a hash sign with the id:<a href=''#another-id''>This goes to a point in this same HTML doc.</a> So link paths are relative to the file they’re in. Clickable imagesIt can be really useful to make an image clickable. To do this, you just wrap the <a> element around the <img> element, like this:<a href=''somewhere.xhtml''> <img src=''bob.jpg'' alt=''Uncle Bob'' /> </a> However, some ereaders, including some versions of Adobe Digital Editions, don’t support clickable images, which is annoying. So use them, but don’t rely on them to work 100 per cent, every time. Adding links with SigilSigil can create the link code for you. Whew! Highlight the text you want to make clickable. Go to Insert > Link…. If you’re creating an internal link, pick a target from the list. Sigil lists all the HTML files and IDs in the book. If you’re creating an external link, paste the full URL in the Target field. Click ‘OK’ If you’re linking internally, and the element you want to link to isn’t in the Targets in the Book list, you need to give that element an ID before linking to it. To do this: go to the element you’re linking to, and highlight it; go to Insert > ID…; make up an ID (no spaces, don’t start with a number, and avoid uppercase letters); click ‘OK’. Now that element’s ID will be listed in the Targets in the Book list when you insert a link."
});
index.addDoc({
    id: 37,
    title: "Making ebooks with Sigil, HTML and CSS: Metadata",
    content: "Metadata Metadata is information about information. For instance, your driver’s licence is metadata about you. Epub ebooks must store some information about themselves so that machines know how to deal with them. You have to provide some of this metadata. Some metadata applies to the epub as a whole, some to specific files, and some even to specific elements inside files. Technical note Book-level and document-level metadata is actually stored in a special file called content.opf. Sigil will let you edit that file directly (just double-click it on the left), but editing it directly is not a good idea. You do not want to break something. Rather use Sigil’s metadata editing tools. Book-level metadataJust to be a valid epub, epub-level metadata must include: an identifier (like an ISBN) the publisher’s name a date of publication or creation. It’s also best practice to include: the title an author. To add this metadata in Sigil, just go to Tools > Metadata Editor. Document-level metadataIn your epub you’ll have a bunch of HTML files, and each will likely correspond to a part of a book: cover, title page, copyright page, preface, and so on. If an ereader knows which HTML file represents each book part, it can do useful things. For instance, the first time you open an ebook, most good ereaders will jump you straight to the first chapter, skipping all the frontmatter. That’s if it knows which HTML file is the first chapter.Sigil lets us set this information as document-level metadata. Just right-click each HTML file and go to Add Semantics… then tick the book-part that corresponds to that chapter.Only one file can correspond to each book part. And the most important semantic tag is the one Sigil calls ‘Text’. That’s the file that ereaders will jump to on first opening a new ebook.In addition to adding semantics for HTML files, you must also add semantics for the cover image, usually cover.jpg, in your Images folder. Right-click the image file and select Add Semantics > Cover Image. This tells ereaders to use that image in its Library display, which is very important to users. Element-level metadataIt’s rare that you’d deliberately add metadata to elements within files, such as specific paragraphs or phrases, because you really don’t have time or a clear need for it. But do keep in mind that it’s possible, so that you can experiment with possibilities. For instance, imagine if you were creating a travel guide, and you marked up each phone number – for guest houses, museums, restaurants – like this:<span itemprop=''telephone''>+27 21 671 1278</span> Ereaders could use this tagging to recognise phone numbers and let you dial them from your smartphone with a single click.If you’re curious about the possibilities, read up online about ‘microdata’."
});
index.addDoc({
    id: 38,
    title: "Making ebooks with Sigil, HTML and CSS: Tables of contents",
    content: "Tables of Contents In an ebook, the table of contents can take two forms: a ‘Contents’ page among the book’s opening pages, as in a print book; a navigation list displayed by the ereading software (e.g. a menu in a slide-out panel or navigation screen). It’s optional whether to include a ‘Contents’ page. I generally avoid it, because it’s extra work and an ereader’s navigation menu is usually easier to use while reading. If you do create one, it’s essentially a list of headings in the book, each hyperlinked to the relevant point in the book. The navigation list, however, is mandatory. You store this list in a special file listing links to chapter or other headings in the book. Each ereader displays this table-of-contents list in a different way: for instance, as a navigation bar, a slide-out panel, a menu list, and so on. At this point, the way we create the navigation list depends on whether we’re creating epubs according to the EPUB2 or EPUB3 spec. Right now, Sigil only supports EPUB2. So we’ll start there. EPUB2 tables of contentsIn EPUB2, you store the navigation list in a toc.ncx file (toc for Table of Contents, of course). You can see this file in Sigil, but you do not want to edit it yourself. The syntax is a real headache. Let Sigil code the toc.ncx file for you: use Tools > Table Of Contents > Generate Table Of Contents… to create and edit it.Note that Sigil generates the TOC by collating all heading elements, from <h1> to <h6>. You can edit this manually in the TOC editor, but try to keep edits to a minimum. Ideally your heading levels should be so well-constructed that editing isn’t necessary. EPUB3 table of contentsIn EPUB3 you store the navigation list in a dedicated XHTML file with any name you like. It’s common to call it nav.xhtml, and to refer to it as the toc nav. You can then choose whether or not to include this XHTML file as content in your book – that is, as a ‘Contents’ page among the book’s opening pages. (Technically speaking, the file is always listed in the OPF manifest, but only included in the spine if it must appear in the book content.)We aren’t going to go into detail about how to create that file here, since we’re focusing on EPUB2 with Sigil. But you can read up about it online if you’re curious. Technical note: EPUB3 with EPUB2 fallback The EPUB3 specification allows for an epub to include a toc.ncx file as a fallback for ereaders that don’t support EPUB3’s EPUB Navigation Document. Hopefully, when Sigil becomes EPUB3 capable, it’ll provide this fallback automatically. Further reading: EPUB 3 Best PracticesIf you want a great reference book, go get EPUB 3 Best Practices from O’Reilly Media."
});
index.addDoc({
    id: 39,
    title: "Making ebooks with Sigil, HTML and CSS: Covers",
    content: "Covers There are many ways to create a cover in an epub ebook. You could just place an image in the first HTML file in the epub. But we generally get better-looking results with some very specific code. Prepare the imageGet the front cover as a jpg image, name it cover.jpg, and add it to the Images folder of your epub.To tell ereaders that it’s the cover image, right-click it, select Add Semantics, and tick Cover Image. (Some ereaders won’t display the cover in their library view unless you do this.) Create the cover HTMLNext, add a new HTML document to your Text folder, and click-and-drag it so that it’s the first HTML file in the list. Name the file ‘cover.xhtml’.Now, in the Code View of that file, replace the <head> and <body> elements with this code:<head> <title>Cover</title> <link rel=''stylesheet'' type=''text/css'' href=''../Styles/styles.css'' /> </head\> <body class=''cover''> <p class=''cover''> <img class=''cover'' alt=''Cover'' src=''../Images/cover.jpg'' /> </p> </body> Change the name of the CSS file here if yours isn’t called styles.css. Add the cover to CSSFinally, add this code to your CSS file:\* Styles for cover.xhtml \* body.cover { margin: 0; padding: 0; text-align: center; } p.cover { margin: 0; padding: 0; text-align: center; } img.cover { height: 100%; margin: 0; padding: 0; } That should do the trick on most good ereaders. Like every piece cover code I’ve found, it won’t work perfectly everywhere.You can find more technical detail about covers on the EBW Knowledge Base."
});
index.addDoc({
    id: 40,
    title: "Making ebooks with Sigil, HTML and CSS: Testing and validation",
    content: "Testing and validation Ebooks should be thoroughly checked, sometimes even proofread, just like print books. There are two parts to checking ebooks: validating the code, and checking the ebook on ereaders. Validating the codeSigil includes a useful validation tool that checks the technical correctness (validity) of your epub file. (It’s called ‘FlightCrew’.) Go to Tools > Validate EPUB with FlightCrew or hit the green tick button. If there are technical errors, Sigil will give you a list of them, and you can click on the items in the list to jump to the problem. Checking on ereadersAlways, always test on a few different ereaders, and scroll through the whole book for a visual check. We recommend that you try to test on: a good reading app on a tablet and/or phone like iBooks, Google Play Books, Aldiko; a web-based reader like Google Play Books or Ibis Reader, or in Firefox using the EpubReader addon; Adobe Digital Editions on a computer (ADE has lots of problems, but it’s still the biggest computer-screen ereader next to Kindle); an e-ink reader (e.g. Sony, COOL-ER, BeBook, etc.). These tests should include a device with a small screen (less than, say, 5” diagonal; this can detect various formatting problems) and one with a large screen (above, say, 19”; this can detect low-res covers and missing page breaks).A range of options like this will usually also include a device with an Adobe engine (i.e. one based on the Adobe Reader Mobile SDK, such as Sony Readers and B&N Nook), and a device with a WebKit engine (e.g. Ibis Reader, iBooks)."
});
index.addDoc({
    id: 41,
    title: "Making ebooks with Sigil, HTML and CSS: On advanced tricks and bug fixing",
    content: "On advanced tricks and bug fixing In this course we rarely get to talk through advanced tricks and serious bug fixing. Those are things you’re going to have to tackle when they arise. Things that’ll come up at some stage: Mathematical notation: this is a real headache. usually, the only solution is to include images for every instance of maths. Sub-titles: note that <h2> can’t be used as a sub-title to <h1>, because <h2> is a second-level of heading in the hierarchy, and signals the start of a new sub-section. Sub-titles usually have to be paragraphs with a special class, like p.h1-subtitle. Or just run them onto the h1 with a colon, e.g. Chapter 1: We set out early. Transparency in images: gif and png images can have transparent areas. So if you have black line art, do you make your backgrounds white or transparent? On sepia-background ereaders, images with white backgrounds look ugly, but on white-text-on-black ereader settings (aka ‘night mode’), black line art on a transparent background will be invisible. Embedding or linking to video: this is a real headache that you should read more about online. Many other challenges await you. Always search and ask online, because someone out there has probably faced them before. And when you hit on a solution, be sure to share it to help others."
});
index.addDoc({
    id: 42,
    title: "Multi-format editing: Cover",
    content: ""
});
index.addDoc({
    id: 43,
    title: "Multi-format editing: Title page",
    content: "Multi-format editing How to prepare content for life in a multi-format world Arthur Attwell Electric Book Works"
});
index.addDoc({
    id: 44,
    title: "Multi-format editing: Copyright",
    content: "Copyright Multi-format editing Text © Arthur Attwell ISBN (Digital download): 9780000000000 All rights reserved. No part of this book may be reproduced or transmitted in any form or by any electronic or mechanical means, including photocopying and recording, or any other information storage or retrieval system, without written permission from the publisher."
});
index.addDoc({
    id: 45,
    title: "Multi-format editing: Contents",
    content: "Contents Context Change and the living Internet Credibility and scale Formats and reading contexts Viewports on paper and devices UX, UI and user patterns Accessibility Connecting humans and machines Markup Character encoding and unicode Separating content and design Naming design features Document trees Accuracy and consistency Choosing tools Thank you and goodbye, MS Word Choosing editing software, online and offline WYSIWYG versus plain text Constraints versus creativity Content processors and converters Open and proprietary standards and applications Collaboration Team roles Synchronous version control Asynchronous version control Building blocks Chunking: documents, parts, sections, pages Scrolling, pagination and the DPS Reading topography Text Special characters: fonts, unicode glyphs and markup Links and linking (visible links, implicit links, explicit links) Cross references: page numbers and purple numbers Capitalisation (e.g. small caps, and content vs design) Indexing Maths Images Bitmap and vector images Size, resolution and quality Color profiles Text in images Interactive elements Video and audio Slides Questions Data as content Glossaries and bibliographies Directories Search indexes"
});
index.addDoc({
    id: 46,
    title: "Multi-format editing: Context",
    content: "Context Change and the living Internet Credibility and scale Formats and reading contexts Viewports on paper and devices UX, UI and user patterns Accessibility Further reading If you’re publishing anything today, there is always a good reason to publish it in more than one format. In this course, we’ll be talking about publishing books, though pretty much everything here also applies to any kind of publication, including magazines, journals, brochures, papers, and more. For hundreds of years, paper was such a clear winner for cost and convenience in publishing that we rarely even contemplated alternatives. Now paper is just one of the ways that people consume information. ‘Consume information’ is a crude and soulless way to describe the wonder of reading. Perhaps new media have arrived so fast that language hasn’t had time to develop more appropriate phrases. We read on computers, phones, and other ubiquitous screens, as well as all kinds of paper. That really changes things for writers and editors. In this first section, we’ll cover some of that context, and some new forces and concepts that it introduces. Change and the living InternetThe Internet has got so big and complex that understanding it is more like biology than engineering. Creating anything on it – whether a blog post or an ebook – is like launching an origami boat on a great lake. For a while, it will float along just fine on the still water, but at some stage things will change for our little boat.When we publish content in any digital format, it becomes part of that living Internet, where everything changes all of the time.Our job as editors is to do our best to create content that travels and lasts. Luckily, there are many ways to do that. Credibility and scaleBefore we continue, we should quickly put a common misunderstanding to rest. That misunderstanding is about whether reading or publishing on paper or screen is better.For over fifteen years, book-makers like me have been pulled in two directions: you’re a print person or you’re a digital person. This is largely a practical matter: the skills and tools for each have been completely different. Which meant the workflows for creating each format were completely different, as were their distribution channels. In most publishing companies, digital teams are still separated from print-production teams, and often this separation breeds in each team a measure of suspicion and anxiety about the other.So the practical matter of skills has framed the evolution of publishing as ‘print vs digital’, when of course the conversation should be about print and digital. Not just because we’re stuck with a multi-format world whether we like it or not, but because print and digital formats are symbiotic. In ambitious book projects, especially where we want a book to have a social impact, neither can be successful without the other.Print books generate instant credibility. They carry a sense of permanence and authority that digital formats cannot muster.Notice how print books have remained ad-free in an age when every other available surface carries advertising – something about print books has kept them immune from the disease of advertising. Libraries, despite their own digital transformation, still stand revered as churches to printed books. In a Wikipedian world, we’re nostalgic about being able to cite the printed Britannica. And notice how experts only become thought-leaders when they can talk about their latest book, which only means anything if you can buy it in paper.But print does not scale, and it’s locked into a funding model where the end-user pays for every copy.Digital formats, and websites in particular, are the opposite. Web publications struggle to muster the authority of a printed book, but they scale instantly and allow for a range of funding models.Most importantly, they let us shift the costs of development from many end-users to just a few institutions. Books as websites can be public goods in a way that printed books cannot, especially for the poor.So, when a book needs to make an impact, it simply must be in print and digital formats. It cannot have impact without the authority of print. And it cannot have impact without the scale of the web. Formats and reading contextsWhen we work on a book, one of the first things we do is decide who will read it. Ideally, we decide this consciously. If we think carefully, we’ll also imagine the contexts in which people will read our book: at their desk, in bed, on holiday, in the classroom, and so on.Some years ago, the non-profit Perinatal Education Programme asks nurses in South Africa where they found time to read their textbooks. The most common answers were ‘on the bus’ and ‘on the toilet’. That information is now always front-of-mind when the PEP team make publishing decisions.Knowing potential reading contexts can have a significant effect on how we write and edit. Our readers might be standing in queues, sitting on planes, or herding cattle. They may be using big tablets or cheap phones, or even reading a paper print-out from the office.A few years ago, we could write ‘Turn to page 10’ or ‘Write notes at the back of the book’. Today, we have to be aware that ‘pages’ don’t always exist, and that people might not even think of what they’re reading as ‘a book’. Viewports on paper and devicesWhile a paper book might only ever appear as, say, a 6 × 9 inch paperback, an ebook or a website might appear in an infinite number of sizes and aspect ratios, on a dizzying number of screens, each with their own settings. One every screen, font sizes, colours, margins, brightness, line length and more might differ.We have to completely set aside any fixed notion of ‘the page’ or ‘the screen’.A useful concept to use instead is the viewport. The viewport is like a window that opens onto the content. A page is a viewport. The part of a web browser that shows a web page is a viewport. UX, UI and user patternsIn digital publishing, you’ll often hear the terms user experience (UX); user interface (UI) and user patterns. These are very important concepts for editors.‘User experience’ encompasses everything about being a human interacting with a given publication – whether that’s a book, a website, an ebook or an app. (And not just publications; even motor cars deliver a user experience.)The user interface is what the user sees or hears as they encounter the publication. The user interface of a paper book would include its cover design, typography, page numbers and so on. On a website, things like text and buttons and where they lie.User patterns are the habits we form as we use publications – patterns of behaviour. In English, We open paper books on the right, and look for the book’s description on the back cover. Those user patterns are so ingrained that it is very disorienting when a book defies them.Common user patterns on the web include the placement of login buttons on the top right, and that we scroll vertically, not horizontally, through articles.As we write and edit for multiple formats, we need to: be aware that we’re contributing to a user experience, but not in control of it, and know as much as we can about user patterns in different reading contexts. AccessibilityThe most neglected user experiences are those of people with disabilities. If you don’t have full vision, you may use a screen reader to read text aloud; you might set your computer to a large-print, high-contrast display.As you write and edit for multiple-formats, you will find many opportunities to make your content more accessible to people with disabilities. This will include creating text descriptions of images that software can read aloud, and making sure that text isn’t embedded in images where computers can’t read it.It is very easy – even tempting – to cut costs during production by neglecting accessibility features. It’s up to each of us to make ethical choices here when we create content, and to invest a little more in making sure our content is accessible.In digital publishing, the term ‘accessibility’ most often refers to making content accessible to people with disabilities. It’s valuable to extend this to include anyone who might struggle to access content: people who can’t afford data; who have small, cheap phones; who live in rural areas; or who live in oppressive regimes.As you work in digital publishing, you will have more and more opportunities to make accessibility decisions. Further reading Better than Free by Kevin Kelly Ebooks for All: Building digital libraries in Ghana with Worldreader by Craig Mod The Once and Future Ebook by John Siracusa"
});
index.addDoc({
    id: 47,
    title: "Multi-format editing: Connecting humans and machines",
    content: "Connecting humans and machines Markup A five-minute guide to HTML Elements Classes Character encoding and unicode Separating content and design Activity: A group stylesheet experiment Naming design features Document trees Accuracy and consistency Further reading When you’re editing for multi-format publishing, you never want to have to edit the same content again for each new format. You want to work on one, master document, and you expect that machines will convert that document into any number of formats later on. If you’re creating content that a machine will process, we need to write in a way that both humans and machines can understand. This is not easy: humans are flexible and love breaking rules; machines are not flexible, and are made of rules. Luckily, in building the Internet people have come up with all kinds of conventions and techniques for capturing human stories in ways that machines can handle. As editors, we need to learn about those techniques so that machines will do what we want, and not break our work. MarkupAnyone who worked in publishing twenty years ago remembers marking up manuscripts for typesetting: adding feature tags like [start box] and [end box] and inserting instructions for design like [blank page] or [italics]. Today it’s extremely rare for a book to be final at third pages. Later in this course we’ll talk about how the publishing industry lost these skills when MS Word ruined everything, and how we might relearn them. In well-organised teams, we standardised those tags so that typesetting would be fast and hopefully error-free. With a standardised language for manuscript markup in a team, was not unusual for a book to be final at the third round of page proofs.While we were doing that, around the world people were doing the same thing for web pages. Though rather than marking up content for typesetters, they were marking up content for web browsers: machines that would ‘typeset’ on the fly, on screen, on a user’s computer.There were many attempts to create markup languages. The technique that really caught involved wrapping text in angle-bracket tags (like <box>). Your team could create and extend its own markup language for any kind of content. This technique became known as ‘extensible markup language’, or XML for short.There are probably tens of thousands of markup languages created using the XML technique. The most popular by far is HTML, or hypertext markup language. ALmost every web page you visit is delivered to your computer in HTML, and your web browser reads the HTML and ‘typesets’ the page for you automatically.If well constructed, that HTML markup lets browsers lay out the same content differently, but readably, on an infinite number of viewport shapes and sizes, including printable pages.You don’t need to be able to write HTML to be a multi-format editor. You only need to know, more or less, how it works.A five-minute guide to HTMLTo tell a machine that a given string of characters is a paragraph, we use a <p> tag:<p>Hello World!</p>The <p> is a ‘paragraph’ tag. We use paragraph tags at the start and end of the paragraph, and the slash in the second tag indicates that it’s closing the paragraph.A paragraph marked up with <p></p> tags is an ‘element’. The word ‘element’ is also useful in traditional book terms for any piece of a book, for what we often call a feature, like a figure or a blockquote.ElementsHTML includes about a hundren standard elements. In publishing, these are the most important ones: As in everything, HTML gets more complicated than this. There are different kinds of HTML with slightly different tags. As en editor you will almost never have to worry about that. <p> for paragraph <ul> for unordered list (i.e. a bulleted list, but it might not actually have visible bullets) <ol> for ordered list (e.g. a 1, 2, 3 or a, b, c list) <li> for list item, an item in an ordered or unordered list <h1>, <h2>, <h3>, <h4>, <h5>, <h6> for six levels of heading <img> for image <a> for a clickable link (the ‘a’ happens to stand for anchor) <em> for emphasising words (as you might use italics in print) <strong> for making words stand out (as you might use bold in print) <span> for any string of letters you need to mark for any reason (as in, this span <span>spans three words</span>) <div> for division, any block of text or images you need to mark for any reason <table> for a table <tr> for a table row <td> for a table cell in a row (td stands for table data). ClassesAs you may have guessed, in most books there are several different kinds of paragraph. There are, for instance, lead-ins, taglines, epigraphs, dedications, and so on.We can’t have separate elements for all of those. So in HTML we say there are different classes of paragraph. You can just think up classes as you need them. The same goes for any of the elements I listed: lists might be regular bulleted lists, clickable menus, chapter objectives, or glossary entries; images might be portraits, graphs, icons, decorations, or maps; spans might mark computer code, important words, proper names, places, or other special terms; divs might mark sections as sidebars, footnotes, or activities. And much more. We can’t just use <p> for everything, because then every class of paragraph would look the same. If you’re sharp, you’ll have noticed that none of these elements or classes describe what the text or image they mark up looks like. They only describe its function or purpose. All appearance or formatting is managed separately, in another file called a stylesheet. We’ll get to that later. So HTML lets us invent our own classes, and gives us a way to say what class an element belongs to. We do this by adding an attribute to the element’s opening tag. Let’s say we want to call our paragraph a ‘greeting’ paragraph:<p class=''greeting''>Hello World!</p>We could have called the class anything we liked, including something silly:<p class=''frabjous-day''>Hello World!</p>It’s best to use class names that are easy to remember and that describe their purpose clearly. And it’s good to reuse the same classes in your team and across your publications, for consistency. Character encoding and unicodeCharacter encoding is about the most technical thing we’re going to cover.So let’s keep it short: Computers are binary. That is, they only think in on–off, yes–no, 1–0. Humans say ‘ones and zeros’ to describe this. So, to a computer, a letter or number is a pattern of ones and zeros, e.g. 01000001 can represent the letter ‘A’, and 01000010 the letter ‘B’. There are many characters to encode in this way. Over the years, official bodies have established conventions for character sets. The most important character set is called Unicode, which is a list of about 100 000 characters (and growing, especially with emojis). The most common pattern for encoding these Unicode characters in ones and zeros is called UTF-8. In theory, every computer file should state its character encoding inside it, so that your computer knows how to display its characters. (Programs like MS Word should automatically add that data inside your files.) If you open a document, or a web page or ebook, and the characters look wrong, it’s usually because the document and your computer are using different character sets. What does that mean for editors?When we’re working in simple English, this means almost nothing. Just keep going and computers will do the rest.But as soon as you start working with special characters, it’s critical that you use unicode characters.Let’s say you want to insert a degrees symbol, ‘°’. That symbol is not on your keyboard, and you’re not sure ho to insert it. Authors will often insert an o (the lowercase letter ‘oh’), and make it superscript using formatting tools. That is a Very Bad Idea!Let’s say you send the file to someone else, who copies and pastes your 30°C into a different software program. Their program handles superscript differently, or doesn’t support it at all. Now they have an o where you intended a degree symbol: 30oC!This is just one common example. As you work, you’ll find many cases where authors misuse incorrect characters, rather than the correct unicode character.So how do you find the correct character? There are a host of clever software programs for this that you can use or install, but often the simplest technique is to search online for, say, ‘unicode degrees symbol’. That will show you several official unicode pages you can copy and paste from. Separating content and designWe could have started with this, because it’s so important. The fundamental rule in multi-format editing is that we separate content and design.For example, if our book includes an activity, some aspects of the activity belong to its content and some to its design. Content: a heading, instructions, a numbered list of tasks. Design: a surrounding box, a font change from the main text, the instructions in bold, decimal numbers used in the list. In a different context, say on a small phone, we might use a completely different design that saves space and requires less processing power: a background colour rather than a box, the same font, instructions in italic, and whatever numbers are the default on the user’s device.The idea here is that: Content is up to the editor. It is constant (almost all the time). Design is up to the user and their viewport. It is format- and context-based. In multi-format book production, then, we aim to create: One master version of all content. Any number of design stylesheets for different formats and contexts. What does this mean for day-to-day editing? Here are some examples: Be on the lookout for subtle mixing up of content and design. For instance, referring to the colours in a graph is risky: what if that graph appears in a black-and-white book? What if a reader is using a high-contrast display that changes colours? Avoid using design features for semantic purposes. For instance, in a textbook don’t write ‘learn the words in bold’, because in some viewports those words might appear italic, or pink, or highlighted instead. Rather say ‘learn the words emphasised like this’, and tag the phrase in the same way you’d tag a word to learn. Avoid positioning words like ‘above’ and ‘on the right’. Activity: A group stylesheet experiment This is a quick activity to show how stylesheets work. In your group, ask two people to leave the room for five minutes. Ask someone in the room to write their name on a sheet of flipchart paper. Given them a choice of coloured pens. Ask someone else in the room to write down, on a separate piece of paper, instructions for how to recreate the exact design that was just created: the name on the flipchart paper. They are creating a design stylesheet. Hide the original name, and get the first two people back into the room. Give them the design instructions, and ask each of them to follow the instructions. When they’re done, compare their versions with the original. How good was the stylesheet? Naming design featuresWhen you mark up a document, you will have to name the features of your book. For a given book, it’s very important to establish early on what features it will include. For instance, each chapter might have: a list of learning objectives ten activities figures, each with a caption and a number a glossary a bibliography. It is very important to set this list in stone early in a project, and to agree on the exact name you will use for each feature. And that name must describe the purpose of the feature, and not its design. That is, don’t call a feature ‘big red box’ when you should call it ‘key concept’.In the simple list above, that’s easy. But it can get complicated quickly. In a big textbook we worked on, we had to allow for a range of features, each with potential design features. Here is a selection of those features. Element name Design preference Subheadline Should look like second-level heading Great-economists section Box, grey brackground, big heading How-economists-learn section Box, grey background, big heading Videos Embedded in main text on web; thumbnail and URL in margin in print Questions Red background, clickable on web Exercises Red border, sans-serif text, caps heading Figures Any combo of images or tables, caption, reference, source Slideline Clickable ‘filmstrip’ on web, figure with numbered steps in print Displayed maths Space before and after Sidenotes Notes in the margin Footnotes On web, these are popups, in print they are in the margin Definition boxes Popups on web, in margins in print We discovered a short way into the project that team members had different ideas about what these features were called and how they were used. That set editing back severely. Document treesAs you can tell by now, communicating with machines is about keeping things super organised. A well-organised document also has a clear and consistent tree-like structure. For example: Chapter title (h1) Section 1 heading (h2) Subsection 1.1 heading (h3) Info box (h3) Section 2 heading (h2) Subsection 2.1 heading (h3) Info box (h3) Subsection 2.2 heading (h3) As editors, we have to look out for the human tendency to break the tree structure because we’re thinking visually.For instance, our tree structure might require that our book’s info-boxes have a third-level heading. Structurally, they are siblings of our subsections. But we want info-box headings to look less prominent than the subsection headings. We’re tempted to give those boxes a fourth-level heading: Chapter title (h1) Section 1 heading (h2) Subsection 1.1 heading (h3) Info box (h4) Section 2 heading (h2) Subsection 2.1 heading (h3) Info box (h4) Subsection 2.2 heading (h3) But to a computer, and in terms of the tree structure here, those info boxes are now children of subsections 1.1 and 2.1, not siblings.The real solution here is to use h3 as the correct content structure, and to make those info-box headings look less prominent in our design stylesheets.Maintaining a consisten tree structure is harder than it looks in theory. Keep your eyes peeled for broken tree structures in the documents you edit! Accuracy and consistencyThat was a lot to take in. It only remains to highlight what you’ve already noticed: communicating with computers requires absolute accuracy and consistency.As an editor, you’re already the kind of person who loves accuracy and consistency, so you and computers should get along well. They will still test your patience often! Further reading The Machine in Us/ing Us, a video by Michael Wesch about how XML lets humans and machines Person in Lotus Position, a fun podcast from 99 Percent Invisible about adding new characters – and empjis in particular – to the Unicode character set."
});
index.addDoc({
    id: 48,
    title: "Multi-format editing: Choosing tools",
    content: "Choosing tools Thank you and goodbye, MS Word Choosing editing software, online and offline Text-only editing Collaborative editing WYSIWYG versus plain text Constraints versus creativity Open software and standards Open-source software Open standards So far, we’ve covered a lot of big theory. Now we need some tools for putting that to practice. Thank you and goodbye, MS WordThe most important step in multi-format editing is to start using something other than MS Word for editing. Pretty much anything else is an improvement. Good software is designed carefully and deliberately for a specific use. MS Word has not bee designed as much as assembled by committee into an usuable monster of terrying proportions. Choosing editing software, online and offlineThere are two main kinds of editing software to choose from, and you may use each one in different contexts: text-only editors, and collaborative editors. There are also text-only editors that are collaborative! They are rare, though, so it’s generally safe to think of text-only editors and collaborative editors as separate things. Text-only editingFirst, what is text-only editing? Text-only editing is editing in plain-text files. When you do this, you’ll probably be using a particular writing structure called markdown.If you’re online, go to Stackedit.io to write some plain-text markdown. Type on the left, and on the right Stackedit turns your plain text into formatted HTML. On the left, you type plain text in a markdown structure. On the right, you get formatted HTML.What we’re seeing here is the separation of content (which is structured text and image-references only) from formatting and design.What are the big advantages of text-only editing in markdown? Smaller, faster files. Computers need perfect consistency (the digital age is a wonderful place for obsessive copy editors). Here the tools force our hand, and we learn to be less sloppy. Text-only means fewer copy-paste messes (when you copy paste into a new document and the fonts go all weird), because you get only and exactly what you see when you paste: plain text. Less file corruption, because there is simply less going on – less code to go wrong. Better version control, which we’ll talk about later. Text-only editors can be online (used in a browser) or offline. Some of the most powerful text-only editors are actually designed for writing software code, like Sublime Text, Atom, Brackets and Visual Studio Code (which can all be used for free).Collaborative editingCollaborative editing completely changes the way we write, edit and deliver documents.What is collaborative editing? In short, you and someone else can edit the same document at the same time online. The most common tool for this is Google Docs.What are the major pros of collaborative editing? It lets others watch while you work. And you can watch while others work. Publishing is weird because it’s always been a team sport played by lonely freelancers from their own home offices. Collaborative editing instantly makes the team aspect real and useful. You can use commenting for feedback and discussion. Track changes isn’t the same as actual live annotation. No more emailing documents with increasing repetitions of the word ‘final’ in the file name. Instant delivery of work and real-time review. As soon as you’re ready for your colleagues to check something, share the doc and the ball’s in their court. A lot editing is just problem solving, and collaborative editing means the publisher–editor–designer are basically always in the room together at the same time. It’s amazing that Google Docs has been around for years and editors are still editing in MS Word.The one downside of collaborative editors is that you must usually be online to use them. WYSIWYG versus plain textMost collaborative editors, like Google Docs, use a ‘WYSIWYG’ view: What You See Is What You Get. WYSIWYG refers to the fact that if you print your document out or send it someone else, it will look the same as when you created it.The way they do that is by storing the content in code behind the scenes, often in some kind of XML. Most WYSIWYYG editors will not let you see the underlying code: it’s the job of the software to create and maintain that code as you edit. (Some programs do that better than others. MS Word has a notoriously bad underlying code structure, for instance. New software projects like Texture claim to maintain very clean underlying code.)In technical terms, WYSIWYG editors combine content and design in the same file. This is nice for writing, and bad for book production, because we want to separate content and design. By tempting us to add design flourishes as we write, WYSIWYG editors encourage sloppy thinking, and weakly structured documents.For instance, to create a heading, many authors and editors will type the heading text as a paragraph, highlight it, and make it big and bold. But a big, bold paragraph is not a heading.As that document makes its way into production or is processed by machines later on, that heading’s ‘headingness’ might be lost, and the structure of the document will break down. For instance, software that might otherwise create clickable navigation by listing a document’s headings will simply skip that little bold paragraph.There is no good reason to ask authors to change their writing tools. If an author is most comfortable creating their text in MS Word, that’s fine. But as editors we are concierges: it is our job to translate the author’s intentions into a format that machines can understand. In traditional Word–InDesign–PDF workflows, good typesetters act as concierges, translating intended structure into actual document structure. In multi-format editing, there is often no typesetter to do this. So editors now bear this responsibility. Plain-text markdown is one useful way to do this, because markdown forces us to be explicit about things like headings (and blockquotes, italics, links, and more). Alternatively, responsible editors should learn how to use their WYSIWYG editor’s styling functions to ‘tag’ things like headings, so that those elements are correctly marked up in the file’s underlying code. Constraints versus creativityAs you can tell by now, working with new editing tools means navigating new kinds of constraints on your creativity. Picking the right tool can be about deciding what constraints do you want for a given job.For instance, if you’re doing heavy development editing, you want to be in a creative headspace, not thinking about the technicalities of perfect structure and tagging. Working in Google Docs is probably best, especially if you’re collaborating with others.But if you’re doing copy editing or implementing proof corrections, it can be far better to work in a plain-text editor, with a monospace font (where all characters have the same width), so that structure and errors are easier to spot, without the distractions of design and formatting. Open software and standardsWhen choosing your tools, you should also consider: who creates and owns them, and under what terms do they follow common standards, and how much do they cost? Open-source softwareOpen-source software is software that others can copy and modify without permission from their owner.Open-source software has had a bad reputation in the past, because most earl open software was created by volunteers or academics without much investment of money.These days, open-source software is important to all of the biggest technology companies in the world, and open-source products are increasingly the best you’ll find.For organisations, it’s often safest to use good, open tools, because you can’t get locked in with a specific vendor. That said, when evaluating open software, make sure that your choice of tool has a big, strong, happy community behind it. This will mean it will keep getting better, and you’ll be able to find support online easily.Open standardsOpen standards are agreements on how things work. For instance, PDF is an open standard: anyone can read and contribute to the official documents that define how PDFs work, and build PDF software. That was not always the case. The PDF specification was owned by Adobe for many years, and Adobe charged companies to use it. In a surprising and wonderful move, Adobe made the standard open in 2008. It suited them at that point, too, because they were becoming the premier provider of proprietary software for creating PDFs (with InDesign and Acrobat especially). By making the standard open, they made PDF more important, which made it easier to sell their software. It was a win–win. For long-term sustainability, look for tools that follow popular open standards. For instance, an editor that stores text as clean HTML is a far safer choice than an editor that stores text in a clever but obscure flavour of XML.There are standards for almost everything: metadata standards (many of which, like ONIX, are not open), scholarly publishing standards, data standards, textbook standards, accessibility standards, and so on.You’ll never have time to find and understand them all, but before you make choices about editorial tools and processes, make time to learn what big standards exist in your field."
});
index.addDoc({
    id: 49,
    title: "Multi-format editing: Collaboration",
    content: "Collaboration - Team roles - Version control - Synchronous version control - Asynchronous version control"
});
index.addDoc({
    id: 50,
    title: "Multi-format editing: Building blocks",
    content: "Building blocks - Chunking: documents, parts, sections, pages - Scrolling, pagination and the DPS - Reading topography"
});
index.addDoc({
    id: 51,
    title: "Multi-format editing: Text",
    content: "Text - Special characters: fonts, unicode glyphs and markup - Links and linking (visible links, implicit links, explicit links) - Cross references: page numbers and purple numbers - Capitalisation (e.g. small caps, and content vs design) - Indexing - Maths"
});
index.addDoc({
    id: 52,
    title: "Multi-format editing: Images",
    content: "Images - Bitmap and vector images - Size, resolution and quality - Color profiles - Text in images"
});
index.addDoc({
    id: 53,
    title: "Multi-format editing: Interactive elements",
    content: "Interactive elements - Video and audio - Slides - Questions"
});
index.addDoc({
    id: 54,
    title: "Multi-format editing: Data as content",
    content: "Data as content - Glossaries and bibliographies - Directories - Search indexes"
});
index.addDoc({
    id: 55,
    title: "Electric Book Works course notes: About the EBW",
    content: "Introduction Alternative tools At Electric Book Works, we’d been producing books with InDesign for years. InDesign is awesome, but it makes publishing simultaneously to print and digital formats a real pain. No matter how we set things up, we always ended up with separate master files: one for print, one for the ebook, and one for the website. And keeping those in sync over time was almost impossible. We needed a way to instantly create PDF (for high-end, professional book publishing), epub and website editions of a book from a single master source. We needed great version control and cloud backup. We wanted to be able to edit from anywhere, in a way that is easy for non-technical people to learn. And we didn’t want to be locked into any proprietary tools, whose price or availability could change at any time. We needed to use entirely open technologies to ensure our content was future-proof. And we didn’t want to develop any code that others had already developed. We spent several years piecing together a solution, bit by bit. Eventually, we settled on a workflow that is (relatively) simple and powerful: We store a book’s master files in plain text, formatted as markdown. We turn that plain text into clean HTML instantly (using Jekyll). We apply different stylesheets to that HTML to get beautiful web versions, ebooks and print PDFs in minutes (using Sigil and PrinceXML). Everything is stored securely with state-of-the-art version-control (using GitHub and similar services). Markdown is so simple that non-technical people can learn how to create and edit it in under an hour. They can even work directly on the master files online using Prose. Jekyll is great at generating clean HTML in flexible ways, and has a big, active development community and committed project owners. Is also includes kramdown and Sass, which are critical to creating new book designs quickly. While PrinceXML is proprietary software, it’s our favourite implementation of the open standards for CSS Paged Media. Alternative toolsThere are several digital-first book-publishing systems around. Some are also based on markdown, like ours. For example: Quire Gitbook IO Penflip LeanPub (which uses Markua) PubPub MagicBook Phil Schatz’s viewer. PressBooks, which is built on Wordpress, is a superb, affordable service.And if you’re a serious publishing outfit, have a look at O’Reilly Atlas.The Coko Foundation is building Editoria with their new PubSweet framework.For converting HTML/CSS to print PDF, we use PrinceXML, which is proprietary. Other alternatives, which we haven’t tested or don’t yet support all the page-layout features we need, include: Antenna House, a proprietary, mature system WeasyPrint, an open-source PDF engine in active development Vivliostyle, which is partly open-source PDFReactor, a proprietary PDF engine DocRaptor, a cloud-service implementation of PrinceXML."
});
index.addDoc({
    id: 56,
    title: "Electric Book Works course notes: Technical overview",
    content: "Technical overview Dependencies Key structural concepts Folder (repo) structure Using the template Creating a new book Creating book content Set ‘page number one’ File naming The images folder To set up the workflow, you still have to have some technical expertise. Once it’s set up, non-technical editorial team members with a couple of hours training (taught or self-taught) can add and edit books in it. The technical team members who run the workflow need to be familiar with: HTML and CSS: the fundamental building blocks of almost all digital content. Markdown: a simple, plain-text shortcut for creating HTML. (The original Markdown syntax reference is the easiest intro to basic markdown. We use a markdown variant called kramdown. It lets us use attributes like classes, has a stricter syntax, and allows adding of IDs to elements. Sass: a way to create complex CSS from simple rules. Git: software for tracking a team’s changes and syncing them with a remote server. We like to use GitHub. DependenciesTo use the workflow on your own machine, you must have the following software installed: Ruby: the software that reads and runs Ruby code. (We highly recommend installing Ruby with a Ruby version manager like Chocolatey in Windows or Homebrew on Mac.) Bundler: software that manages which version of Jekyll (and other Ruby gems) to apply to a project. Jekyll: software that turns markdown and Sass into HTML and CSS. (To learn about Jekyll, start here. If you’re installing it on Windows, you’ll also need this guide.) From version 0.4.0, our template requires at least Jekyll 3.2. Node.js, which we use for doing things like converting images and optimising Javascript. Gulp: a Node.js package we use for bulk-processing images and Javascript. PhantomJS: a headless browser that we use for rendering MathJax in PDF and for generating search indexes. PrinceXML: software for creating PDFs from HTML and CSS (Prince is the only proprietary tool you’ll need). GraphicsMagick: the software we use for optimising images via Gulp. Git: the software we use for version control. You can see guidelines for installing Jekyll on Windows here, and a guide to setting up on Mac here. Key structural conceptsHere are some of the main technical features of the template and how they work.Folder (repo) structureA workflow folder (often tracked in Git as a repo) usually contains a set of related books. Its folders and files follow the standard Jekyll structure. We then put each book’s content in its own folder. In the template, the first book folder is simply called book.Using the templateThe Electric Book repo (folder) is ready to use for a set of one or more books. In short, to get up and running, see the Quick Start guide.Now, let’s get into some more detail about how it all works. There are several folders and files in the Electric Book template’s root directory.Folders: _app: template files for app output. You shouldn’t ever have to change these. _configs: a folder of configuration settings for different outputs. You’ll rarely have to change these, though you might occasionally need to customise outputs here. _data: a folder of data to use in your books (including project metadata). _docs: this documentation on how to use the template. _epub: template files for epub output. You shouldn’t ever have to change these. _includes: HTML templates that Jekyll uses to build your books. You will rarely change anything here. You may need to add new templates here for custom book features. _layouts: templates that Jekyll uses to structure pages. You shouldn’t ever have to change these. _output: the folder where our output scripts will save your PDFs and epubs. _sass: a folder that stores the default styles for your books. You shouldn’t ever have to change these unless you’re heavily modifying designs for a series. _site: where Jekyll and our output scritps will generate the web and app versions of your books. _tools: utilities required for output. You shouldn’t have to change these. assets: a folder of Javascript, font files and images that your whole project might use. book: a folder for a book’s content, stored in markdown files. You might add more similarly strcutured folders for further books in your project. samples: a sample book for demo and testing purposes. You can safely delete it (if you do, you should also remove its metadata in _data/meta.yml). Files: _config.yml: a file for setting configuration options for Jekyll, which will compile your book for output. There are several other smaller config files you can ignore. They are for changing specific config settings on output. _prose.yml: configuration settings for using prose.io for online book editing (generally, you won’t have to edit this file) and for excluding files from view in the Electric Book Manager. index.md: the home page of your project when served as a website. .bat, .command and .sh scripts for quickly generating books in different formats on various operating systems. There are other files in the root directory that are important to the template. Leave them as is, unless you really know what they are and what you’re doing.Creating a new bookThe process of setting up a new book is covered briefly in our quick-start section. Here is more detail.To create a new book in a new project: The repo (or project folder) can hold one book or many, like a series of books that share similar metadata or features (e.g. they’re all by the same author). Make a copy of the folder and, if you like, rename it for your project. E.g. my-sci-fi. Inside my-sci-fi, open and edit these three files: _config.yml: Edit the values there for your Jekyll setup. The comments will guide you. index.md: Replace our template text with your own. Usually, a link to each book is useful, e.g. [Space Potatoes](space-potatoes). README.md: Replace our template text with any notes your collaborators might need to know about your project. (The README file is usually only read in the context of editing the files in your folder/repo.) Optionally, rename the book folder with a one-word, lowercase version of your book’s title (e.g. space-potatoes). Use only lowercase letters and no spaces. If you’re creating more than one book, make a folder for each book. In _data, edit the meta.yml file, filling in your project info and info about at least your first book. Inside a book’s text folder, add a markdown file for each piece of your book, e.g. one file per chapter. Our template contains files we consider minimum requirements for most books: a cover, a title page, a copyright page, a contents page, and a chapter. Inside each book’s folder, store images in the images folder. Add a cover.jpg image of your book’s front cover there, too. In each book’s styles folder, edit the values in print-pdf.scss, screen-pdf.scss, web.scss and epub.scss. Creating book contentEach markdown file in space-potatoes is a part of a book, such as a table of contents or a chapter. Each file must start with:--- --- And between those ---s, we can and should specify some information about that part. This information is called YAML frontmatter.In each file’s YAML frontmatter (the info between ---s at the top) we specify the book-part’s title and (sometimes) the book-part’s style to use for that part. The style specifies what kind of book-part it is, such as a title-page or chapter. Technical note: the style YAML sets the class attribute of the output HTML’s <body> element. Themes use that class to control CSS and page structure. When you create your book, we recommend following these conventions for file naming and YAML frontmatter style settings: Book section Sample file Style in YAML Front cover (for the ebook) 0-0-cover.md cover Title page 0-1-titlepage.md title-page Copyright page 0-2-copyright.md copyright-page Table of contents 0-3-contents.md contents-page Acknowledgements 0-4-acknowledgements.md frontmatter A first chapter 1.md chapter A second chapter 2.md chapter If you don’t set the style, the page will default to style: chapter. So you actually don’t need to ever set style: chapter in a YAML header. For most chapters in a book, then, your YAML frontmatter will simply include a chapter title:--- title: ''Chapter One: What are Space Potatoes?'' --- Page styles we’ve designed for in the Classic theme include: index for the home page of a collection cover for a front cover, which will appear in ebook editions halftitle-page for a book’s halftitle page previous-publications-page for a book’s list of the author’s previous publications title-page for a book’s title page copyright-page for the copyright or imprint page contents-page for the book’s table of contents dedication-page for a dedication page epigraph-page for an epigraph page frontispiece-page for a frontispiece page frontmatter for other prelim pages not accounted for otherwise chapter for a book’s default chapter page (and the global default) You can also invent your own page styles, and use them in your custom CSS instead of these, though you may get unexpected results if you’ve been relying on a theme for existing styles like chapter.Set ‘page number one’Many books have two ‘page ones’: the half-title or title page and, if the prelims have roman-numeral page numbers, the first chapter. You should specify those pages so that Prince knows where to start numbering when creating PDFs.Why? Well, for example, in print output if you use frontmatter on a book-part, by default it will have roman-numeral page numbers. When the first chapter starts, it will have decimal page numbers. However, the page numbering will be consecutive from roman through decimal. That is, it will run ‘ix, x, 11, 12’. You reset the numbering to 1 at the start of the first chapter to avoid this.You reset page numbering by adding the class page-1 to the first block-level element on the relevant page.You can do this in two ways: If a markdown document starts at ‘page one’, add the class to the style YAML header. E.g. --- title: Half-title page style: halftitle-page page-1 --- And at the first chapter: --- title: Chapter One style: chapter page-1 --- Remember that chapter is the default, so you normally don’t have to specify it. But if you want to add a class in addition to chapter, you must specify both classes. This is because, if you were to use style: page-1 in a YAML header, the class page-1 would override the default style: chapter, not add to it. Alternatively, add the page-1 class to the first block-level element in the chapter by adding the tag {:.page-1} in the line immediately after it. But for this to work, the element must not have a CSS float applied to it. So often this doesn’t work as well as specifying page-1 in YAML frontmatter. File namingName each book’s markdown files in perfectly alphabetical order. We recommend using a numbering system, where prelims (frontmatter) files start with a 0, e.g. 0-1-titlepage.md, 0-2-copyright.md, and chapter files are numbered for their chapter number, e.g. 01.md, 02.md, and so on. The alphabetical order makes it easy to see the documents in the right order at all times, and it makes ordering outputted HTML files easy when dropping them into Prince for PDF output. Note: We recommend using leading zeros in file-name numbers – that is, 02.md rather than 2.md – because that sorts correctly in most file browsers. Otherwise, some file browsers will sort 10.md before 2.md. In the rare event that you have over 99 chapters, use two leading zeros: 001.md. The images folderAlongside the content files in a book’s folder is an images folder, for images that belong to that book only.A book’s folder should only ever need to contain markdown files and images. If you’re embedding other kinds of media you could add folders for that alongside images. We don’t recommend sharing images or media between books, in case you want to move a book from one project to another later. (So, for example, copy the publisher logo into each book’s images folder separately.)If your project home page requires images, keep those in /assets/images, so that you can link to them from any page."
});
index.addDoc({
    id: 57,
    title: "Electric Book Works course notes: Using Javascript",
    content: "Using Javascript Limiting scripts by book or format Adding scripts to epubs Linking to scripts for epub Unless there’s a good reason to put them elsewhere, scripts should live in assets/js. In addition, scripts for epub output should be in _epub/js, as described below. To add them to your <head> elements, add <script> tags to _includes/head-elements. To add them just before the </body> tag, add <script> tags to _includes/end-elements. You can also link to remote scripts here, without the need to place the actual scripts in the js folder. Keep in mind that anything you add to head-elements will be added to all books in the project folder, and to all their formats. Limiting scripts by book or formatTo limit a script to a given book or format, wrap the script tag in Liquid control flow tags. For instance:{% include metadata %} {% if book-directory == ''grapes-of-wrath'' %} <script src=''{{ site.baseurl }}/assets/js/grapes-of-wrath.js''></script> {% endif %} (The include metadata tag fetches all kinds of information about the page, including which book-directory it’s in.)To limit a script to a given output format, use site.output:{% if site.output == ''print-pdf'' %} <script src=''{{ site.baseurl }}/assets/js/print-headers.js''></script> {% endif %} Adding scripts to epubsScripts in epub are special. While web and PDF scripts should be in /assets/js, all scripts to be used in your epub should be in _epub/js. This is because you must not have any scripts in your epub that you aren’t using, or it won’t validate. By keeping epub scripts separate, only your epub scripts will end up in the epub package.Also, epub scripts must have a YAML frontmatter block, even if it’s empty:--- --- This block tells Jekyll to process the script, which means it knows about it, which the epub packager needs in order to include it in the epub manifest.Finally, if you’re adding scripts to your pages, set epub-scripts: true in _data/settings.yml. This flags your pages as scripted in the epub manifest, which is required for validation.Linking to scripts for epubIn the finished epub, these scripts will end up in a js folder alongside text, styles, images and fonts. So all links to scripts that you want to include in epub output should be in site.output == ''epub'' tags.To ensure that links to scripts work from both parent-language and translation-language files, use the {{ path-to-book-directory }} tag in the path to the epub scripts:{% if site.output == ''epub'' %} <script src=''{{ path-to-book-directory }}js/foo.js''></script> {% endif %}"
});
index.addDoc({
    id: 58,
    title: "Electric Book Works course notes: Content tags (classes)",
    content: "Content tags (classes) Formatting Reserved classes The edition suffix Deprecated classes Our template includes styling for a range of classes by default. You can apply these to elements in markdown. FormattingUse these classes in your markdown to create specific formatting effects. Feature Workflow class Block or inline Explanation Supports edition suffix Bibliography list .bibliography Block Styles a list as a bibliography, for instance at the end of an academic book. To apply this class, place {:.bibliography} directly under the list you would like to target. No Box .box Block Puts the element in a box, to set it off from the rest of the text. To apply this class, place {:.box} directly under the block of text you would like to target. No Chapter number .chapter-number Block Used for a chapter number before a chapter heading. (See the tip at Bold in the chapter on Markdown for another way to handle chapter numbers.) To apply this class, place {:.chapter-number} under the chapter number. No Dedication .dedication Block A dedication, for instance at the start of a book or chapter. To apply this class, place {:.dedication} directly under the block of text that you’d like to target. No Epigraph source .epigraph-source Block The person to whom the epigraph is attributed. To apply this class, place {:.epigraph-source} dircetly under the source of the epigraph. No Epigraph .epigraph Block An epigraph at the start of a book or chapter. To apply this class, place {:.epigraph} under the epigraph you’d like to target. No Figure .figure Block A figure is an image with a caption. Add {:.figure} immediately below a blockquote containing an image and a separate paragraph of text to make it behave as a figure. Read about other options for adding figures in our workflow guide. No Figure: extra small .x-small Block Add to the .figure tag, e.g. {:.figure .x-small}. No Figure: fixed position .fixed Block Add to the .figure tag, e.g. {:.figure .fixed}. For figures that must keep their position in the text flow, and must not float to the top of the page. No Figure: large .large Block Add to the .figure tag, e.g. {:.figure .large}. This restricts the maximum height of the image to a large height. Note that the .large class makes the figure fixed. By default, figures automatically reflow, so this prevents the large figure from appearing at the end of the page, which larger figures tend to do. No Figure: medium .medium Block Add to the .figure tag, e.g. {:.figure .medium}. This restricts the maximum height of the image to a medium height. No Figure: small .small Block Add to the .figure tag, e.g. {:.figure .small}. This restricts the maximum height of the image to a small height. No Figure height .height-1 to .height-50 Block Sets the height of an element to a multiple of the default line height. Use in figures, on line after image, add it to the figure tag like this {:.figure .height-12} for an image whose height should be 12 lines. Yes First paragraph .first Block For any paragraph that starts a new set of paragraphs, which should be flush left and with a gap above it. Add {:.first} immediately below this first paragraph. No Float to top .float-top Block Floats the element to the top of its page. Useful for boxes. Applies to print output only. Apply {:.float-top} under the element which you’d like to float to the top. Or add it to an existing class like {:.box .float-top}. Yes Float to bottom .float-bottom Block Floats the element to the bottom of its page. Useful for boxes. Applies to print output only. Apply {:.float-bottom} under the element which you’d like to float to the top. Or add it to an existing class like {:.box .float-bottom}. Yes Footnote .sidenote .bottom Block or inline When you add .bottom to .sidenote, the note appears at the foot of the page in print output. It remains on the side on screens. (Also see the chapter ‘Footnotes, endnotes and sidenotes’.) No Fractions .fractions Block or inline If your font supports it, converts characters like 1/2 into fraction characters. Add {:.fractions} to a span (e.g. italics, bold or link) or to a block element (e.g. list, paragraph) by adding it to the line immediately below it. No Frontmatter references .frontmatter-reference Inline Tag links in the Table of Contents whose page numbers must match your frontmatter reference style set in its .sass variables (e.g. print.scss). You apply this class differently depending on how your Table of Contents is generated. In the current Electric Book template, the TOC is built from the meta.yml file. In the toc: section, add class: ''frontmatter-reference'' below the label you need to target. No Glossary .glossary Block Add {:.glossary} below the last entry in a series of definition lists to format the entire list of definitions as a glossary. No Hide from print .non-printing Block or inline Hides the element from print output. Useful for things like clickable buttons, which are only intended for screens, not paper. Apply {:.non-printing} below or next to the element. No Image with caption .image-with-caption Block Used for paragraphs that start with an inline image, and turns the text in the paragraph into a caption. Makes simple images with captions quick and easy. Apply {:.image-with-caption} directly after the paragraph that contains an inline image. No Keep together .keep-together Block Prevents an element from breaking across pages. (E.g. you want to keep a short list on the same page.) Apply {:.keep-together} to the end of the entire element. No Keep with next .keep-with-next Block Prevents a page break between this element and the next one. Apply {:.keep-with-next} below the first element, to make sure it stays with the following element. No Letter .letter Block Formats a blockquote as a letter, by spacing the paragraphs in it. Add > to the beginning of each line of the letter, to create a blockquote, then apply {:.letter} directly below the entire blockquote. No Logo image .logo Block Used for making images small, especially for small logos in text like on acknowledgements pages. Add {:.logo} immediately below the markdown image tag. No Page break after .page-break-after Block Creates a page break after the element. Place {:.page-break-after} directly below the element preceding your desired page break. No Page break after, end of book .page-break-after-right Block When applied to the very last element in the book, ensures a blank verso for an even-numbered page extent. Apply {:.page-break-after-right} to the last element. No Page break before .page-break-before Block Starts its element on a new page. Apply {:.page-break-before} after the element that should come after the page break. No Page break: allow .allow-break Block Allows an element to break over a page where the default styles would normally prevent that (for example a three-bullet list might not break over a page). Apply the class to the parent element, for example place {:.allow-break} directly below the entire list. No Page numbering restart .page-1 Block Restarts page numbering from 1. Can be added to the first block element on a page by using {:.page-1} after the first element, or to the YAML header, in addition to the main style, e.g. style: halftitle-page page-1 or style: chapter page-1. Recommended for any document that starts a book interior (e.g. title page), to retain correct pagination when creating a screen PDF that has a front cover page. No Poetry .verse Block Designing poetry is tricky and important. Read about how to manage this in our workflow guide. No Pull quote .pullquote Block Displays a paragraph as a pull quote. Apply {:.pullquote} directly below the block of text. No Show URL .show-url Inline Apply to a link to show the URL in parentheses after the linked text in PDF. No Show page number .show-page-number Inline Apply to a link to show the page number in parentheses after the linked text in PDF. No Sidenote .sidenote Block or inline A sidenote appears in a sidebar to the right of the text. Apply {:.sidenote} below the block of text. No Small caps (lowercase only) .smallcaps Block or inline Works if your font supports proper small-caps glyphs. Only affects the lowercase letters. Apply {:.smallcaps} to the span inline (e.g. use * like italics) or directly below the block of text. This class avoids making * and ** spans bold or italic. So add .italics or .bold if you also need to italicise the small caps or make them bold. No Small caps throughout .allsmallcaps Block or inline If your font supports proper small-caps glyphs, this makes all characters small caps, including capital letters. Apply {:.allsmallcaps} directly after a span element inline or directly below a block of text. Add .italics or .bold if you needed to italicise or make bold. No Source after a quotation .source Block Add this to the source (e.g. name and/or title) for a preceding quotation. Apply {:.source} below the block of source text. No Start on right .start-on-right, .start-on-recto Block Creates a page break to start a new right-hand page. Apply to page frontmatter to start a chapter on the right, e.g. style: chapter start-on-right. No Table caption .table-caption Block Add {:.table-caption} in the line immediately after a table caption. Table captions must always appear above tables, not after them. No Title page: author .title-page-author Block The book’s author(s) on the title page. No Title page: logo .title-page-logo Block A logo, as an image, on the title page. Apply {:.title-page-logo} below the markdown image tag. No Title page: subtitle .title-page-subtitle Block The book’s subtitle on the title page. Apply {:.title-page-subtitle} directly below the subtitle. No Title page: title .title-page-title Block The book’s title on the title page. Apply {:.title-page-title} directly below the title. No Tracking: tighten .tighten-1 to .tighten-50 Block or inline Each increment tightens the space between letters by 0.001em (1/1000 of a em). E.g. add {:.tighten-5} directly below a paragraph to reduce its letter-spacing by 5/1000em. Affects print output only. Yes Tracking: loosen .loosen-1 to .loosen-50 Block or inline Each increment loosens the space between letters by 0.001em (1/1000 of a em). E.g. add {:.loosen-5} directly below a paragraph to increase its letter-spacing by 5/1000em. Affects print output only. Yes Valediction .valediction Block Used for the sign-off at the end of a letter, preface or foreword. Add {:.valediction} directly below the sign-off line. No Width .width-1 to .width-100 Block Applied to .verse (only for PDF output) and to figures to set their width as a percentage No Reserved classesYou may also need to create your own classes for other uses. If you do, avoid using the same already-supported class names above. You should also avoid using the following ones, which are reserved for specific structural elements. Class name Reserved for index The home page of a collection, used for the style value in file YAML headers cover A front cover, which will appear in ebook editions, used for the style value in file YAML headers halftitle-page A book’s halftitle page, used for the style value in file YAML headers previous-publications-page A book’s list of the author’s previous publications, used for the style value in file YAML headers title-page A book’s title page, used for the style value in file YAML headers copyright-page copyright or imprint page, used for the style value in file YAML headers contents-page A book’s table of contents, used for the style value in file YAML headers dedication-page A dedication page, used for the style value in file YAML headers epigraph-page An epigraph page, used for the style value in file YAML headers frontispiece-page A frontispiece page, used for the style value in file YAML headers frontmatter For other prelim pages not accounted for otherwise, used for the style value in file YAML headers chapter A book’s default chapter page (and the global default), used for the style value in file YAML headers The edition suffixIf you want to produce more than one print edition of a book from the same source file, you can’t use the same classes that affect text-flow – like .tighten-1, for instance – in both editions, because the text will flow differently in each edition.Our workflow has a way to manage that. In the print CSS file, you can specify an edition suffix. For instance, if you’re producing a schools edition of a book, you might make your suffix -schools-edn. That suffix will be appended to the end of certain class names for that stylesheet. The default .tighten-1 class will become .tighten-1-schools-edn in your final print CSS.(It’s a good idea to start a suffix with a hyphen and use all lowercase letters, to keep your output CSS neat. Never use spaces.)Only some classes are affected – see the table above for which ones. The most important are the classes used for tightening and loosening letter-spacing, which are mostly used to control widows and orphans in print layout.In your markdown, then, you’d use {:.tighten-1-schools-edn} instead of {:.tighten-1}, and that class will then only have an effect on your schools edition. If you had another edition, say a large-print edition with a -large-print suffix, you’d use a {:.tighten-1-large-print} tag in the markdown. These would match the classes automatically generated in each edition’s CSS.Of course, one element can carry both classes. For instance, you might end up with a paragraph tagged with {:.tighten-1-schools-edn .tighten-1-large-print}. That paragraph would then be tightened in both print layouts. Deprecated classesEarly versions of the EBW used the following classes, which are no longer supported: shrink tighten, tight, x-tight, xx-tight, xxx-tight loosen, loose, x-loose"
});
index.addDoc({
    id: 59,
    title: "Electric Book Works course notes: Figures",
    content: "Figures Simple markdown figures Advanced figures Rotating figures Figure width A figure is the combination of an image and a caption. Sometimes a figure can include things like tables or video instead of images, and the captions can be accompanied by things like titles and sources. Simple markdown figuresYou can create simple markdown figures that include an image followed by a caption. We put these together in a <blockquote> element with a .figure class. We can then control placement by styling the <blockquote>.The reason we use a blockquote is that it lets us keep images and their captions together. A <figure> element would be better HTML, but it won’t validate in EPUB2, and can’t be created with kramdown.Here’s an example of markdown for a figure:> ![Line drawing of a book](../images/web/book.jpg) > > This is not a book. {:.figure} Every line (except the {:.figure} class tag at the end) starts with a > and a space. These wrap the figure (image and caption) in a blockquote element.The first line is the image reference. As noted above, it consists of: an exclamation mark telling markdown that we’re placing an image the image’s description (aka the alt attribute in HTML) in square brackets the path to the image file. The third line is the figure caption, followed by the kramdown tag {:.figure}, which lets our stylesheets format the blockquote as a figure. (For instance, preventing a page break between the image and the caption in print.)If your image has no caption, just skip the empty line and caption line:> ![Figure 2-A: The Ballard scoring method](../images/web/fig-2-A.svg) {:.figure} If it’s important to you that the image isn’t in a blockquote, and there is no caption, you can use:![Figure 2-A: The Ballard scoring method](../images/web/fig-2-A.svg) {:.figure} Advanced figuresFigures are much more powerful if you use the figure include. The figure include is a dedicated piece of code in our template that creates figures with many options.To include a figure this way, start with this simple tag:{% include figure %}Then, inside that tag after the word figure, you add extra info, depending what you need it to include.In the tag for each figure, we can define the following information: one or more images html (e.g. for complex tables with merged cells) markdown (e.g. for simple tables) a reference (e.g. ‘Figure 1.2’, which will appear in front of the caption) a link (clicking the image opens this link; without it, by default clicking the image opens the image file) a caption (appears below the image) a title (can be used to title descriptive text) a description (hidden by default and used at alt text on the image; can be displayed and used with custom CSS) a source (appears below the figure) a class (for styling the layout of a given figure). The template uses that information differently depending on the output format. For instance, on the web and in the epub, the description is the text that screen-readers will read aloud to visually impaired users who can’t see an image; and we don’t need to display it in print.A caption and a description are similar, but not the same. A caption usually provides information about the figure, while a description describes its appearance.We define these things in the tag using ‘parameters’. For instance, we set the image parameter by writing image='mydog.jpg'. Below is a figure include with each parameter set. You can copy this and set the value in each parameter. Nothing is mandatory, so you only need to include the parameters that your figure needs defined.Here is a full example:{% include figure images=''mydog.jpg, yourdog.jpg'' html=''<table></table>'' markdown=''A *bad* example.'' reference=''Figure 1.2a'' link=''http://example.com'' caption=''This is the figure caption.'' title=''My Example Figure'' description=''This should describe what the images look like.'' source=''Fire and Lion, 2017'' class=''featured'' %} Note the double quotes. If the text you’re adding to a parameter contains quotes, you’d use single quotes in the text – or vice versa. Do not mix single and double quotes, or the software won’t know where the parameter ends. If you must use, say, double quotes inside the quotes around a parameter, use the actual unicode glyphs for curly quotes, “ and ”. For instance, all of these are okay:caption=''Blake's illustration for 'The Tyger'.'' caption='Blake's illustration for ''The Tyger''.' caption=''Blake's illustration for “The Tyger”.'' Rotating figuresIf you need to rotate a large figure on the page, add the rotate class. E.g.{% include figure html=''<table>...</table>'' reference=''Figure 1.1'' caption=''A really huge table.'' class=''rotate'' %} Rotation only affects PDF output.Figure widthIf you need to make a figure narrower than the full text area, add a width-x class, where x is the width you want in percent. E.g. width-50 will create a half-width image."
});
index.addDoc({
    id: 60,
    title: "Electric Book Works course notes: Hyphenation",
    content: "Hyphenation There are various techniques for managing hyphenation in PDF output. You can change the basic hyphenation settings (variables) in your book’s print-pdf.scss or screen-pdf.scss files. Our default stylesheets can ask Prince to hyphenate paragraphs and lists (p, ul, ol, dl), with a few exceptions (such as text on the title and contents pages). Prince includes a range of hyphenation dictionaries for major languages by default, which do a good job. However, you might need to add dictionaries or lists of specific words that Prince doesn’t support. You can find .dic files online for various languages and specialities, or you can compile your own. A .dic file is a plain-text file with one word or word-fragment on each line. Each one is called a pattern. If the pattern starts with a ., it will apply to, or match, any word that starts with that pattern. E.g. .foo will match the words ‘food’ and ‘foobar’ but not ‘fastfood’. If the pattern ends with a ., it will apply to any word that ends with that pattern. E.g. port. will match ‘port’ and ‘sport’ but not ‘portico’. Thus, if the pattern starts and ends with a ., it will apply to only that pattern exactly. E.g. .port. will only ever match ‘port’. To show where a word or word-fragment can hyphenate, you add digits (1 to 9) to the pattern. The digits have special meanings: Insert odd digits (1, 3, 5, 7, 9) where the word may hyphenate. Insert even digits (2, 4, 6, 8) where the word should not hyphenate. The higher the number, the more important the rule. That is, a 1 says ‘hyphenate here if you must’, but a 9 says ‘this is the best place to hyphenate’. A 2 says ‘don’t hyphenate here if you can help it’, but an 8 says ‘Do not, not, not hyphenate here.’ For user discussion, see the Prince forums here: If you need to hack Prince’s built-in hyphenation dictionaries more deeply, see this forum post."
});
index.addDoc({
    id: 61,
    title: "Electric Book Works course notes: Images",
    content: "Images Adding images in markdown Responsive images Images in translations Image placement Images over a double-page-spread Adding images in markdownYou can use standard markdown to embed images:![A description of the image](../{{ site.image-set }}/filename.svg) Let’s break that down: the exclamation mark and square and round brackets make up the basic markdown image syntax: ![Description](filename). The description is especially important for screen-readers used by the visually impaired. ../ means ‘go up, out of the text folder’ {{ site.image-set }}/ means ‘go into the folder containing our preferred set of images’ (as defined in _config.yml). The default image-set folder is images. finally, the image file name. Responsive imagesTo add an image, you can use standard kramdown syntax, as described above, but then you’ll be missing a key feature of this template: your user’s browser won’t fetch the size of image best suited to their device.Instead, to get responsive images, use this image tag:{% include image file=''foobar.jpg'' %} where foobar.jpg is the original filename of the image.If necessary, you can add class, id and/or alt attributes to the image, too:{% include image file=''foobar.jpg'' class=''example'' alt=''An example image.'' id=''anyuniqueid'' %} (You can also use src=''foobar.jpg'' instead of file=''foobar.jpg'', if you’re used to standard HTML img syntax, which uses src.)Images in translationsIf you are creating a translation in a subdirectory of text, and your images are in the parent book folder, you need to change the path to the images slightly. You have three options: From version 0.10 of the template, you can use {{ images }} metadata tag, which will always create the correct path to your images. At the top of your markdown file, add {% include metadata %}`, so that you can use metadata variables in that file. In older versions of the template: use the {{ path-to-book-directory }} metadata tag. At the top of your markdown file, add {% include metadata %}, so that you can use metadata variables in that file. Then instead of any ../s, you use the tag: {{ path-to-book-directory }}{{ site.image-set }}/filename.jpg. Even if you’re not in a translation folder, it’s good practice to always use the {{ path-to-book-directory }} tag for maximum portability, if you don’t mind having the {% include metadata %} tag at the top of your files. Ultimately this image include will look like this: ![A description of the image]({{ path-to-book-directory }}{{ site.image-set }}/filename.jpg) In very old versions of the template: add another ../ for each directory level. So if your translation text is in book/text/fr, anf your images are in the book folder, you need to come up two levels before going into book/images. So your path is ../../{{ site.image-set }}/filename.jpg. Ultimately, your image include will be ![A description of the image](../../{{ site.image-set }}/filename.jpg). Image placementYou may need to control how an image is sized and placed on the page – especially in print – depending on its detail or aspect ratio and nearby images or other elements. You do this by adding a class tag to the line following the image or figure created with a > blockquote. (This applies a class to the blockquote in HTML.)You have two broad options:The lazy way: use these class attributes: .x-small limits the image height. In print, to 30mm. .small limits the image height. In print, to 45mm. .medium limits the image height. In print, to 65mm, which allows two figures with shortish captions to fit on a page. .large fills the width and most of a printed page, up to 150mm tall. Try to put these images at the end of a section, because they cause a page break. .fixed keeps the figure in its place in the text flow, and will not float it to the top or bottom of a page. For instance, when an image must appear in a step-by-step list of instructions. You add these classes to the `{:.figure} tag like this:{:.figure .small}{:.figure .fixed}and so on. You can combine size and placement classes like this, too:{:.figure .fixed .small}The more accurate way: use a class tag to specify the exact height of the image in lines. This is important if you’re maintaining a baseline grid on your pages. For instance, {:.height-5} will limit the image to a height of five lines. Unlike the lazy way above, this tag should be applied to the image, not the figure. So a complete figure element might look like this in markdown:> ![Potatoes on the moon](images/web/1-moon-potatoes.jpg) > {:.height-12} > > Potatoes grow well on the moon if well watered. {:.figure} CSS tip: If you’re having trouble with SVGs having space around them, in your CSS make sure you set the height of the img element. SVGs are inline elements by default, and will add white space around them. Images over a double-page-spreadThere is no easy way to put images over a double-page spread, but there is a way to hack it.Of course, images across a DPS are not an ebook or web issue (if an ereader or browser shows ‘pages’ as a DPS, we have no control over it anyway). They are only a print issue. The problem is that PrinceXML does not provide a mechanism for placing images (or any element) across a spread.In short, what we do is: Place the image twice, each in a div (as HTML) or blockquote (possible with markdown) element. Using PrinceXML’s next modifier for floats, we float the div or blockquote elements on the first and second pages of the DPS respectively. Inside each div or blockquote, we position the image so that, on the left, only the left half of the image shows; and on the right, only the right half of the image shows. This all depends on placing your image reference in a way that the first blockquote–image falls on a left-hand page.Here’s a step-by-step guide using example code: The image itself must be in the right aspect ratio. This method cannot (yet) resize or crop your image for you with CSS. In this example here, the image must be 270×120 (landscape), including an allowance for 5mm bleed. In the markdown text file, place the image twice, each inside a blockquote, and tag the first instance {:.dps-left} and the second {:.dps-right}. > ![1](images/lion.tif) {:.dps-left} > ![1](images/lion.tif) {:.dps-right} Hide the second instance of the image in any web, app or epub CSS: /* Hide second instance of images intended for DPS in print */ .dps-right { display: none; } In print CSS, use this. Follow the comments to modify sizes to suit your page size and layout: /* DPS images */ blockquote.dps-left { float: top; margin: -20mm 0 10mm -5mm; /* Here you're aiming to start the image in the page bleed top left */ width: 135mm; /* Page width plus one side's bleed, e.g. 130mm wide plus 5mm bleed */ height: 120mm; /* Exact height of the image */ text-align: left; } blockquote.dps-right { float: top next; margin: -20mm 0 10mm -5mm; /* Here you're aiming to place the image in the page bleed top right */ width: 135mm; /* Page width plus one side's bleed, e.g. 130mm wide plus 5mm bleed */ height: 120mm; /* Exact height of the image */ text-align: right; } blockquote.dps-left p img { width: 270mm; /* This must be exactly double the width above */ max-height: 120mm; /* This must be the same as the height above */ position: absolute; left: -5mm; } blockquote.dps-right p img { width: 270mm; /* Ditto */ max-height: 120mm; /* Ditto */ position: absolute; right: -5mm; } That’s all based on these page settings. Yours may differ, affecting your margins, heights and widths accordingly:@page { size: 130mm 200mm; margin-top: 15mm; margin-bottom: 20mm; margin-outside: 0; margin-inside: 0; prince-bleed: 5mm; prince-trim: 5mm; } We’ve done very little testing with this so far. YMMV.There is another example here."
});
index.addDoc({
    id: 62,
    title: "Electric Book Works course notes: Indexes",
    content: "Indexes Introduction How to tag indexed words How to create the index list Future development IntroductionAn index (the long list with the page numbers at the end of a book) is an important part of many non-fiction print books (many ebooks don’t include indexes, and instead rely on ebook app’s search function). Traditionally, indexes are created by professional indexers, who read the final page proofs and compile a list of entries and page numbers manually. They do not only add words to the index, but entire concepts. For instance, a good indexer will include an entry for ‘democracy’ in an index if the concept is discussed, even if the word ‘democracy’ is never used. This is why good indexes cannot be generated by computers.In this workflow, the challenge is in managing page numbers: our workflow allows you to reflow the content into new formats, so page numbers are never quite fixed. Well, you might decide that a particular format’s pages are fixed enough for allow for manual page numbers in an index, but then you cannot reuse that index in another format.So here we’ll describe how to create an index where the page numbers are dynamic. That is, the index is a list of concepts that point to a particular point in the book. The page numbers in the index (and clickable hyperlinks in an ebook version) are then generated on the fly whenever you output to PDF. This also means you can index early in the production process, such as during editing, rather than waiting for pages to be finalised. Note: Be careful not to confuse an index in a book with the index page of a website. When talking about websites, the index page is the home page of a directory. So never give your reference index the file name index (e.g. index.md or index.html). To avoid confusion, in our code we refer to the reference-index when we mean a book’s index. To create an index you have to do two things: In the text, tag the words that their index entries will point to. Create an index document with a list of entries. How to tag indexed wordsTo tag a word in the text, we make it a link, and we give that link: a target that points to the index a class (.indexed) to control what it looks like an ID (e.g. #democracy-1) to uniquely identify it. The link target should point to the index entry for that word. This way, clicking the word in the text will take you to the right place in the index. And clicking the page reference in the index will take you to the word in the text.Here’s an example of the link in the text:Late that night, [Bob](reference-index.html#bob-1){:.indexed #bob-1} realised the key was in his pocket. And then when Bob appears later in the book:Eventually, [Bob](reference-index.html#bob-2){:.indexed #bob-2} called her to confess. Note that the ID must be unique for every instance of Bob. How to create the index listThen in the index itself, you create a list of entries. After each entry, you add links to each instance of that entry you’ve tagged in the text. And you give each link the ID that you’ve pointed to in your tagged word’s link target. Tech tip: To make it easy for us to manage, we use the same ID for the tagged word and the index entry. You don’t have to us the same ID. For instance, your tagged-word’s ID might be #text-bob-1 and your index entry’s link #index-bob-1. If like us you use the same ID in both cases, remember that your index must be in a separate file from your text, since IDs must be unique within each file. Here is what your markdown for the index might look like. Here we’ve included examples of sub-entries, and the tag to use for the entire list to style it as an index: {:.reference-index}.* Alice [1](1.html#alice-1){:#alice-1} [2](3.html#alice-2){:#alice-2} * Bob [1](1.html#bob-1) [2](9.html#bob-2) * key [1](4.html#key-1) - private [1](4.html#key-private-1) - public [1](4.html#key-public-1) {:.reference-index} In this example, we’ve used numbers as the link text. On screen, these will stay numbers, e.g.:Alice 1, 2The stylesheet will add the commas between entries (so you could globally replace with semicolons or otherwise). In print output (using PrinceXML), the stylesheet will replace those numbers with page references. Future developmentWe hope to find more concise ways to create indexes from tags in running text in future. We’d also like to align this work the IDPF’s recommendations on indexes in ebooks."
});
index.addDoc({
    id: 63,
    title: "Electric Book Works course notes: Markdown",
    content: "Markdown How HTML works How markdown works Paragraphs Headings Italics Bold Lists Simple tables Blockquotes Hyperlinks Images Endnotes Definition lists Code Using class tags Inventing classes Block and inline elements Editing reflowable text This guide explains how to edit text for the workflow. On its own, it’s also a handy guide to markdown in general. If you get your markdown right, the workflow can zap out an almost-print-ready PDF, website or ebook from your files in a matter of minutes. That is, we go straight from edited manuscript to page proofs – no typesetting! To edit for the workflow, you need to have a rough idea how HTML works, and you need to learn markdown. If you’re new to HTML and markdown, don’t worry: it’s much easier than you think. How HTML worksHTML is a computer language. It’s a way for us to mark up or tag text, so that a computer knows how to display it beautifully to humans. That is, software (most commonly a web browser) reads the HTML code and renders it as nice-looking, readable text and images.In HTML, each piece of content (e.g. a paragraph) starts and ends with a tag that a computer can recognise. Tags are always in elbow brackets, like this paragraph tag: <p>.<p> This text is tagged in HTML as a paragraph. </p> The slash ‘closes’ the tag.The <p> tag is one of about a hundred possible tags, maybe ten of which you’ll see in a book, such as tags for headings (e.g. <h1>, <h2>), bold and italic, lists, images, tables, and blockquotes.But not all paragraphs are the same: there are opening paragraphs, pull-quote paragraphs, blurb paragraphs and more. If I want to tell the computer what kind of paragraph it is, I can put it in a special class. Say, the ‘blurb’ class of paragraph. To write this in HTML, I would make the tag <p class=''blurb''>. Unlike its limited set of specific tags, HTML classes are infinite, because we can make up class names as we need them.HTML is very simple and very powerful (which is why it’s the language behind almost every web page). We can mark up everything in a book using HTML tags and classes. In our workflow, we store books in HTML, with each book part (title page, contents page, chapter, etc.) in its own HTML file.Then, to create print-ready PDFs, websites and ebooks from that HTML, we combine the files with CSS stylesheets. CSS is another computer language that defines design: font sizes, indentation, colour, etc. A CSS file will say ‘make all headings bold’, for instance, or ‘indent blockquotes by 1em’.If we combine a book’s HTML with a stylesheet designed for print, we can get a print-ready PDF. If we combine the same HTML with a stylesheet for the web, we get the book as a website. This way, we only ever store the book’s content once, and use different stylesheets to generate alternative editions from that single source.Unfortunately HTML tags are very, very time consuming to type by hand. But we have a shortcut! It’s called markdown, and it’s amazing. How markdown worksMarkdown is just plain text, neatly structured. Plain text as in .txt files. It’s so neatly structured that software can work out, just from the structure of your text, what HTML you intended, and convert it instantly to finished HTML, tags and all. No way! Yes way.Markdown was invented by two very smart people in 2004: John Gruber and Aaron Swartz. Since their work, others have added new features to markdown. So today there are many variations of markdown. We use a variation called kramdown.As you work with markdown, you’ll get to know it really well. That can take as little as a few hours. And hopefully you’ll come to love it as much as we do. To do that, you’ll need to keep the kramdown syntax reference handy. For now, though, we’ll explain the most common, important things you’ll need to edit simple books.To quickly test any basic markdown yourself, go to http://kramdown.herokuapp.com. Type markdown in the left, and see the rendered HTML on the right.ParagraphsThis is easy: a paragraph is a line of text separated from any other text by empty lines.You can even have line breaks in a paragraph, and markdown will just ignore them (or, rather, replace them with spaces). That is, markdown is looking for an empty line before it ends a paragraph.This is a paragraph. This is another paragraph. Result:This is a paragraph.This is another paragraph.HeadingsYou can use up to six levels of heading, from level one to level six. To make a heading, just put one or more hash signs, #, and a space, before the heading. For a first-level heading, use one hash sign; for a second-level heading, use two; and so on. Like with paragraphs, separate the heading from everything else with an empty line space.## This is a second-level heading This is a paragraph. ItalicsJust put * before and after the italicised words: is it really *this* easy?. It’s really this easy.BoldJust put two *s before and after the bold text: good for **shouting**. Shouting.Tip: If you use bold in a first-level heading (e.g. # **Chapter 1** Lost at Sea), our Classic theme’s typography will put that bold text onto its own line, set off from the heading. This is useful for chapter numbers that should look separate from the chapter title, but in the underlying HTML need to be part of the heading, for instance when software generates tables of contents.ListsThere are two kinds of lists: bulleted and numbered. For a bulleted list, start each line with a * and a tab. For a numbered list, start each line with a number, a full stop and a tab (you can use any number, because the software will always create an HTML list that starts with 1; but it’s best to use 1 or the actual numbers you intend, just to make things neat). Markdown:1. Apples 2. Oranges 3. Pears * Apples * Oranges * Pears Result: Apples Oranges Pears Apples Oranges Pears Simple tablesYou can create simple tables in markdown. You can make them really neat, or you can make them really efficient. Markdown:| Fruit | Quantity | |---------|----------| | Apples | 2 | | Oranges | 5 | | Pears | 0 | | Fruit | Quantity |---|--- | Apples | 2 | Oranges | 5 | Pears | 0 Result: Fruit Quantity Apples 2 Oranges 5 Pears 0 Fruit Quantity Apples 2 Oranges 5 Pears 0 Note the minimum three hyphens in the lines that creates the border between the table head and table body. (Kramdown doesn’t require three, but GitHub previews do, so it’s best practice.)To make more complex tables with merged or individually styled cells, you have to use actual HTML table markup. See the Tables chapter for more detail.BlockquotesRemember how old email programs put a > at the start of each line when you hit ‘Reply’? Ah, > means blockquote. Start each line with > and a space to make text a blockquote. Markdown:> This is text in a blockquote. Result: This is text in a blockquote. In our workflow we use blockquote HTML for more than just quotations, though. We also use it for figures and poetry. We’ll come back to this later.HyperlinksIf you want your final HTML to include a clickable link: surround the text you want clickable with [ and ] put the URL it should point to between ( and ) immediately afterwards. Markdown:To learn more, [click here](http://google.com). Result:To learn more, click here.ImagesTo place an image, you include a line telling the computer where to find the image file. This looks like a hyperlink, but with a ! at the start of the line. Inside the square brackets, you include a brief description of the image (this is useful to screen readers for the visually impaired).![A dog chasing a bus.](images/dogbus.jpg) In the parentheses above, the images/ part says that the dogbus.jpg image is in the images folder, which is alongside the markdown file. In our workflow, we always put images in the images folder like this.See the Images chapter for more detail.EndnotesEndnotes in our workflow appear at the end of a document (that is, a web page or a book chapter).1 put a [^1] where the footnote reference should appear (the 1 there can be any numbers or letters, and should be different for each footnote in a document); anywhere in the document (we recommend after the paragraph containing the footnote reference), put [^1]: Your footnote text here.. We’ll explain how to create notes on the side or bottom of a page (footnotes) later when we talk about classes.(By the way, endnote references are <sup> in kramdown’s HTML, not unicode numbers like ². The Classic theme includes styling for these and for <sub>, as in H2O.)See the Notes chapter for more detail.Definition listsA definition list is a list of definitions, not surprisingly. Think of a dictionary. A definition list comprises one or more entries, and each entry has a headword and a definition. Even if you’re not editing a dictionary, you might need to create a short glossary or define a word or two at some point. To create a definition entry in markdown, put the headword on its own line, and the definition on the next, after a colon and a tab. Markdown:Editor : Someone who spends more time learning new tricks than making money. Result: Editor Someone who spends more time learning new tricks than making money. To create a whole list of definition entries, just put one of these after the other, with a line space between them.CodeCode can be inline, like this, or block:like this To create inline code, put back ticks around it: \`. To create a block of code, put three back ticks on a line before and after the code block, like this:``` code here ``` To get code highlighting on a code block, add the name of the language after the first line of back ticks:``` css p { font-size: 1em; } ``` You can also use three tildes ~~~ instead of back ticks for code blocks. Using class tagsWe’re going to get a bit more advanced now. Get some tea.As we mentioned earlier, sometimes we have to tell our software what kind of paragraph or list or blockquote we want. These kinds of text are called classes. To give something a class, we add a kramdown tag in curly braces, with a colon, and a dot before the class name. Markdown:This paragraph should be in a box. {:.box} Result:This paragraph should be in a box.For the resulting HTML to actually appear in a box, when we turn your markdown into a finished book, we’ll have to combine it with a CSS stylesheet that includes formatting instructions for the box class. If you’re just editing in markdown, you don’t have to think about the stylesheets. Our default stylesheets include designs for box as well as several other classes. (Which we’ll list in a moment.)But if your book needs classes that aren’t already supported in the Classic theme, you’ll need to ask a CSS-savvy designer to write you some CSS rules for your new class, to add to the bottom of your theme’s master .scss files as custom CSS. Inventing classes If you invent new classes, make sure you name them for their semantic purpose, not their appearance. For instance, important-tip is a better class name than shaded-bold. Also, class names should always be lowercase and have no spaces. In addition to boxes, our default stylesheets include lots of other classes for common book features. Block and inline elements Attribute tags like classes can be applied to two kinds of element: block elements and inline elements. A block element is anything that should (in print or on screen) start and end with a line break, like a paragraph or a list. An inline element is anything that appears inside a line of running text, like bold and italic. Most of the Classic theme’s pre-designed classes are for either block or inline elements, and sometimes both. When you apply an attribute tag to a block-level element in kramdown, you put the tag on the line immediately following the element. When you apply an attribute tag to an inline element, it appears immediately at the end of a span (a span is any contiguous series of inline characters inside a block element). Spans in kramdown can be marked off with asterisks as if they are italics: mark off the text you’re tagging with asterisks (*), as you would italics, and put your tag immediately after the closing *, on the same line. E.g. *Make this small-caps.*{:.smallcaps}. The Classic theme will then apply the correct styling to the span, instead of the default italic. To see all the classes that our template supports by default, see the Supported classes section. Editing reflowable textWhen you’re working in markdown, you’re creating text that might reflow in an infinite number of ways on screens and onto page layouts. This changes the way you edit, because nothing is static.For instance, you can use special HTML codes to insert non-breaking spaces, discretionary (‘soft’) hyphens and non-breaking hyphens. I need to Use this Prevent ellipses falling after a line break Add a non-breaking space (&nbsp;) before ellipses. Prevent dashes falling after a line break Add a non-breaking space (&nbsp;) before the dash: the en-dash&nbsp;– as I've explained&nbsp;– is tricky. Prevent line breaks between numbers and units Use a non-breaking space: e.g. for ‘3 pm, 24 May’ type 3&nbsp;pm, 24&nbsp;May Prevent line breaks between adjectives and their units Use a non-breaking space: e.g. for ‘Grade 2’ type Grade&nbsp;2 Prevent line breaks inside big numbers Use a non-breaking space: e.g. for ‘40 000’ type 40&nbsp;000 Prevent a line break at a hyphen Use &#x2011; for a non-breaking hyphen, e.g. D&#x2011;Space for ‘D‑Space’ Allow a word to hyphenate at the end of a line Insert a discretionary (‘soft’) hyphen code: &shy;. E.g. mark&shy;down In kramdown syntax, unfortunately, endnotes are called footnotes; so it’s easy to confuse them. In book parlance, there is a big difference between footnotes and endnotes. ↩"
});
index.addDoc({
    id: 64,
    title: "Electric Book Works course notes: Mathematics",
    content: "Mathematics MathJax in HTML blocks Avoid using LaTeX for content layout To enable LaTeX syntax for maths: Set mathjax-enabled: true in _config.yml. It is off (false) by default to avoid loading unnecessary scripts in books without maths. For PDF output, you must have PhantomJS installed. (PhantomJS must render the maths before Prince can include it in PDF output.) The LaTeX is turned into displayed maths by MathJax. Surround your LaTeX with $$ … $$ to have MathJax process it. MathJax in HTML blocksSometimes you have to use actual HTML code in your markdown, for instance when adding an HTML table to a figure include. In that case, surround LaTeX with $$ … $$ for displayed maths (centered, with blank space above and below), and \( … \) for inline maths. Avoid using LaTeX for content layoutLaTeX syntax can store two different kinds of info: mathematics, delimited in our markdown with $$ content layout, which must not be used with MathJax. MathJax can only display the mathematics, and does not understand content layout. (More detail here.)"
});
index.addDoc({
    id: 65,
    title: "Electric Book Works course notes: Footnotes, endnotes and sidenotes",
    content: "Footnotes, endnotes and sidenotes Our default theme provides three options for notes. Footnotes appear at the end of a document (web page or book chapter). In book parlance, they are therefore actually endnotes, but we call them footnotes because that’s what kramdown calls them. To create them in markdown, follow the kramdown syntax for footnotes: put a [^1] where the footnote reference should appear (the 1 there can be any numbers or letters, and should be different for each footnote in a document); anywhere in the document (we recommend after the paragraph containing the footnote reference), put [^1]: Your footnote text here.. Sidenotes appear in a box to the right of the text. On wide screens, they float far right of the text. On narrower screens, the text wraps around them. In print, the text wraps around them, too. To create a sidenote, put a * at the start of the sidenote text and *{:.sidenote} at the end (with no spaces). (Technically, you’re creating an <em> span with a kramdown IAL.) In print, you can put sidenotes at the bottom of the page. By adding .bottom to the {:.sidenote} tag, your sidenote sits at the bottom of the page rather than on the right with text wrap, replicating a traditional footnote. So the markdown looks like this: *This is a sidenote at the bottom of the page in print.*{:.sidenote .bottom}. On screen, these are just regular sidenotes. To create footnote-like sidenotes, you can tag a reference and footnote-like text to create the bottom-of-page-footnote effect: This is body text with a footnote at the end.[1](#fn-1){:.fnref #fnref-1} [1](#fnref-1){:#fn-1}. This is the footnote text {:.sidenote .bottom} This markdown makes 1 a link in the body text, which points to the footnote text (ID fn-1). The number 1 at the footnote text is a link to the reference (ID fnref-1). Unlike proper kramdown footnotes, these do not autonumber. You must manage the numbering manually. This means this is only suitable for books that have a few footnotes. The kramdown contributors are looking into alternative syntax that will let you place a kramdown footnote anywhere in the text."
});
index.addDoc({
    id: 66,
    title: "Electric Book Works course notes: Poetry",
    content: "Poetry Basic poetry markdown Advanced poetry markdown Basic poetry markdownEncoding poetry can be tricky. Usually, poetry in HTML is structured by tagging each stanza as a paragraph, with line breaks after each line. You can do this by adding markdown line breaks (with double spaces or \\ at the end of each line) and tagging the paragraph with {:.verse}. However, this structure meaks it impossible to have browsers, ereaders and PDF engines correctly indent runover lines (because there is no nth-line selector in CSS, unless you resort to a Javascript method that will bloat your code and won’t run on many ereaders). Tech note: Some text and code editors (e.g. Atom) strip out spaces at the ends of lines automatically. So use \\ for line breaks, not double-spaces. We prefer another approach: the poem is an unordered list (ul) and each line (including each blank line between stanzas) is a list item (li). We just hide any list markers (bullets) with list-style-type: none. This way, we can control indents on runover lines. This is a non-semantic use of HTML, since a poem is technically not a list. But it’s a healthy hack with universal browser and ereader support.Our convention is to mark each line of a stanza with a hyphen -, and tag the list with {:.verse}:- I wandered lonely as a cloud - That floats on high o'er vales and hills, - When all at once I saw a crowd, - A host, of golden daffodils; - Beside the lake, beneath the trees, - Fluttering and dancing in the breeze. {:.verse} We can also indent individual lines, where the poet wanted indents, by tagging individual list items.- Alas for man! day after day may rise, - {:.indent-3}Night may shade his thankless head, - He sees no God in the bright, morning skies - {:.indent-3}He sings no praises from his guarded bed. {:.verse} The 2 in {:.indent-2} refers to the number of em spaces to indent by. Our CSS allows for indents from 1 ({:.indent-1}) to 30 ({:.indent-30}).(Big gaps between words in a line must be created with &emsp; in the poem text.) Advanced poetry markdownBut wait, there’s more! Best practice for poetry layout is that – in print – a poem should be centered on its longest line. That is not centering the lines of poetry, but placing the left-justified poem in the horizontal middle of the page. Put another way, the poem should be indented till its longest line is centered on the page.To achieve this, put the entire poem, including its title, in a blockquote, by adding > to the start of each line. Tag the whole blockquote as {:.verse}, too. Finally, decide how wide you want the poem to be as a percentage of the page. That is, if you reckon this poem’s longest line reaches across 90 per cent of the page, use .width-90.> - ### To One Who Has Been Long in City Pent > - To one who has been long in city pent, > - {:.indent-2}'Tis very sweet to look into the fair > - {:.indent-2}And open face of heaven,—to breathe a prayer > - Full in the smile of the blue firmament. > - Who is more happy, when, with heart's content, > - {:.indent-2}Fatigued he sinks into some pleasant lair > - {:.indent-2}Of wavy grass, and reads a debonair > - And gentle tale of love and languishment? > - > - Returning home at evening, with an ear > - {:.indent-2}Catching the notes of Philomel,—an eye > - Watching the sailing cloudlet's bright career, > - {:.indent-2}He mourns that day so soon has glided by: > - E'en like the passage of an angel's tear > - {:.indent-2}That falls through the clear ether silently. > {:.verse} {:.verse .width-90} In verse structured as a list like this, our CSS preserves white space. That is, if you type, say, three spaces you get three spaces. Normally, HTML collapses multiple spaces into one – which is great except when you want to deliberately use extra spaces, as some poets do. However, this doesn’t work at the start of lines, where markdown strips leading spaces. There you must use HTML space entities (like &emsp;) or our indent tags explained above.However, the whitespace: pre-wrap CSS we use for this is not currently supported on Kindle. If that’s important, it’s best to stick to using HTML space entities like &emsp;."
});
index.addDoc({
    id: 67,
    title: "Electric Book Works course notes: Tables",
    content: "Tables Complex tables with HTML Table captions Kramdown (and most markdown variants) can only handle very simple tables. For these you can create the Markdown layout manually. See the chapter on markdown for guidance on formatting simple tables. You can also use online tools to convert tables into a markdown format. Senseful. For instance, working from InDesign: Click and drag over some cells in the InDesign table (not the header row). Then Ctrl+A to select the whole table. Ctrl+C to copy, then paste into a blank spreadsheet. Select all the relevant cells in your spreadsheet, and copy. The table text is now on your clipboard, with the cells separated by tabs. Paste into the online Format Text as Table Input field. Click ‘Create Table’. (The default settings are usually fine. Play with them only if you need to.) Copy the Output and paste it into your markdown file. Ascii Table: Paste tab-delimited table text Select ‘GitHub Markdown’ for the output style Copy the resulting plain-text table into your markdown. Table formatting in markdown can differ between flavours of markdown. You may need to tweak it. For instance, Senseful starts some table borders with + where kramdown needs a |. In that case, manually change the starting + in any row with a |. Complex tables with HTMLFor complex tables – anything with merged cells, for instance – you must create an HTML table and paste that HTML (from <table> to </table>) into your markdown files. It’s easiest to use a WYSIWYG HTML editor. For instance, Dreamweaver lets us paste a table from a formatted source like Word or LibreOffice, and then clean up the HTML easily before pasting the whole <table> element into our markdown document. Table captionsIn markdown, add {:.table-caption} in the line immediately after a table caption paragraph. This applies the class table-caption to the paragraph, which the theme can style. For instance, in the Classic theme print.css avoids a page break after the caption, before the table. (According to publishing best-practice, table captions must always appear above tables, not after them.)"
});
index.addDoc({
    id: 68,
    title: "Electric Book Works course notes: Video",
    content: "Embedding video You can include any iframe in markdown to embed a video. We’ve created a simple way to embed YouTube videos and have them look consistent across your web version. Find the video’s YouTube ID: a code in the URL that looks like this: MqlyxZiDoOA In the markdown, use the ID in this tag: {% include youtube id=''MqlyxZiDoOA'' %} This will embed the video in an iframe. (In epub output, you can replace it with a link to watch the video online.) Note: Our default iframe code gives the iframe a .non-printing class, so that your theme can hide the video from the PDF edition. For now, this only works with YouTube. If you’re embedding from any other service, instead of using our include tags: use their standard embed iframe try to select a width of around 850 px add style=''max-width: 100%;'' and class=''non-printing'' to the iframe tag."
});
index.addDoc({
    id: 69,
    title: "Electric Book Works course notes: Adding image files",
    content: "Adding image files Our template comes with four folders for images, which correspond to output formats: print-pdf, screen-pdf, web, epub and app. Images files must be saved there. Each folder should contain the same set of images, saved appropriately for each format. For instance, while their file names must be identical, web images might be full-colour, 96dpi, and up to 800 pixels wide; while print-pdf images might be in greyscale, 300dpi and 2400 pixels wide. This can be a lot of work! So it’s best to store large master versions of your images in the images/_source folder for each book and then automate their conversion to the output format folders. For how to do this, see Automating image conversions."
});
index.addDoc({
    id: 70,
    title: "Electric Book Works course notes: External media",
    content: "External media Setting external-media paths Structuring external-media files Epub and app output Translations Local media Setting a filesystem path Setting a local URL If a large number of images makes your project too big, you can store your images in a separate repo and serve them on a separate server for PDF and web output. There is a template repo for external media at github.com/electricbookworks/electric-book-media. Setting external-media pathsYou set the full URL for the remote-media location in _data/settings.yml. The remote-media paths must be full URLs. For example:remote-media: live: ''http://media.superpotatoes.com'' development: ''http://dev.superpotatoes.com/media'' To disable external media, just comment out the relevant settings or leave the values blank:remote-media: live: '''' development: '''' Structuring external-media filesAt the remote-media domain, the paths to media should match the paths to that media in this project.For example, if a project called superpotatoes contains two books, mondial and fabula, the remote-media URL might be http://media.superpotatoes.com. And on that media server, web images would be stored in http://media.superpotatoes.com/mondial/images/web and http://media.superpotatoes.com/fabula/images/web.Images inserted by CSS (e.g. background-image files) cannot be in external media, because their paths are fixed in CSS. So do not move these to the external media location. Epub and app outputExternal media does not work for app or epub output. For apps with enough images to warrant external media, it’s recommended that you use a separate Cordova-based repo for your app, into the www folder of which which you simply copy-paste your app-ready HTML. TranslationsWhen using remote-media, translations must have their own image files in their translation subdirectories (e.g. http://superpotatoes.com/mondial/fr/images/web). That is, unlike local images they cannot inherit their parent language’s images in the absence of their own images folder. Local mediaRemote media works well for web output, but it means you have to be online, and can make PDF output very slow, because Prince has to fetch every image over the Internet. For faster PDF output you can tell the system to use images on your local machine instead by setting a local-media path, in addition to remote-media.When a local-media path is set, PDF outputs will use that path to images, so that Prince does not have to fetch every image over the Internet.The local-media path can be set in two ways: As a path on your computer’s filesystem, relative to the _site folder. As a URL served locally, by a webserver running on your machine. Setting a filesystem pathA relative filesystem path might look like this:local-media: live: ''../../superpotatoes-media'' development: ''../../superpotatoes-media'' (Currently, the live local-media path is not used; but this might change in future. For example, the Electric Book Manager may use the live setting in future. So we recommend setting both for now.)Note: The development build is the default build type. A live build only really applies to web builds. We set build: live in _config.live.yml, which is generally only used for building live website packages.We recommend that you store your local copy of the external-media directory alongside the main project repo directory, to make the filesystem path to the local images simple.To use external media from a directory alongside the main project repo, then, you would write the path to go up two levels (../../) and into the external media directory, as shown above.Setting a local URLWeb output cannot use a relative filesystem path, because a webserver cannot see outside of its own root directory on your filesystem.So you can use a webserver running on your own machine for offline development, e.g.local-media: development: ''http://localhost:5000'' If you use the electric-book-media template for your external media repo, the OS-specific run- scripts there will launch a local server running at that address. You can run it at the same time as your local Jekyll instance of your book project."
});
index.addDoc({
    id: 71,
    title: "Electric Book Works course notes: Automating image conversions",
    content: "Automating image conversions Using the output script Using gulp directly You can automate the conversion of images to various outputs. Then you only need to put high-res versions of your images in images/_source and run the automatic conversion to populate the images for all output formats. This will automatically optimise, convert and save your images to the output folders, including specifying the correct colour profiles and creating multiple image sizes for web output. Note: To do this on your computer, you need to have npm installed, and to have run npm install in the project root to install the node_modules. This can be done easily by running the ‘Update and install dependencies’ option in the run- output script for your operating system. Using the output scriptRun the run- output script for your operating system, then choose ‘Convert source images to output formats’ and answer the prompts. Using gulp directlyInstead of using the output script, you can also use gulp directly from the command line.By default, gulp will convert the images in your book/images/_source folder. To convert the images in a different book folder’s images/_source, say for my-potato-book:gulp --book my-potato-book If you’re processing image files in a translation subdirectory, specify the language by its code. E.g.:gulp --language fr You can also combine these:gulp --book my-potato-book --language fr"
});
index.addDoc({
    id: 72,
    title: "Electric Book Works course notes: Preparing images",
    content: "Preparing images Illustrator vs Inkscape Resolution Image styles Cover images We recommend consistently using JPG (saving large versions in the _source images folder and using automated image conversion to create versions in print-pdf, screen-pdf, web, app and epub) or SVG. We recommend JPG over GIF or PNG. One reason is that transparency (which JPG does not support) seems like a good idea until your end-user switches their e-reader to ‘night mode’, and your black line-art disappears into the background. More importantly, if you’re creating a print edition, PNG cannot work with CMYK color spaces. For some books we use SVG so that they scale beautifully but also remain small in file-size for web use. Note that if you’re deliberately going to create EPUB2, that standard does not support SVG and you may need to use EPUB3. Ensure that raster images, or raster/bitmap elements in SVG, are high-res enough for printing (e.g. 300dpi at full size). Illustrator vs Inkscape Different SVG editors treat image size differently. For instance, a 2-inch-wide image in Illustrator will appear 1.6 inches wide in Prince and Inkscape. Why? Because when creating the SVG’s XML, Illustrator includes its dimensions in pixels, and assumes a 72dpi resolution, where Prince and Inkscape follow the W3C SVG spec and assume 90dpi. As a result, images coming out of Illustrator always appear 80% of their intended size. So, if you’re creating images in Illustrator, set your image sizes to 125% of what you intend to appear in the book. That means: Check out Adobe’s guidance on saving SVGs. If your SVG files seem too big, read up on optimising SVGs, and/or (if you’re comfortable using Python scripts) run your SVGs through Scour. Resolution For SVG images, note that the editor you use will determine underlying resolution. Illustrator uses 72dpi, and Inkscape 90dpi. We favour and assume 90dpi, but can rescale SVG images with our stylesheets just in case. For JPGs, we often use 300dpi and image quality of 100%/12/maximum for _source images. Our automated image conversion then provides for excellent print quality while keeping file sizes sensible for screen delivery. Note: To get a 200dpi JPG that is 115 mm wide, the image must be 906 pixels wide. (115mm is 4.53 inches, which contains 906 pixels at 200 pixels per inch, aka 200 dpi.) Try to keep non-print-pdf JPG file sizes below 127KB: Amazon Kindle may automatically downsample images above that, and it’s better if you control the downsampling for quality than let their servers do it. However, for raster-only images (e.g. x-rays or photos) if a larger size is required for acceptable print quality then larger is fine. Image styles We like these approaches to artwork, where possible: Use the same font and size for all labels Fit artboards to artwork bounds; there should be no white space around the art in an image. (Control space with CSS styling.) Cover images Save the front-cover image as cover.jpg."
});
index.addDoc({
    id: 73,
    title: "Electric Book Works course notes: Electric Book documentation",
    content: "Electric Book documentation Quick start These docs explain how to set up the Electric Book template, how to edit book files, and how to output books. The template includes these docs, which you can turn off in _config.yml. If you are using the Electric Book Manager, you may also need the Electric Book Manager documentation. These docs are a work in progress, and not everything is documented yet. You can contribute on GitHub, or let us know about problems by logging issues. About About the EBW Technical overview Setup Quick start Settings Project metadata Navigation and TOCs File lists Translations Variants Upgrading a project Editing Markdown Content tags (classes) Figures Tables Images Footnotes, endnotes and sidenotes Hyphenation Mathematics Poetry Indexes Video Multiple-choice questions Images Adding image files Automating image conversions External media Preparing images Layout Design Page numbers Web and app pagination Web and app content accordion Colour profiles Output Web output PDF output Epub output App output Word output Advanced Using Javascript Troubleshooting Troubleshooting and tips"
});
index.addDoc({
    id: 74,
    title: "Electric Book Works course notes: Colour profiles",
    content: "Colour profiles Just as different people see colours differently, different machines display or print colours differently. We manage this variation with colour profiles: computer-readable files (usually with a .icc file extension) that define how a machine should process the colours in a document. For good printing and display, it’s important to use profiles so that colours don’t vary among machines and printers. We use colour profiles in two places: When converting images. When generating PDFs. The template provides a number of profiles for different uses. They are in _tools/profiles, where you can add your own profiles, too. The profiles then used for automated image conversion are named in gulpfile.js. It takes technical know-how to edit a Gulp file, but you can find the .icc filenames in the existing Gulp file and carefully change them if you need to. You can change the profile for a PDF in a book’s styles/print-pdf.scss and styles/screen-pdf.scss files. In high-end colour printing (e.g. photography or graphics arts), colour profiles should be discussed with your printer. The printer should provide a colour profile file suited specifically to your project and the printing press they will use to print it. When printing in black and white, the darkness or lightness of images can be heavily influenced by the colour profile used. Here it is also a good idea to get an .icc file from your printer that’s designed to be used with their particular press or digital printer. That said, the profiles included here should be suitable for most uses: The PSO profiles are provided by eci.org. The sRGB profile is from color.org. The grey profiles were provided kindly by digitaldistributors.co.za. sRGB_v4_ICC_preference_displayclass.icc is for images and documents to be viewed on screens. Avoid using it for print PDF output. PSOcoated_v3.icc is for printing in full colour on coated paper. PSOuncoated_v3_FOGRA52.icc is for printing in full colour on uncoated paper. Grey_Fogra39L.icc is for printing in black and white. It follows ISO Curve B as per ISO 12647-2:2007 (M0 measurement condition). Grey_Fogra52L.icc is also for printing in black and white, and is newer than Fogra 39. It follows ISO Curve A as per ISO 12647-2:2013 (M1 measurement condition)."
});
index.addDoc({
    id: 75,
    title: "Electric Book Works course notes: Web and app content accordion",
    content: "Web and app content accordion Activating the content accordion Setting the accordion heading level A book chapter can be much too long for reasonable reading on screen. Also, a chapter might contain many images, and downloading them all every time you read just part of the chapter could use up a lot of a user’s data. For these reasons, you can turn on a content accordion for web and app pages. The content accordion breaks up your page into sections, and collapses them, showing only each section’s heading. To open or close a section, a user just clicks on the heading (or the toggle icon beside it). In addition, images in figures will only load when a section is opened. This way, if a user doesn’t open a given section, their device won’t download it, saving them data. The content accordion only works in chapter files (i.e. markdown files that do not have a style set in their YAML frontmatter, or have it set to something other than chapter, such as frontmatter). Activating the content accordionTo turn on the content accordion, change the value of accordion in _data.settings.yml to true: accordion: true This is set separately for web and app outputs. So you’ll find in settings.yml that you can set accordion in two places. Setting the accordion heading levelBy default, the content accordion collapses on h2s. You can change this in the // Options section of assets/js/accordion.js. For instance, to set the accordion to collapse on third-level headings, change:var accordionHeads = '#content h2' tovar accordionHeads = '#content h3' You should also set which accordion section should open by default, if a user comes to a chapter without selecting an accordion. The default setting opens the first h2 by default:var defaultAccordionHead = '#content h2:first-of-type' You can change h2 to h3 here, for instance, or just leave it blank to not set a default, in which case all accordions will be closed when a user comes to a chapter without selecting an accordion:var defaultAccordionHead = ''"
});
index.addDoc({
    id: 76,
    title: "Electric Book Works course notes: Design",
    content: "Design books The design of your books is created in CSS stylesheets. These are written in a syntaxes called CSS or Sass. Each output format has a dedicated stylesheet: print-pdf.scss screen-pdf.scss web.scss epub.scss app.scss Some aspects of design are easy for non-technical users to change. Some advanced design features need to be coded by an experienced CSS developer. Each project comes with a library of predefined styles. Then each book’s styles can build on or override the predefined project styles. By default, you cannot edit the project’s predefined styles in the Electric Book Manager. Technical note: files that non-technical users need not see in the EBM, such as advanced technical files, are hidden by adding them to the ignore list in /_prose.yml. These are hidden in the EBM with display: none; so they can be revealed by turning off display: none with a browser’s Inspect tools. To edit a book’s styles: From the editor, click on the .scss file for the output format that you want to edit. For example, for print-PDF styles for the book directory, edit book/styles/print-pdf.scss. Many of a book’s design features are set as variables, which start with $ signs. E.g. $page-width. Change the values you see there for each variable as needed. For instance, you can easily edit variables that set page size, colours, running heads, and so on. If you know how to write CSS or Sass, add your own custom CSS at the bottom of the .scss file. Output the relevant format to see how your changes look. If the output fails, you may have used invalid CSS or Sass syntax. For more on editing Sass, see sass-lang.com/guide."
});
index.addDoc({
    id: 77,
    title: "Electric Book Works course notes: Page numbers",
    content: "Page numbers In print output in the Classic theme, the YAML header’s style setting determines how the pages are numbered: all book parts set to style: frontmatter have roman-numeral page numbers; all book parts set to style: chapter (or, since that’s the default fallback, all those without a style setting) have decimal page numbers; other book parts (e.g. style: copyright-page) have no page numbers (nor any other headers and footers). So if you use frontmatter on a book-part (e.g. for a preface, foreword or acknowledgements section), by default it will have roman-numeral page numbers. And when the first chapter starts, that chapter will have decimal page numbers. However, the page numbering will increment consecutively from roman to decimal, unless you tell PrinceXML to start from 1 at the first chapter. That is, ‘ix, x, 11, 12’. To reset the numbering to 1 at the start of the relevant chapter, you have two options: Add the page class .page-1 to the first element (e.g. the first heading) of the first chapter. In markdown, you do that with the tag {:.page-1} in the line immediately after the heading. This only works if that element is not set to float in the CSS. (That is, the element must appear in the normal flow of text.) Add page-1 to the style YAML setting, in addition to specifying chapter, not overriding it. That is, the first chapter in your book should have the YAML style set as: style: chapter page-1."
});
index.addDoc({
    id: 78,
    title: "Electric Book Works course notes: Web and app pagination",
    content: "Web and app pagination Your web or app outputs may need links on each page to the next or previous pages. For instance, in a novel users will want to click to the next chapter when they finish a chapter. This is call pagination. It only applies to web and app outputs (not epub or PDF). Pagination is created by the pagination include, which adds previous and next links. So you can manually add pagination links anywhere by using the tag {% include pagination %}, but this is already included by default in all web and app outputs already, at the end of the page. By default, pagination is added at the end of book files (in the default layout). It can be turned off in settings.yml in the pagination section of web and app settings. The pagination format can also be changed there to use ‘Next’ and ‘Previous’, to use page titles, or to use arrows. Arrows are the default. By adding a ‘direction’ parameter to the include tag, you can show only previous or next links. E.g. {% include pagination direction=''next'' %} will only output ‘next’ links. The order of pagination is determined by the files list for each format in meta.yml."
});
index.addDoc({
    id: 79,
    title: "Electric Book Works course notes: Multiple-choice questions",
    content: "Multiple-choice questions Each questions is stored in its own file (alongside the book’s other content files), and added to the body text with an include tag: {% include question file=''question-03-04'' %} The question file should have this layout: --- correct: 1, 4 --- ### A question title Which of the following is true? - You should not pick a fight with a Wookiee. - Picking fights with Wookiees is safe. - Wookiees love being laughed at. - Wookiees make loyal companions. {:.mcq-options} * Wookiees can tear your arm off. * Wookiees don't shy away from a fight. * Wookiees are proud and sensitive. * Wookiees have been known to stick by their friends even in the worst circumstances. {:.mcq-feedback} You can have more than one correct answer. Note: The list of answer options has the class .mcq-options. The list of feedback, in order to relate the the answer options, has the class .mcq-feedback. If you have a regular list, too, immediately before one of these lists, separate it with a ^, which is a kramdown end-of-block marker. It tells kramdown the two lists above and below it are not one list."
});
index.addDoc({
    id: 80,
    title: "Electric Book Works course notes: App output",
    content: "App output Run the template’s run- script for your operating system and follow the prompts. For these to work, you must already have Jekyll installed and working. On Windows, run run-windows.bat by double-clicking it from your file explorer. On Linux, run run-linux.sh. You may have to run it from a terminal, and first enter chmod +x run-linux.sh to give it permissions, then ./run-linux.sh. On Mac OSX, double-click run-mac.command in Finder. You may need to give the file permission to run first. To do this, in a Terminal in the same folder as the script, type chmod +x run-mac.command. App output is still experimental. It requires that you have Apache Cordova installed, and Android Studio (for Android apps), X Code (for iOS apps) or Visual Studio (for Windows apps)."
});
index.addDoc({
    id: 81,
    title: "Electric Book Works course notes: Epub output",
    content: "Epub output Package files Metadata and settings Fonts Javascript Validation How epubs are generated Legacy methods Recommended tools Quick-epub process checklist Run the script Assembling the epub Splitting large files Mobi conversion EPUB3 conversion Adding iBooks display-options file You can create an epub by running the output script for your OS and choosing the epub option. Before that will work, though, your project must be prepared correctly. Package files The template comes with package.opf and toc.ncx files in the book and samples folders. For epub output, every book you create should have at least the package.opf file in its directory. The toc.ncx is for backwards compatibility with older epub readers, and so some vendors require it. If you’re creatnig translations, you also need these files in the translation directory (e.g. at great-expectations/fr/package.opf). There is an example in the template’s samples book directory. Metadata and settings Your epub will build correctly only if you have provided sufficient, accurate information about it in _data/meta.yml. You may also need to adjust some epub settings in _data/settings.yml. File list: you must list all the files to be included in your epub in the epub files section of meta.yml. Optionally, add guide names to key files in that list, e.g. ''0-0-cover'': ''cover''. There must be a nav section in meta.yml that points to at least one of your epub’s files. For epubs, every item in the nav must include a file (unlike web output, where label-only items are allowed). To tell the epub package where to find navigation, you must either: Define the epub’s contents-page item, as the content file that contains {% include toc %}, e.g. - contents-page: ''0-3-contents'', and/or Add the guide name ''toc'' to the relevant file in the files list (e.g. - ''0-3-contents'': ''toc''). Since EPUB3 requires a nav element, it is mandatory to include {% include toc %} somewhere in your book, even if it’s a file, listed at the end of your epub files list, that contains only: --- --- {% include toc %} If your epub must not include a visible table of contents in its pages (e.g. for a novel with no chapter headings), you can hide it visually by setting hide-nav: true in the epub section of settings.yml. If you’re using a toc.ncx file for backwards compatibility with old ereaders, you have to be especially careful with how you construct your epub toc tree in meta.yml. In an NCX, you cannot have two items in nav pointing to the same target. So in your epub toc in meta.yml, you can’t have two items with the same file and id. To differentiate them, you add an id pointing to, say, a heading in the document to differentiate one target in the same file from another. Also, in an NCX, every item must include a link. So if an item in your toc has no link, and only children items, then in the toc.ncx the Electric Book will create a link for it. It will use the file (without the id) of its first child. So, to ensure that you don’t get duplicate links, you must add an id to that first child. This way, the parent will point to the file, and the first child item will point to the file + id. Fonts To embed fonts in an epub: add the font files to _epub/fonts; list the font files in _data/settings.yml at epub-fonts. Javascript Add any scripts to _epub/js. See the Javascript section for more detail. Validation If you want the output script to run EpubCheck (recommended), download it from the IDPF. On Windows, extract the zip file and save the contents somewhere easy to find, like C:\EpubCheck\. Then add that folder to your PATH. On Mac or Linux, extract the zip file and save the contents somewhere sensible like /usr/local/bin. The output script will ask for the path to the EpubCheck .jar file. How epubs are generated This is technical background on how we generate Electric Book epubs. It’s a two-step process. In Jekyll, using an epub config file (_configs/_config.epub.yml), we generate: the books, with each translation in a subfolder. Each book and translation has a package.opf file. an epub folder (as a Jekyll collection) containing a boilerplate META-INF folder, mimetype file, and mathjax folder; and optional js and fonts folders. In our output script: We copy the relevant book or translation folders from _site/book (or whatever folder book has been renamed to) into _site/epub. We retain the subdirectory structure of translations, except for the package.opf, which goes to the root of epub. We zip the contents of epub to _output/book.zip (where book may be a renamed book folder), and change the file extension to .epub The output script does a lot of work. It asks the user some questions, it has to check for the existence of files (e.g. styles in a translation, which are optional), and it removes the mathjax folder from epub if mathjax is not included. Legacy methods Before we generated finished epubs from the Electric Book template’s output script, we generated only ‘epub-ready’ HTML, and assembled finished epubs in Sigil. The following guidance is only for that approach. Recommended tools In addition to Sigil, we recommend installing the following tools: The FlightCrew Sigil plugin for checking for epub errors. The AddiBooksXML Sigil plugin for defining iBooks font options. The EPUB3-itizer Sigil plugin for converting from EPUB2 to EPUB3. The Pagina EPUB-Checker. Quick-epub process checklist Here’s a handy checklist for assembling an epub in Sigil. Below, each step is explained in more detail. Run the output script for your OS (e.g. run-windows.bat or run-mac.command) and choose the epub option. Open first file. File > Open… and select the first HTML file in _site/book/text. (The output script tries to do this for you.) Fix image path. Fix the path to cover image file in cover HTML. Add book files. Right-click the Text folder > Add Existing Files… and select the remaining HTML files for the epub. If this doesn’t automatically add the epub.css file, right-click the Text or Styles folder > Add Existing Files… and select the epub’s CSS file from _site/book/styles. Generate TOC. Tools > Table Of Contents > Generate Table Of Contents Add cover to TOC. Optionally, add the cover HTML to generated TOC with the TOC editor. If outputting EPUB3: Change .html to .xhtml.Rename all files .html to .xhtml (select files > Rename > enter only .xhtml in replace box). Convert to EPUB3 using the EPUB3-itizer plugin. Close current EPUB2. Open newly saved EPUB3. Add iBooks XML with AddiBooksXML plugin. Optional. Hide generated in-book TOC by adding a hidden='''' attribute to the nav element in nav.xhtml: <nav epub:type=''toc'' id=''toc'' hidden=''''>. Optional. Add file metadata semantics (right-click HTML files > Add Semantics…) Define cover image. Right-click the cover JPG and select Cover Image. Save, and validate with the Flightcrew plugin and separately with EPUBCheck. Depending on your needs, you may also need to: search-and-replace for SVG images, footnotes, or video, if you need EPUB2; add font files if you’re embedding fonts; split large files (as described below). Then test: Validate with epubcheck. Open in Adobe Digital Editions and do a visual check. Open in Kindle Previewer (and/or run the epub through KindleGen). The following sections go into more detail. Run the script Run the output script for our OS (e.g. run-windows.bat or run-mac.command) and choose the epub option. Then from Sigil, open the 0-0-cover.html file in _site/book/text. That will import book metadata, and you can then assemble the epub in Sigil. Note: To get the metadata to import to Sigil, you must open one of your book’s HTML files in Sigil (the cover is best, since it’s the first file). That is, don’t ‘Add Existing Files…’ to a new, blank epub. Only by opening a single HTML file (as in ‘File > Open…’, then select the HTML file) will Sigil read and import the file’s Dublin Core metadata. After that, you can add the remaining files in Sigil using ‘Add Existing Files…’. Assembling the epub Put the HTML files from _site into your Text folder. If it’s not automatically imported, put the finished epub.css (from your book’s styles folder in _site) into your Sigil Styles folder. (Our epub.css file is not the same as web.css. It does not link to font files and avoids CSS3 features, like @fontface, some pseudo classes and media queries, to work better with popular readers with poor or buggy CSS support, such as Adobe Digital Editions.) Replace any SVG images in the Images folder with JPG equivalents, if you’re assembling EPUB2. And, if so search-and-replace any links to .svg in your HTML files with .jpg. Copy any fonts into the Fonts folder, if you want them embedded. (If you don’t want to embed fonts, remove any @font-face rules from your stylesheet to avoid file-not-found validation errors. We don’t recommend embedding fonts unless they are required for meaning or unusual character sets.) Remove videos in iframes (iframes are invalid in EPUB2 XHTML 1.1). We recommend replacing videos with a link to an online version, e.g. to a YouTube page. This is best done manually. Search for videowrapper to find instances of embedded videos. For example, to replace the standard video wrapper with a link to the video, you might: Search (with DotAll regex) for: (?s).<div class=''videowrapper non-printing''>(.*)src=''(.*?)''(.*)</div>(.*?)<!--.videowrapper--> This will find the videowrapper and store the URL of the embedded video in memory. Replace with <a href=''\2'' class=''button''>Watch</a> This will replace the entire wrapper with a link to the same iframe URL it memorised (at \2). Replace Watch with whatever phrase you want to be the clickable text. If your book includes endnotes (kramdown footnotes), replace fnref: with fnref- and fn: with fn-. ( Background: If you have a colon in any element ID – for instance if you’ve used kramdown’s footnote syntax – EpubCheck will return an ‘invalid NCName’ error. You need to replace those colons with another character. If your invalid IDs follow a set pattern (as kramdown’s footnote references do), you can replace-all quickly.) Check your epub’s metadata using Sigil’s Metadata Editor, and edit if necessary. Include at least: title: subtitle author date of creation publisher ISBN (or other identifier like a UUID) Relation ISBN (if any; we use the print ISBN as a parent ISBN) Add file semantics (right click the file name in Sigil for the semantics context menu) to: key HTML files the cover JPG. Generate the epub’s table of contents (Tools > Table Of Contents…). This TOC is generated only from the headings (h1 to h6) in the text. So it does not include the cover, which has no heading, or any other files without a heading (e.g. sometimes the copyright page). If you need to add a cover to the TOC: Go to Tools > Table Of Contents > Edit Table Of Contents… Click on the first entry in the TOC list. Click ‘Add Above’. Click ‘Select Target’ and select the cover HTML file (usually 0-0-cover.html). In the blank space under ‘TOC Entry’, double-click and type ‘Cover’. Click Okay. Use the same process for adding any other files you need to add to the TOC. If fonts are important (you’ve either embedded fonts or the difference between serif and sans-serif is semantically significant), add iBooks XML. (See below for detail.) Validate the epub in Sigil and fix any validation errors. Sigil let’s some things past that EpubCheck flags, so also validate with EpubCheck directly. You can use: the IDPF’s online version of EpubCheck epubcheck installed locally, and run from the command line; or pagina EPUB-Checker. Tip: If you get validation errors about images, check that your paths to images are correct and case-sensitive. For instance, Sigil needs images to be in Images not images. For general guidance on creating epubs with Sigil, check out EBW’s training material and the Sigil user guide. Splitting large files If you have very large text files that, in the epub output, you’d like to split up into separate HTML files, Sigil can help. Using this tag in HTML, you can mark where Sigil must split your HTML file(s): <hr class=''sigil_split_marker'' /> To create that in markdown, use a three-asterisk divider with a sigil_split_marker class, like this: *** {:.sigil_split_marker} Also, remember to hide those markers in print output (and web and elsewhere as needed) with this in your CSS: .sigil_split_marker { display: none; } Then, when you’re assembling the epub in Sigil, just run Edit > Split At Markers. Sigil will then split the HTML file into separate HTML files at the markers, and remove the <hr> element. A common use case for this is books with end-of-book endnotes. To create end-of-book endnotes using kramdown footnotes you must put all content with endnotes in one markdown (and therefore HTML) file. This file is too large for sensible epub use, so splitting is important. Sigil is smart enough to update your internal links when you run ‘Split At Markers’. NB: Before running Split At Markers: save, close, and reopen your epub. At least till Sigil 0.9.3, there is an issue with updating internal links when using Split At Markers. In order for internal links to update correctly, Sigil must first have rewritten all link paths to HTML files according to its ../Text/ folder structure (e.g. the links to chapters in a Table of Contents file). Sigil only rewrites all these paths when an epub file is opened. So to make sure links are updated when running Split At Markers, you need to save, close, and reopen the epub first. This may be fixed from Sigil 0.9.5. Mobi conversion These days, you should not need to create a mobi file for Amazon. It’s better to upload an epub and let Amazon convert it. This is largely because Amazon will convert to several formats for different user devices, and it’s best that Amazon has your original epub to convert from. If you really do need a mobi file, we recommend putting your EPUB into the Kindle Previewer, which automatically converts to mobi using Kindlegen and saves the mobi file to a folder beside your epub. If Previewer cannot convert the epub, we’ve found that adding it to Calibre first, then (without converting) give Calibre’s version to Kindle Previewer. Calibre gives you greater control over specific ebook conversions, but we’ve found Kindle Previewer converts some CSS better (e.g. floats and borders). If you need to dig into a mobi file’s code to troubleshoot, try the KindleUnpack plugin for Calibre. EPUB3 conversion To convert an EPUB2 to EPUB3 in Sigil, use Kevin Hendricks’ EPUB3-itizer plugin. Note that EPUB3 prefers all files to have .xhtml filename extensions, while Jekyll uses .html. So, before you run the EPUB3-itizer: In Sigil’s BookBrowser window select all .html files Right click on your selection and select Rename In the “Rename Files Starting At” dialog, remove everything and replace it with .xhtml and click “OK”. When adding file semantics, we have found that setting cover.jpg to ‘Cover image’ (i.e. adding <meta content=''cover.jpg'' name=''cover'' /> to content.opf) can cause KindleGen to crash when converting to Amazon formats. So you may want to avoid this setting for the cover image file. Adding iBooks display-options file Some ereaders (such as iBooks) need to be told explicitly to respect your serif/sans-serif font choices and other settings. This is done with as com.apple.ibooks.display-options.xml file. If you need to add the com.apple.ibooks.display-options.xml file to your epub for iBooks display options, you can use the AddiBooksXML plugin in Sigil. A very basic display-options file contains this XML: <?xml version=''1.0'' encoding=''UTF-8''?> <display_options> <platform name=''*''> <option name=''specified-fonts''>true</option> <option name=''interactive''>false</option> <option name=''fixed-layout''>false</option> <option name=''open-to-spread''>false</option> <option name=''orientation-lock''>none</option> </platform> </display_options> The file should be in the epub’s META-INF folder, which Sigil does not let you edit by default, hence the need for the plugin. To install the plugin: Download the zip file. In Sigil, go to Plugins > Manage Plugins. Click Add Plugin and locate and select the zip file you downloaded. To use the plugin: First, in a plain-text/code editor create an com.apple.ibooks.display-options.xml file containing only the XML shown above. If necessary, change the five options settings in it. Save the XML file with your source material for the book for future use/reference. In Sigil, with the epub open, go to Plugins > Edit > AddiBooksXML and find and select the com.apple.ibooks.display-options.xml file you just created."
});
index.addDoc({
    id: 82,
    title: "Electric Book Works course notes: PDF output",
    content: "Print output Introduction Quick output Lightning Source output Refining print layout Faster print refinement Technical background: The output-to-PDF process Introduction We use PrinceXML to turn Jekyll’s HTML into beautiful, print-ready book files. We haven’t found anything as good as Prince, so we reckon it’s worth its price tag. And you can use the trial version to get your print output perfect before committing to the price. So our CSS files for print are designed specifically for Prince. You can output print PDFs for sending to high-end printers, or screen PDFs, for digital distribution and reading on screen. Quick output Run the template’s run- output script for your operating system, and follow the prompts. For these to work, you must already have Jekyll and Prince installed and working. On Windows, run run-windows.bat by double-clicking it from your file explorer. On Linux, run run-linux.sh. You may have to run it from a terminal, and first enter chmod +x run-linux.sh to give it permissions, then ./run-linux.sh. On Mac OSX, double-click run-mac.command in Finder. You may need to give the file permission to run first. To do this, in a Terminal in the same folder as the script, type chmod +x run-mac.command. Lightning Source output We often have to create print PDFs for Lightning Source and similar print-on-demand providers. Their needs are unusual and specific. In most cases, you can get a Lightning Source-compatible PDF by turning on the Lightning Source setting in your book’s print-pdf.scss file: $print-page-setup-lightning-source: true; This is set off (false) by default. This setting: removes crop marks sets bleed to 3mm makes sure page elements don’t bleed into the facing page’s bleed area. In addition, also in your book’s print-pdf.scss file, make sure your PDF profile is set to PDF/X-1a: $pdf-profile: ''PDF/X-1a:2001'' Also see the section on colour profiles. Refining print layout You will doubtless want to refine your print layout by editing your markdown and adding custom CSS to the print.scss file for your book. For instance, to save widows and orphans, you can tighten letter-spacing by adding {:.tighten-5} and {:.loosen-5} tags to the lines after paragraphs. The number in the tag refers to how many thousands of an em you’re affecting letter-spacing by. For instance, {:.tighten-10} will tighten letter-spacing by 10/1000 em. In good typography, you should avoid tightening or loosening by more than 10/1000 wherever possible. And to add manual hyphens to improve spacing, use discretionary hyphens (aka soft hyphens) by adding the HTML entity &shy; where you want the soft hyphen. Faster print refinement When refining print layout (e.g. fixing widows and orphans), this happens: You edit the markdown. Jekyll generates new HTML. You convert to PDF in Prince. You open the new PDF to see your changes. There are two main delays in this process: Jekyll can take several seconds to regenerate the entire book (even with --incremental enabled). You have to click ‘Convert’ and Prince must regenerate the file(s). If your PDF viewer locks the file you’re viewing, you have to close it before generating a new PDF in Prince. To speed this up: Temporarily stop Jekyll generating any files you aren’t working on. In _config.yml, add a line that excludes those files. In this example, we exclude the CSS folder and all the book’s chapters, and then commented out with # the file we’re working on, so that Jekyll does regenerate that one file: exclude: [ css, book-one/0-0-cover.md, book-one/0-1-half-title.md, book-one/0-2-titlepage.md, book-one/0-3-copyright.md, book-one/0-4-contents.md, # book-one/1.md, book-one/2.md, book-one/3.md, ] An exclude list can also be written as a list: exclude: - css - book-one/0-0-cover.md - book-one/0-1-half-title.md - book-one/0-2-titlepage.md - book-one/0-3-copyright.md - book-one/0-4-contents.md # - book-one/1.md - book-one/2.md - book-one/3.md And you can use wildcards. For instance, here we exclude all the prelims and the whole of book-two, but not the first chapter in book-one: exclude: - css - book-one/0* # - book-one/1* - book-one/2* - book-one/3* - book-two* We should now only pass Prince the file(s) we’re actually generating. In the files list in _data/meta.yml, comment out the lines listing files you’re not working on. If you’ve used Javascript not required for PDF, make sure it’s wrapped in a if site.output == '''' tag that doesn’t include it in print-pdf output. Use a PDF Viewer that doesn’t lock the file. On Windows, Sumatra is perfect for this, unlike Acrobat and Windows Preview, which locks the file. If you edit/regenerate a PDF it has open, Sumatra will allow that to happen and will automatically reload the new file, at the same page you had open. On Mac OSX, Preview does the same, though we’ve found it doesn’t open the regenerated file to the page you were on, sending you back to the start of the book, which is a pain. A much better alternative on OSX is Skim, an open-source PDF reader. In its Preferences > Sync, set Skim to watch for file changes and update automatically. Also set PDFs to open to the last viewed page in Preferences > General. Technical background: The output-to-PDF process When Jekyll runs, it saves your book’s HTML files in the _site folder. The output script passes a list of HTML files into Prince. This list is generated from the files list in _data.meta.yml for each PDF format, print-pdf and screen-pdf, in the order they’re listed. These should only include the files you need in the relevant PDF. For instance, you’ll usually leave out index.html. And you’ll usually only include cover for the screen PDF. Prince will use your book’s print CSS file for the design, which Jekyll creates from the print-pdf.scss or screenpdf.scss files in your book’s folder. Prince will save the PDF is creates to the _output folder. If you want to learn about using CSS to control print output using Prince, this is a great tutorial."
});
index.addDoc({
    id: 83,
    title: "Electric Book Works course notes: Web output",
    content: "Web output Using GitHub Pages Run the template’s run- script for your operating system and follow the prompts. For these to work, you must already have Jekyll installed and working. On Windows, run run-windows.bat by double-clicking it from your file explorer. On Linux, run run-linux.sh. You may have to run it from a terminal, and first enter chmod +x run-linux.sh to give it permissions, then ./run-linux.sh. On Mac OSX, double-click run-mac.command in Finder. You may need to give the file permission to run first. To do this, in a Terminal in the same folder as the script, type chmod +x run-mac.command. Using GitHub PagesIf you activate GitHub Pages in your repository settings on GitHub.com, GitHub will host your built site for free. GitHub will assign the site a URL by default that looks like username.github.io/reponame. You can then set up a custom domain name by pointing your own domain at GitHub’s servers, and putting a CNAME file containing that domain name in your project’s root directory. Our template already has a CNAME file (for electricbook.works) that you should remove or edit.See GitHub’s help docs for guidance on how to do this.In your Electric Book project, you must update the baseurl in _config.yml for this to work. If you are using a custom domain, the baseurl should be empty: baseurl: '''' If you are using the username.github.io/reponame URL that GitHub provides automatically, you must set the baseurl to the name of your repo, with a slash in front of it. E.g.: baseurl: ''/superpotatoes''. This is because your site is being served at a subdirectory-like URL, and all links in your book must be relative to that full URL. For instance, it must know that your website’s CSS is at farmerjane.github.io/superpotatoes/book/styles/web.css, and not farmerjane.github.io/book/styles/web.css."
});
index.addDoc({
    id: 84,
    title: "Electric Book Works course notes: Word output",
    content: "Word output Run the template’s run- script for your operating system and follow the prompts. For these to work, you must already have Jekyll installed and working. On Windows, run run-windows.bat by double-clicking it from your file explorer. On Linux, run run-linux.sh. You may have to run it from a terminal, and first enter chmod +x run-linux.sh to give it permissions, then ./run-linux.sh. On Mac OSX, double-click run-mac.command in Finder. You may need to give the file permission to run first. To do this, in a Terminal in the same folder as the script, type chmod +x run-mac.command. Word output is a conversion to MS Word from one of the other output formats. Our script generates your book in a format you choose (e.g. the print PDF version) and then converts the content into MS Word files. Word output requires that you have Pandoc installed."
});
index.addDoc({
    id: 85,
    title: "Electric Book Works course notes: File lists",
    content: "File lists You must define which markdown files to include in a given output in the files: section of meta.yml. For example, to add files to include in a print PDF, you can follow the example of the template: under files:, add a hyphen followed by the filename in straight double quotes. This filename is the exact name of the file as it is in your project, but without a file extension. files: - ''0-1-titlepage'' - ''0-2-copyright'' - ''0-3-contents'' - ''01'' - ''02'' Epub file lists should also contain values that describe book parts as defined by the IDPF here. E.g.: files: - ''0-0-cover'': ''cover'' - ''0-1-titlepage'': ''title-page'' - ''0-2-copyright'': ''copyright-page'' - ''0-3-contents'': ''toc'' - ''01'': ''text'' - ''02''"
});
index.addDoc({
    id: 86,
    title: "Electric Book Works course notes: Project metadata",
    content: "Project metadata The most important file in your project is meta.yml, which is in the _data folder. The meta.yml file contains all kinds of information about your project and the books in it – that is, project metadata. Before you can output your books you must make sure the meta.yml file contains the necessary information about them. For instance, you can’t output a PDF unless you’ve defined which files should be included in the PDF. The Electric Book template uses the data in meta.yml to populate and build navigation, tables of content, the parts of each book, translations, ISBNs and more. Tip: You can see the metadata generated for any given page by using the page-info include on it. Simply add this tag to any page to include an output a summary of its metadata: {% include page-info %}. YAML syntaxThe meta.yml file is written in a syntax called YAML. At its simplest, YAML is just a list of values like this:title: ''Great Expectations'' creator: ''Charles Dickens'' Importantly, you can nest information in YAML, so that information can be grouped. For example:title: ''Great Expectations'' products: print-pdf epub In YAML, indentation must be accurate and must be created with spaces, not tabs. If a YAML file contains errors in indentation (or other syntax), your project will not output anything at all.There are many subtle rules for structuring YAML, but if you just follow the existing structure in meta.yml carefully, you’ll be fine. Here is a good tutorial on YAML, if you want to know more.There is more detail on editing meta.yml in Navigation and TOCs."
});
index.addDoc({
    id: 87,
    title: "Electric Book Works course notes: Quick start",
    content: "Quick new-book setup This quick setup assumes you already have Jekyll and Prince (if you want PDFs) installed and working on your computer. Download the Jekyll template. Open _data/meta.yml and replace the sample book information there with your project and book information. In the book folder edit the template files, and add your book’s content. To modify the design, edit the .scss files for each output format in book/styles. Run the run- script for your operating system. (On OSX and Linux, you need to give it permission.) The first time you run it, start with the ‘Install or update dependencies’ option. There is much more detail in the docs."
});
index.addDoc({
    id: 88,
    title: "Electric Book Works course notes: Settings",
    content: "Settings You can apply a range of settings to how your books build in _data/settings.yml. Electric Book Manager Variants Masthead Pagination Epub settings App settings External media Electric Book ManagerThese settings are not yet used. In future, we expect to use this setting to allow or disallow Electric Book Manager servers to access your book project.electric-book-manager: enable electric-book-manager-key: “” VariantsSee Variants. MastheadThese settings control the content of your masthead in web and app outputs. You can have different settings for web and app output. Your masthead can display: only the project name (setting: project-name) the project name and book title (setting: book-title) the project name, book title, and page title (setting: page-title) full breadcrumbs that include the project name, book title, all labels listed in nav in _data/meta.yml, and the page title (setting: breadcrumbs). For example:web: masthead: content: page-title app: masthead: content: breadcrumbs Note that breadcrumbs slows your site build down significantly. So we recommend not using them for very big sites. PaginationPagination is the links to the previous and next HTML pages in your books. By default these links appear at the bottom of each page.You define pagination for web and app output separately, so that they can differ if you need them to.See Pagination for details. Epub settingsYou’ll need to adjust the epub settings if you want to embed fonts or hide the epub’s nav element. See Epub output for details. App settingsAmong other things, this is where you enable a Google Play expansion file, if you need one for a large app. This is a rare need, so by default this is off (false).google-play-expansion-file-enabled: false google-play-public-api-key: '''' External mediaIf a large number of images makes your project too big, you can store your images in a separate location. See External media for details."
});
index.addDoc({
    id: 89,
    title: "Electric Book Works course notes: Navigation and TOCs",
    content: "Navigation and tables of contents How to edit the nav and TOC Using IDs for accurate linking Adding classes to control design Generating the TOC Epub TOCs We create website navigation and tables of contents in the _data/meta.yml file of the Electric Book template. The data in the meta.yml file is written in a syntax called yaml, which is very strict (e.g. a slight error in indentation can prevent your whole book from building), but once you get the hang of it, adding your book’s information for output will be easy enough. You can test whether your yaml is valid by pasting it into the box on yamllint.com and clicking ‘Go’. The yamllint validator will tell you whether it is valid or not, and will tell you on which lines errors appear with relative accuracy. The _data/meta.yml file includes all of the metadata of your book, from the series name and ISBN to the names of each file for your contents page. By default, the title page, copyright page and contents page pull information from the _data/meta.yml file. How to edit the nav and TOC In the works: section, and then in the directory section for your particular book, and then under products:, scroll down to the output format you want to edit. E.g. web:. Edit (or create, if it doesn’t exist) a toc: section indented by two spaces below, say, web:. For each navigation or table of contents entry, add a line for each of file: '''', label: '''' and, optionally, id: '''' and class: '''', for each TOC entry. The first line in the TOC entry should have a -, like a bullet point. To nest entries beneath an entry, give the parent entry a children: line, then indented on the next line add file: '''', label: '''', and so on. The label can be anything you want, but is usually the heading of the section you are including in the table of contents, since the label is what displays in the table of contents or navigation. The file is the filename of the file that the item will link to, without a file extension. The optional id is usually the slug of the heading (the heading stripped of spaces, punctuation, and uppercase letters).Here is an example: nav: - label: ''Chapter Two'' file: ''02'' id: ''2-goodbye-world'' children: - label: ''subsection'' file: ''02'' id: ''example-id'' If you only add a toc for print or web output, the template will try to read that TOC for the other formats, too, so that you don’t have to repeat your toc for every format. If you want a different TOC for a given format, you can give that format it’s own toc section. Note that the toc and nav sections in meta.yml are structurally identical. In many projects they are the same except that one starts with toc and the other nav. A PDF will never need a nav, but a website output might have both a toc (which displays a Table of Contents on a body text page) and a nav (which defines the dropdown menu on a website). Using IDs for accurate linkingFor PDFs, ids ensure that the TOC contains accurate page numbers in books where chapters start with a blank left-hand page.Note that within a file, an id can only be used once, as ids are unique. So, for example, if you have two subsections in one file both titled ‘Extra Information’, the ids will likely be ‘extra-information-1’ and ‘extra-information-2’.If you are having trouble finding the slug for the id: generate a web version of your book, go to the heading, right click on it and choose ‘Inspect’ (you may need Cmd Shift C on Mac to get element-specific information). In the Elements box you should see a line of code that gives you the element’s id. For a heading level 1 called ‘Chapter 5: Animals’, the id is shown in this line of code followed by the label:<h1 id=''chapter-5-animals''>Chapter 5: Animals</h1> Here chapter-5-animals is the id.Note that to see files in website navigation at all, they must be included in your web output in the nav: section of _data/meta.yml. Otherwise you have to know the URL of the page you’re looking for and enter it directly into the browser’s address bar. Adding classes to control designYou can optionally add a class line to specify the class of an element. For example, frontmatter in the book (such as a preface, whose entry in the TOC which you might want to look different from chapter content) can be given a different style by adding the line class: ''frontmatter-reference'' to the node of the metadata where you defined its label, file and id.By default, frontmatter-reference in PDF output can provide a lower-roman-numeral page number, if lower-roman has been set in the $frontmatter-reference-style variable in your book’s -pdf.scss stylesheets. Generating the TOCOnce you have constructed your metadata for all of the outputs of the book that you’re outputting (for example, print PDF and web formats), use:{% include toc %} in a markdown file. This tag generates a table of contents. In the default template you can see this in the 0-3-contents.md file.Note that for the include toc tag to work (and many other tags, such as {{ images }}), somewhere earlier in the document you must include this tag:{% include metadata %} We recommend including this include metadata tag at the start of all markdown files, so that tags are available. Epub TOCsEpubs have special TOC needs. See the epub output section on metadata."
});
index.addDoc({
    id: 90,
    title: "Electric Book Works course notes: Translations",
    content: "Translations Translations vs adaptations Setting up a translation Text Styles, fonts and images Metadata Epub-specific languages Localisation In the Electric Book workflow, a translation is a subfolder of the original book. Text files go into a subfolder of /text, e.g. /text/fr. We recommend naming the translation folder with the language code, but that’s not required. This structure assumes that the translation and its parent will be kept in sync for the most part, the translation always being a faithful reproduction of the parent; but this isn’t required. A translation can be quite different to its parent. Translations vs adaptationsIf the translating team works independently, and especially if they want to make content changes that diverge from the parent, their translation is actually an adaptation. For instance, adding a new image or page-design feature, or changing design elements like fonts and colours.An adaptation could be a completely separate repository, which starts out as copy of the parent project, but from that point on is treated as a new project, overwriting the original files in the repository with the new language. Setting up a translationTo make a translation: Add a translations node to the meta.yml with directory and language. They can optionally include their own work-level metadata such as title. Any metadata not added to a translation will be inherited from the original language. See Metadata below. Add the files in a new folder inside book (or your renamed book folder), usually named after the translation language code. (Remember sometimes book has been renamed for each book in a project). TextThe text files of each translation are saved in a text subdirectory. So all text files of a French translation live in book/fr/text, and all text files of a Xhosa translation in book/xh/text. Styles, fonts and imagesTranslations inherit styles, fonts and images from the parent language, unless those folders exist in the translation directory.This works well if your images contain no text, and all the images are the same in both the parent and translation languages.If any images are different, then the translated images should also be saved in the translation images folder, e.g. book/fr/images/epub. This is most often the case, because cover images almost always need to be translated, and are therefore different.When linking to images, remember to always use the `` tag in the path, e.g.:![Dog chases bus](/dogbus.jpg) The `` tag is smart enough to know the path to your images, whether you’re in a translation or an original language, and whether your images are the same as the original language or in a translated images subfolder.This means that you can keep the same image filenames for translations, as long as they are in a translation subfolder.You must also include the ` tag once earlier in each markdown file to load the designing-for-digital/images/web` tag, along with a range of other useful tags. MetadataEach translation must be added to the meta.yml file. All translations are a subset of works, alongside work-level metadata like title. Within translations, you list each language. Each language inherits the parent language’s metadata unless overridden with its own metadata.The translations node is equivalent to works, but for translations. The system knows a page is a translation if it’s in a book subdirectory listed in translations in meta.yml. For instance, for a French translation, with our translation files saved in book/fr/, we would say: translations - directory: fr language: fr If our translation files are in book/francais, in meta.yml we would say: translations - directory: francais language: fr Here is an example of the translation section of the meta.yml file that includes translations into Xhosa and French. Note how the translations can, but don’t have to, include their own work-level metadata. Where it is included, it overrides the parent language’s metadata. This means each translation can even have its own files list. translations: - directory: xh language: xh title: Title in Xhosa products: epub: date: ''2016-05-07'' format: ''Digital download'' identifier: '''' # e.g. ISBN or UUID image: ''cover.jpg'' files: - ''0-0-cover'' - ''0-1-titlepage'' - ''0-2-copyright'' - ''0-3-contents'' - ''01'' - ''02'' - ''03'' - directory: fr language: fr title: Title in French Epub-specific languagesIn some situations, you might want the language set in your epub’s Dublin Core OPF metadata (dc:language) to be different to the language of the translation. For instance, Kindlegen will not convert epubs in languages it does not recognise. In this situation, you might need to set the epub’s Dublin Core language tag to, say, English, even though your epub’s content files are still in, say, Asanti Twi.To set this, add a language to the epub section of your translation:works: - directory: ''potatoes'' ... translations: - directory: ''twi'' language: ''twi'' products: epub: language: ''en'' LocalisationThe translate things like the navigation button and contact form, edit _data/locales.yml."
});
index.addDoc({
    id: 91,
    title: "Electric Book Works course notes: Upgrading a project",
    content: "Upgrading a project The Electric Book template is developing all the time, hopefully for the better. Sometimes you’ll want to add features from later versions into a project built on an earlier version. This is rarely a simple exercise. Especially while the template is still at v0.x.x, fundamental features like metadata-generated tag names and folder structures might change. Some tips for tackling an upgrade: Backup, or at least do all upgrading and testing in a Git branch. For the very simplest books, upgrading between versions that are close together (e.g. from v0.10 to v0.11) you might be able to simply copy book folders and _data/meta.yml from the old project into a new template. Check the changelog to see whether anything major changed that your project depends on. Your PDF outputs (print-pdf in particular) need special attention, because reflow could affect layouts that you’ve already carefully refined. You may want to use a tool like diff-pdf or Acrobat Pro to compare old and new PDF outputs. You can read some discussion about upgrades, and see a checklist of possible things to look out for while upgrading, in the repo’s issues."
});
index.addDoc({
    id: 92,
    title: "Electric Book Works course notes: Variants",
    content: "Variants Activating a variant Variant stylesheets Variant metadata Variant tables of contents For most books, the default outputs (print-pdf, screen-pdf, web, epub, app) are sufficient. You only need one version of each of those. But sometimes you need a variation on one or more of these. For instance, you might be producing two versions of a printed book with different designs (e.g. for schools and for trade) with different selections of chapters. Or you may be white-labelling a website, and need to output various versions with different colours or logos. Variants make that possible. Activating a variantTo activate a variant, put its name as the active-variant in settings.yml. Make sure you deactivate it, for instance by commenting it out, to get your default output back. Variant stylesheetsYou can create new stylesheets in addition to our standard ones, and specify these in _data/settings.yml file, like this:variants: - variant: myvariant print-pdf-stylesheet: ''print-pdf-myvariant.css'' web-stylesheet: ''web-myvariant.css'' - variant: anothervariant app-variant-stylesheet: ''app-anothervariant.css'' Variant metadataYou can define variant-specific metadata in _data/meta.yml in the same way you’d create metadata for a translation, by creating a variants node in a work containing all the same metadata you would for the work. Except instead of setting a directory, you set a variant, which matches the name of the variant you created in settings.yml. This can include things like identifiers, files lists, and toc and nav nodes. For example: variants: - variant: myvariant identifier: ''9781234567890'' products: epub: identifier: ''9780987654321'' Variant tables of contentsFor TOCs, you can also change the TOC output for a variant by adding the names of the variants in which a TOC item should appear to the main book’s TOC item node as variants. This makes sure that that node in the TOC only outputs when outputting one of the listed variants. For example:toc: label: ''Study tips'' file: ''05-study-tips'' variants: school, varsity When an active-variant is defined in _data/settings, and the default toc or nav are output, any items that do not include the active-variant’s name in its variants list will not be output.This can be much easier to maintain than creating a whole new toc node to the variant’s metadata, which would mostly be a straight duplication of the default output."
});
index.addDoc({
    id: 93,
    title: "Electric Book Works course notes: Troubleshooting and tips",
    content: "Troubleshooting and tips Checking markdown syntax Jekyll and GitHub Using includes inside blockquotes Here are some common issues we’ve encountered, especially when we’re new to the Electric Book workflow. Checking markdown syntaxUse a good text editor that colour-codes markdown as you work. We like Sublime Text (with MarkdownEditing installed and set to MultiMarkdown) or Notepad++ (with this markdown highlighter). If you’re working on Windows, set your default character encoding for your documents to ‘UTF-8 without BOM’, aka UTF-8, and not a ‘UTF-with-BOM’ option. (Jekyll will break if you don’t.) To check how your markdown converts to HTML while you work, you can use this Online Kramdown Editor by Daniel Perez Alvarez. Keep the kramdown quick reference handy. In lists, kramdown lets you use a space or a tab between the list marker (e.g. * or 1. etc.) and the list text. If only to solve an issue with nesting blockquotes in lists, use a tab between the list marker and the start of the list text, and the same tab at the start of the blockquote line. That is, the indentation (the tab) must be exactly the same for the blockquote to nest correctly in the list. (A local Jekyll instance may correctly parse nested lists even with a space after the list marker and a tab before the blockquote >. But GitHub Pages is much stricter and requires exactly the same indentation.) E.g. see our book Newborn Care 12-5. Keep spans within block elements. For instance, if you have two paragraphs in italic, don’t start the italics with * in the first paragraph and end the span with a second * in the next paragraph. The HTML needs one span (e.g. <em> span) in the first para, and another in the second para. The converter isn’t smart enough to split your intended italics into two spans. Rather end the first span in the first para, and start another one in the second. Jekyll and GitHub When running Jekyll locally, and if your repo is a project using GitHub Pages (not an organisation or user site), you’ll need to add --baseurl '' when running Jekyll at the command line. Here’s how and why. You may get different results between a local Jekyll install and GitHub Pages, even if both are using kramdown. Always check (at least spot check) both places. Jekyll may break if you use a colon (:) in YAML frontmatter like a title. For instance, title: Beans: The musical fruit. While you can either use another character (e.g. title: Beans—The musical fruit or the HTML &#58; for the colon, title: Beans&#58; The musical fruit), it’s easier to just wrap your title in double quotes: title: ''Beans: The musical fruit''. We recommend setting .gitignore to ignore the _site folder, where Jekyll will store HTML output locally. If you choose not to .gitignore your _site folder, it’ll contain (and sync to GitHub) your local machine’s most recent Jekyll HTML output. (The _site folder has nothing to do with what GitHub Pages publishes.) In theory, committing the _site folder makes it easy for collaborators without Jekyll to grab a book’s output HTML from the repo. But it comes with problems: committers have a responsibility to make sure their Jekyll instance does a good job, and that their _site output is up-to-date with the latest changes to the underlying markdown. Importantly, if you have more than one committer on a book, you’ll get lots of merge conflicts in the _site folder, and this will make your head hurt. Using includes inside blockquotesIf you use {% include figure %} inside a markdown blockquote, for instance if you’re creating a box, the figure breaks the box. This is because the Liquid tag itself, when processed, adds a blank line in the markdown. To kramdown, it looks like your > blockquote is finished. And at the next > after the include, a new blockquote starts – where you wanted one continuous blockquote.Issues with newlines at Liquid tags is a widespread PITA. It’s possible that this will be simpler to solve when Jekyll uses Liquid 4, which seems to provide special syntax for removing whitespace. Till then, this workaround works well: capture the include and output the captured result with the strip_newlines filter. Here is an example.This will not work:> This figure shows the different paths taken by these economies. > > {% include figure image=''fig.jpg'' %} > > Notice that West Germany started from a more favourable position in 1950 than East Germany. Yet in 1936, before the war began, the two parts of Germany had virtually identical living standards. {:.box} And this does work:> This figure shows the different paths taken by these economies. > > {% capture myfigure %} {% include figure image=''fig.jpg'' %} {% endcapture %}{{ myfigure | strip_newlines }} > > Notice that West Germany started from a more favourable position in 1950 than East Germany. Yet in 1936, before the war began, the two parts of Germany had virtually identical living standards. {:.box} Thanks to Clemens Tolboom and Nathan Arthur for the tip.Another approach – which is actually easier if you know a little HTML – is to use an HTML blockquote rather than a markdown one. In that case, you’d do this:<blockquote class=''box'' markdown=1''> This figure shows the different paths taken by these economies. {% include figure image=''fig.jpg'' %} Notice that West Germany started from a more favourable position in 1950 than East Germany. Yet in 1936, before the war began, the two parts of Germany had virtually identical living standards. Note that you need markdown=''1'' to tell kramdown to process the content of your HTML blockquote as markdown."
});
